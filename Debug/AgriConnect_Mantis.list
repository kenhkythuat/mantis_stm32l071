
AgriConnect_Mantis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000586c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a88  08005a88  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a90  08005a90  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08005a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  2000022c  08005cc4  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08005cc4  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a27  00000000  00000000  00020297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002885  00000000  00000000  00032cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00035548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d69  00000000  00000000  00036660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001418a  00000000  00000000  000373c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156e9  00000000  00000000  0004b553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bf5e  00000000  00000000  00060c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004324  00000000  00000000  000dcb9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e0ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000022c 	.word	0x2000022c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005914 	.word	0x08005914

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000230 	.word	0x20000230
 8000104:	08005914 	.word	0x08005914

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004d0:	f3bf 8f4f 	dsb	sy
}
 80004d4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004d6:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <__NVIC_SystemReset+0x1c>)
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <__NVIC_SystemReset+0x20>)
 80004da:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004dc:	f3bf 8f4f 	dsb	sy
}
 80004e0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	e7fd      	b.n	80004e2 <__NVIC_SystemReset+0x16>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	e000ed00 	.word	0xe000ed00
 80004ec:	05fa0004 	.word	0x05fa0004

080004f0 <HAL_UART_RxCpltCallback>:
//		HAL_UARTEx_ReceiveToIdle_IT(huart, (uint8_t *) simcomRxBuffer, 124);
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a4c      	ldr	r2, [pc, #304]	; (8000630 <HAL_UART_RxCpltCallback+0x140>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d000      	beq.n	8000504 <HAL_UART_RxCpltCallback+0x14>
 8000502:	e08a      	b.n	800061a <HAL_UART_RxCpltCallback+0x12a>
	{
		if((rxData!='\r')&&(rxData!='\n')){
 8000504:	4b4b      	ldr	r3, [pc, #300]	; (8000634 <HAL_UART_RxCpltCallback+0x144>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b0d      	cmp	r3, #13
 800050a:	d014      	beq.n	8000536 <HAL_UART_RxCpltCallback+0x46>
 800050c:	4b49      	ldr	r3, [pc, #292]	; (8000634 <HAL_UART_RxCpltCallback+0x144>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b0a      	cmp	r3, #10
 8000512:	d010      	beq.n	8000536 <HAL_UART_RxCpltCallback+0x46>
			simcomRxBuffer[rxIndex++]=rxData;
 8000514:	4b48      	ldr	r3, [pc, #288]	; (8000638 <HAL_UART_RxCpltCallback+0x148>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	b291      	uxth	r1, r2
 800051c:	4a46      	ldr	r2, [pc, #280]	; (8000638 <HAL_UART_RxCpltCallback+0x148>)
 800051e:	8011      	strh	r1, [r2, #0]
 8000520:	001a      	movs	r2, r3
 8000522:	4b44      	ldr	r3, [pc, #272]	; (8000634 <HAL_UART_RxCpltCallback+0x144>)
 8000524:	7819      	ldrb	r1, [r3, #0]
 8000526:	4b45      	ldr	r3, [pc, #276]	; (800063c <HAL_UART_RxCpltCallback+0x14c>)
 8000528:	5499      	strb	r1, [r3, r2]
			rxDataCouter++;
 800052a:	4b45      	ldr	r3, [pc, #276]	; (8000640 <HAL_UART_RxCpltCallback+0x150>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	4b43      	ldr	r3, [pc, #268]	; (8000640 <HAL_UART_RxCpltCallback+0x150>)
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	e071      	b.n	800061a <HAL_UART_RxCpltCallback+0x12a>
		}
		else{
			if(isConnectMQTT==1){
 8000536:	4b43      	ldr	r3, [pc, #268]	; (8000644 <HAL_UART_RxCpltCallback+0x154>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d000      	beq.n	8000540 <HAL_UART_RxCpltCallback+0x50>
 800053e:	e066      	b.n	800060e <HAL_UART_RxCpltCallback+0x11e>
				switch(rxDataCouter){
 8000540:	4b3f      	ldr	r3, [pc, #252]	; (8000640 <HAL_UART_RxCpltCallback+0x150>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b1f      	cmp	r3, #31
 8000546:	d012      	beq.n	800056e <HAL_UART_RxCpltCallback+0x7e>
 8000548:	dc61      	bgt.n	800060e <HAL_UART_RxCpltCallback+0x11e>
 800054a:	2b1e      	cmp	r3, #30
 800054c:	d005      	beq.n	800055a <HAL_UART_RxCpltCallback+0x6a>
 800054e:	dc5e      	bgt.n	800060e <HAL_UART_RxCpltCallback+0x11e>
 8000550:	2b01      	cmp	r3, #1
 8000552:	d01f      	beq.n	8000594 <HAL_UART_RxCpltCallback+0xa4>
 8000554:	2b0e      	cmp	r3, #14
 8000556:	d04a      	beq.n	80005ee <HAL_UART_RxCpltCallback+0xfe>
 8000558:	e059      	b.n	800060e <HAL_UART_RxCpltCallback+0x11e>
				case strlen(FARM)+16:
					payLoadPin = (int)simcomRxBuffer[strlen(FARM)+15] -48;
 800055a:	4b38      	ldr	r3, [pc, #224]	; (800063c <HAL_UART_RxCpltCallback+0x14c>)
 800055c:	7f5b      	ldrb	r3, [r3, #29]
 800055e:	3b30      	subs	r3, #48	; 0x30
 8000560:	001a      	movs	r2, r3
 8000562:	4b39      	ldr	r3, [pc, #228]	; (8000648 <HAL_UART_RxCpltCallback+0x158>)
 8000564:	601a      	str	r2, [r3, #0]
					loadflag = 1;
 8000566:	4b39      	ldr	r3, [pc, #228]	; (800064c <HAL_UART_RxCpltCallback+0x15c>)
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
					break;
 800056c:	e04f      	b.n	800060e <HAL_UART_RxCpltCallback+0x11e>
				case strlen(FARM)+17:
					payLoadPin = ((int)simcomRxBuffer[strlen(FARM)+15] -48)*10+((int)simcomRxBuffer[strlen(FARM)+16]-48);
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <HAL_UART_RxCpltCallback+0x14c>)
 8000570:	7f5b      	ldrb	r3, [r3, #29]
 8000572:	3b30      	subs	r3, #48	; 0x30
 8000574:	001a      	movs	r2, r3
 8000576:	0013      	movs	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	189b      	adds	r3, r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	001a      	movs	r2, r3
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <HAL_UART_RxCpltCallback+0x14c>)
 8000582:	7f9b      	ldrb	r3, [r3, #30]
 8000584:	3b30      	subs	r3, #48	; 0x30
 8000586:	18d2      	adds	r2, r2, r3
 8000588:	4b2f      	ldr	r3, [pc, #188]	; (8000648 <HAL_UART_RxCpltCallback+0x158>)
 800058a:	601a      	str	r2, [r3, #0]
					loadflag = 1;
 800058c:	4b2f      	ldr	r3, [pc, #188]	; (800064c <HAL_UART_RxCpltCallback+0x15c>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
					break;
 8000592:	e03c      	b.n	800060e <HAL_UART_RxCpltCallback+0x11e>
				case 1:
					if((loadflag==1)&&(payLoadPin<=NUMBER_LOADS)){
 8000594:	4b2d      	ldr	r3, [pc, #180]	; (800064c <HAL_UART_RxCpltCallback+0x15c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d137      	bne.n	800060c <HAL_UART_RxCpltCallback+0x11c>
 800059c:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <HAL_UART_RxCpltCallback+0x158>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	dc33      	bgt.n	800060c <HAL_UART_RxCpltCallback+0x11c>
						payLoadStatus = (int)simcomRxBuffer[0] -48;
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <HAL_UART_RxCpltCallback+0x14c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3b30      	subs	r3, #48	; 0x30
 80005aa:	001a      	movs	r2, r3
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <HAL_UART_RxCpltCallback+0x160>)
 80005ae:	601a      	str	r2, [r3, #0]
						if((payLoadStatus==0)||(payLoadStatus==1)){
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <HAL_UART_RxCpltCallback+0x160>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d003      	beq.n	80005c0 <HAL_UART_RxCpltCallback+0xd0>
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <HAL_UART_RxCpltCallback+0x160>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d112      	bne.n	80005e6 <HAL_UART_RxCpltCallback+0xf6>
						HAL_GPIO_WritePin(GPIO_LOAD_PORT[payLoadPin-1],GPIO_LOAD_PIN[payLoadPin-1],payLoadStatus);
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <HAL_UART_RxCpltCallback+0x158>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	1e5a      	subs	r2, r3, #1
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <HAL_UART_RxCpltCallback+0x164>)
 80005c8:	0092      	lsls	r2, r2, #2
 80005ca:	58d0      	ldr	r0, [r2, r3]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <HAL_UART_RxCpltCallback+0x158>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <HAL_UART_RxCpltCallback+0x168>)
 80005d4:	0092      	lsls	r2, r2, #2
 80005d6:	58d3      	ldr	r3, [r2, r3]
 80005d8:	b299      	uxth	r1, r3
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <HAL_UART_RxCpltCallback+0x160>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	001a      	movs	r2, r3
 80005e2:	f001 fc72 	bl	8001eca <HAL_GPIO_WritePin>
						}
						//informPayloadToServer();
						loadflag = 0;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_UART_RxCpltCallback+0x15c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
					}
					break;
 80005ec:	e00e      	b.n	800060c <HAL_UART_RxCpltCallback+0x11c>
				case 14:
					if(strstr((char *)simcomRxBuffer,"CMQTTPUB: 0,0")){
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <HAL_UART_RxCpltCallback+0x16c>)
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_UART_RxCpltCallback+0x14c>)
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f004 fcf9 	bl	8004fec <strstr>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d007      	beq.n	800060e <HAL_UART_RxCpltCallback+0x11e>
						IWDG->KR = 0xAAAA;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_UART_RxCpltCallback+0x170>)
 8000600:	4a18      	ldr	r2, [pc, #96]	; (8000664 <HAL_UART_RxCpltCallback+0x174>)
 8000602:	601a      	str	r2, [r3, #0]
						ledStatusSendTopic=1;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <HAL_UART_RxCpltCallback+0x178>)
 8000606:	2201      	movs	r2, #1
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	e000      	b.n	800060e <HAL_UART_RxCpltCallback+0x11e>
					break;
 800060c:	46c0      	nop			; (mov r8, r8)
					}
				default:
				}
			}
			rxDataCouter=0;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_UART_RxCpltCallback+0x150>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
			rxIndex=0;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_UART_RxCpltCallback+0x148>)
 8000616:	2200      	movs	r2, #0
 8000618:	801a      	strh	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800061a:	4906      	ldr	r1, [pc, #24]	; (8000634 <HAL_UART_RxCpltCallback+0x144>)
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <HAL_UART_RxCpltCallback+0x17c>)
 800061e:	2201      	movs	r2, #1
 8000620:	0018      	movs	r0, r3
 8000622:	f003 f9bf 	bl	80039a4 <HAL_UART_Receive_IT>
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40013800 	.word	0x40013800
 8000634:	20000610 	.word	0x20000610
 8000638:	20000612 	.word	0x20000612
 800063c:	200005ac 	.word	0x200005ac
 8000640:	200005a8 	.word	0x200005a8
 8000644:	20000620 	.word	0x20000620
 8000648:	200005a0 	.word	0x200005a0
 800064c:	20000614 	.word	0x20000614
 8000650:	200005a4 	.word	0x200005a4
 8000654:	20000000 	.word	0x20000000
 8000658:	20000028 	.word	0x20000028
 800065c:	0800592c 	.word	0x0800592c
 8000660:	40003000 	.word	0x40003000
 8000664:	0000aaaa 	.word	0x0000aaaa
 8000668:	2000064c 	.word	0x2000064c
 800066c:	2000039c 	.word	0x2000039c

08000670 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim6.Instance)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d106      	bne.n	8000692 <HAL_TIM_PeriodElapsedCallback+0x22>
 {
	 if(isConnectMQTT){
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <HAL_TIM_PeriodElapsedCallback+0x22>
		 sendPayloadStatusToServer=1;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800068e:	2201      	movs	r2, #1
 8000690:	601a      	str	r2, [r3, #0]
	 }
 }
 HAL_TIM_Base_Start_IT(&htim6);
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000694:	0018      	movs	r0, r3
 8000696:	f002 fe7b 	bl	8003390 <HAL_TIM_Base_Start_IT>
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	2000035c 	.word	0x2000035c
 80006a8:	20000620 	.word	0x20000620
 80006ac:	20000624 	.word	0x20000624

080006b0 <sendingToSimcomA76xx>:
void sendingToSimcomA76xx(char *cmd)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)cmd,strlen(cmd),1000);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fd24 	bl	8000108 <strlen>
 80006c0:	0003      	movs	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	23fa      	movs	r3, #250	; 0xfa
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	4803      	ldr	r0, [pc, #12]	; (80006d8 <sendingToSimcomA76xx+0x28>)
 80006cc:	f003 f8ca 	bl	8003864 <HAL_UART_Transmit>
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000039c 	.word	0x2000039c

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f001 f85e 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f85c 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 fa70 	bl	8000bcc <MX_GPIO_Init>
  MX_I2C2_Init();
 80006ec:	f000 f8d0 	bl	8000890 <MX_I2C2_Init>
  MX_SPI1_Init();
 80006f0:	f000 f92e 	bl	8000950 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006f4:	f000 f9da 	bl	8000aac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 fa08 	bl	8000b0c <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80006fc:	f000 fa36 	bl	8000b6c <MX_USART4_UART_Init>
  MX_TIM6_Init();
 8000700:	f000 f996 	bl	8000a30 <MX_TIM6_Init>
  //MX_IWDG_Init();
  MX_SPI2_Init();
 8000704:	f000 f95c 	bl	80009c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	481d      	ldr	r0, [pc, #116]	; (8000784 <main+0xa8>)
 800070e:	2201      	movs	r2, #1
 8000710:	0019      	movs	r1, r3
 8000712:	f001 fbda 	bl	8001eca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <main+0xa8>)
 8000718:	2201      	movs	r2, #1
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fbd4 	bl	8001eca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <main+0xa8>)
 8000724:	2201      	movs	r2, #1
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	0018      	movs	r0, r3
 800072a:	f001 fbce 	bl	8001eca <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800072e:	4916      	ldr	r1, [pc, #88]	; (8000788 <main+0xac>)
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <main+0xb0>)
 8000732:	2201      	movs	r2, #1
 8000734:	0018      	movs	r0, r3
 8000736:	f003 f935 	bl	80039a4 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <main+0xb4>)
 800073c:	0018      	movs	r0, r3
 800073e:	f002 fe27 	bl	8003390 <HAL_TIM_Base_Start_IT>
  turnOnA76XX();
 8000742:	f000 fb01 	bl	8000d48 <turnOnA76XX>
  ledStatus('R');
 8000746:	2052      	movs	r0, #82	; 0x52
 8000748:	f000 fc80 	bl	800104c <ledStatus>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!isConnectSimcomA76xx){
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <main+0xb8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d104      	bne.n	800075e <main+0x82>
		  isConnectSimcomA76xx = connectSimcomA76xx();
 8000754:	f000 fb2a 	bl	8000dac <connectSimcomA76xx>
 8000758:	0002      	movs	r2, r0
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <main+0xb8>)
 800075c:	601a      	str	r2, [r3, #0]
	  }
	  if(!isConnectMQTT){
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <main+0xbc>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d104      	bne.n	8000770 <main+0x94>
		  isConnectMQTT = connectMQTT();
 8000766:	f000 fba7 	bl	8000eb8 <connectMQTT>
 800076a:	0002      	movs	r2, r0
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <main+0xbc>)
 800076e:	601a      	str	r2, [r3, #0]
	  }
	  if(sendPayloadStatusToServer == 1){
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <main+0xc0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d1e9      	bne.n	800074c <main+0x70>
		  sendStatusPayloadToMQTT();
 8000778:	f000 fcd4 	bl	8001124 <sendStatusPayloadToMQTT>
		  sendPayloadStatusToServer= 0;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <main+0xc0>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
	  if(!isConnectSimcomA76xx){
 8000782:	e7e3      	b.n	800074c <main+0x70>
 8000784:	50000800 	.word	0x50000800
 8000788:	20000610 	.word	0x20000610
 800078c:	2000039c 	.word	0x2000039c
 8000790:	2000035c 	.word	0x2000035c
 8000794:	2000061c 	.word	0x2000061c
 8000798:	20000620 	.word	0x20000620
 800079c:	20000624 	.word	0x20000624

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b09b      	sub	sp, #108	; 0x6c
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	2434      	movs	r4, #52	; 0x34
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	0018      	movs	r0, r3
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f004 fc13 	bl	8004fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b6:	2320      	movs	r3, #32
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	0018      	movs	r0, r3
 80007bc:	2314      	movs	r3, #20
 80007be:	001a      	movs	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f004 fc0b 	bl	8004fdc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c6:	003b      	movs	r3, r7
 80007c8:	0018      	movs	r0, r3
 80007ca:	2320      	movs	r3, #32
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f004 fc04 	bl	8004fdc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <SystemClock_Config+0xe8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a2c      	ldr	r2, [pc, #176]	; (800088c <SystemClock_Config+0xec>)
 80007da:	401a      	ands	r2, r3
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <SystemClock_Config+0xe8>)
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0109      	lsls	r1, r1, #4
 80007e2:	430a      	orrs	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2209      	movs	r2, #9
 80007ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	0252      	lsls	r2, r2, #9
 80007f2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f4:	0021      	movs	r1, r4
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2201      	movs	r2, #1
 80007fa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2202      	movs	r2, #2
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	0252      	lsls	r2, r2, #9
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	22c0      	movs	r2, #192	; 0xc0
 800080e:	0312      	lsls	r2, r2, #12
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	03d2      	lsls	r2, r2, #15
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	187b      	adds	r3, r7, r1
 800081c:	0018      	movs	r0, r3
 800081e:	f001 fcf1 	bl	8002204 <HAL_RCC_OscConfig>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000826:	f000 fd1d 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	2120      	movs	r1, #32
 800082c:	187b      	adds	r3, r7, r1
 800082e:	220f      	movs	r2, #15
 8000830:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2203      	movs	r2, #3
 8000836:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2101      	movs	r1, #1
 800084e:	0018      	movs	r0, r3
 8000850:	f002 f854 	bl	80028fc <HAL_RCC_ClockConfig>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000858:	f000 fd04 	bl	8001264 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800085c:	003b      	movs	r3, r7
 800085e:	2203      	movs	r2, #3
 8000860:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000868:	003b      	movs	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086e:	003b      	movs	r3, r7
 8000870:	0018      	movs	r0, r3
 8000872:	f002 fa67 	bl	8002d44 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800087a:	f000 fcf3 	bl	8001264 <Error_Handler>
  }
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b01b      	add	sp, #108	; 0x6c
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40007000 	.word	0x40007000
 800088c:	ffffe7ff 	.word	0xffffe7ff

08000890 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C2_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C2_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C2_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C2_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C2_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C2_Init+0x74>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fb19 	bl	8001f04 <HAL_I2C_Init>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 fcc5 	bl	8001264 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C2_Init+0x74>)
 80008dc:	2100      	movs	r1, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fba6 	bl	8002030 <HAL_I2CEx_ConfigAnalogFilter>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 fcbc 	bl	8001264 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <MX_I2C2_Init+0x74>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f001 fbe9 	bl	80020c8 <HAL_I2CEx_ConfigDigitalFilter>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 fcb3 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000248 	.word	0x20000248
 8000908:	40005800 	.word	0x40005800
 800090c:	00707cbb 	.word	0x00707cbb

08000910 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_IWDG_Init+0x34>)
 8000916:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <MX_IWDG_Init+0x38>)
 8000918:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_IWDG_Init+0x34>)
 800091c:	2206      	movs	r2, #6
 800091e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_IWDG_Init+0x34>)
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <MX_IWDG_Init+0x3c>)
 8000924:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_IWDG_Init+0x34>)
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <MX_IWDG_Init+0x3c>)
 800092a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_IWDG_Init+0x34>)
 800092e:	0018      	movs	r0, r3
 8000930:	f001 fc16 	bl	8002160 <HAL_IWDG_Init>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000938:	f000 fc94 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	2000029c 	.word	0x2000029c
 8000948:	40003000 	.word	0x40003000
 800094c:	00000fff 	.word	0x00000fff

08000950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_SPI1_Init+0x68>)
 8000956:	4a19      	ldr	r2, [pc, #100]	; (80009bc <MX_SPI1_Init+0x6c>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_SPI1_Init+0x68>)
 800095c:	2282      	movs	r2, #130	; 0x82
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_SPI1_Init+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_SPI1_Init+0x68>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_SPI1_Init+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_SPI1_Init+0x68>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_SPI1_Init+0x68>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_SPI1_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_SPI1_Init+0x68>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_SPI1_Init+0x68>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_SPI1_Init+0x68>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_SPI1_Init+0x68>)
 800099c:	2207      	movs	r2, #7
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <MX_SPI1_Init+0x68>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f002 fb18 	bl	8002fd8 <HAL_SPI_Init>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009ac:	f000 fc5a 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	200002ac 	.word	0x200002ac
 80009bc:	40013000 	.word	0x40013000

080009c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_SPI2_Init+0x68>)
 80009c6:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <MX_SPI2_Init+0x6c>)
 80009c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_SPI2_Init+0x68>)
 80009cc:	2282      	movs	r2, #130	; 0x82
 80009ce:	0052      	lsls	r2, r2, #1
 80009d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_SPI2_Init+0x68>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_SPI2_Init+0x68>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_SPI2_Init+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_SPI2_Init+0x68>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_SPI2_Init+0x68>)
 80009ec:	2280      	movs	r2, #128	; 0x80
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_SPI2_Init+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_SPI2_Init+0x68>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_SPI2_Init+0x68>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_SPI2_Init+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_SPI2_Init+0x68>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <MX_SPI2_Init+0x68>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 fae0 	bl	8002fd8 <HAL_SPI_Init>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a1c:	f000 fc22 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000304 	.word	0x20000304
 8000a2c:	40003800 	.word	0x40003800

08000a30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a36:	003b      	movs	r3, r7
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f004 facc 	bl	8004fdc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_TIM6_Init+0x6c>)
 8000a46:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <MX_TIM6_Init+0x70>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_TIM6_Init+0x6c>)
 8000a4c:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_TIM6_Init+0x74>)
 8000a4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_TIM6_Init+0x6c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_TIM6_Init+0x6c>)
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <MX_TIM6_Init+0x78>)
 8000a5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_TIM6_Init+0x6c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_TIM6_Init+0x6c>)
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 fc52 	bl	800330e <HAL_TIM_Base_Init>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000a6e:	f000 fbf9 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a7e:	003a      	movs	r2, r7
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_TIM6_Init+0x6c>)
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 fe3b 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000a8e:	f000 fbe9 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	2000035c 	.word	0x2000035c
 8000aa0:	40001000 	.word	0x40001000
 8000aa4:	00007cff 	.word	0x00007cff
 8000aa8:	0000270f 	.word	0x0000270f

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MX_USART1_UART_Init+0x5c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ab8:	22e1      	movs	r2, #225	; 0xe1
 8000aba:	0252      	lsls	r2, r2, #9
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f002 fe63 	bl	80037bc <HAL_UART_Init>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 fbb3 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000039c 	.word	0x2000039c
 8000b08:	40013800 	.word	0x40013800

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART2_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b18:	22e1      	movs	r2, #225	; 0xe1
 8000b1a:	0252      	lsls	r2, r2, #9
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 fe33 	bl	80037bc <HAL_UART_Init>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 fb83 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000424 	.word	0x20000424
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_USART4_UART_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000b78:	22e1      	movs	r2, #225	; 0xe1
 8000b7a:	0252      	lsls	r2, r2, #9
 8000b7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <MX_USART4_UART_Init+0x58>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f002 fe03 	bl	80037bc <HAL_UART_Init>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 fb53 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200004ac 	.word	0x200004ac
 8000bc8:	40004c00 	.word	0x40004c00

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b08b      	sub	sp, #44	; 0x2c
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	2414      	movs	r4, #20
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	2314      	movs	r3, #20
 8000bda:	001a      	movs	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f004 f9fd 	bl	8004fdc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be6:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	430a      	orrs	r2, r1
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bee:	4b50      	ldr	r3, [pc, #320]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfe:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c06:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c16:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c18:	2104      	movs	r1, #4
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c1e:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	2204      	movs	r2, #4
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c2e:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c30:	2102      	movs	r1, #2
 8000c32:	430a      	orrs	r2, r1
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c36:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c46:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c48:	2108      	movs	r1, #8
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c4e:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <MX_GPIO_Init+0x164>)
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	2208      	movs	r2, #8
 8000c54:	4013      	ands	r3, r2
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS_SDCARD_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000c5a:	4936      	ldr	r1, [pc, #216]	; (8000d34 <MX_GPIO_Init+0x168>)
 8000c5c:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <MX_GPIO_Init+0x16c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 f932 	bl	8001eca <HAL_GPIO_WritePin>
                          |LED_STATUS_Pin|PAYLOAD_2_Pin|PAYLOAD_3_Pin|PAYLOAD_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_A76XX_Pin|GPIO_PIN_12|GPIO_PIN_14|PAYLOAD_6_Pin
 8000c66:	4935      	ldr	r1, [pc, #212]	; (8000d3c <MX_GPIO_Init+0x170>)
 8000c68:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <MX_GPIO_Init+0x174>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f001 f92c 	bl	8001eca <HAL_GPIO_WritePin>
                          |PAYLOAD_7_Pin|PAYLOAD_8_Pin|PAYLOAD_9_Pin|PAYLOAD_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAYLOAD_1_GPIO_Port, PAYLOAD_1_Pin, GPIO_PIN_RESET);
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	0219      	lsls	r1, r3, #8
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 f924 	bl	8001eca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAYLOAD_5_GPIO_Port, PAYLOAD_5_Pin, GPIO_PIN_RESET);
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <MX_GPIO_Init+0x178>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	2104      	movs	r1, #4
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f001 f91e 	bl	8001eca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_SDCARD_Pin LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin
                           LED_STATUS_Pin PAYLOAD_2_Pin PAYLOAD_3_Pin PAYLOAD_4_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_SDCARD_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <MX_GPIO_Init+0x168>)
 8000c92:	601a      	str	r2, [r3, #0]
                          |LED_STATUS_Pin|PAYLOAD_2_Pin|PAYLOAD_3_Pin|PAYLOAD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2201      	movs	r2, #1
 8000c98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <MX_GPIO_Init+0x16c>)
 8000caa:	0019      	movs	r1, r3
 8000cac:	0010      	movs	r0, r2
 8000cae:	f000 ff71 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_A76XX_Pin PB12 PB14 PAYLOAD_6_Pin
                           PAYLOAD_7_Pin PAYLOAD_8_Pin PAYLOAD_9_Pin PAYLOAD_10_Pin */
  GPIO_InitStruct.Pin = ENABLE_A76XX_Pin|GPIO_PIN_12|GPIO_PIN_14|PAYLOAD_6_Pin
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <MX_GPIO_Init+0x170>)
 8000cb6:	601a      	str	r2, [r3, #0]
                          |PAYLOAD_7_Pin|PAYLOAD_8_Pin|PAYLOAD_9_Pin|PAYLOAD_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2201      	movs	r2, #1
 8000cbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <MX_GPIO_Init+0x174>)
 8000cce:	0019      	movs	r1, r3
 8000cd0:	0010      	movs	r0, r2
 8000cd2:	f000 ff5f 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAYLOAD_1_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_1_Pin;
 8000cd6:	0021      	movs	r1, r4
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	0212      	lsls	r2, r2, #8
 8000cde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	000c      	movs	r4, r1
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PAYLOAD_1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	193a      	adds	r2, r7, r4
 8000cf6:	23a0      	movs	r3, #160	; 0xa0
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 ff49 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAYLOAD_5_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_5_Pin;
 8000d02:	0021      	movs	r1, r4
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2204      	movs	r2, #4
 8000d08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PAYLOAD_5_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <MX_GPIO_Init+0x178>)
 8000d20:	0019      	movs	r1, r3
 8000d22:	0010      	movs	r0, r2
 8000d24:	f000 ff36 	bl	8001b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b00b      	add	sp, #44	; 0x2c
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	00001fd0 	.word	0x00001fd0
 8000d38:	50000800 	.word	0x50000800
 8000d3c:	000050fa 	.word	0x000050fa
 8000d40:	50000400 	.word	0x50000400
 8000d44:	50000c00 	.word	0x50000c00

08000d48 <turnOnA76XX>:

/* USER CODE BEGIN 4 */



void turnOnA76XX(void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, RESET);
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <turnOnA76XX+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 f8b9 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <turnOnA76XX+0x5c>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 fd90 	bl	8001880 <HAL_Delay>
	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, SET);
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <turnOnA76XX+0x58>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	2102      	movs	r1, #2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f001 f8af 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <turnOnA76XX+0x5c>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 fd86 	bl	8001880 <HAL_Delay>
	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, RESET);
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <turnOnA76XX+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f001 f8a5 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000d80:	20c8      	movs	r0, #200	; 0xc8
 8000d82:	f000 fd7d 	bl	8001880 <HAL_Delay>
	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, SET);
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <turnOnA76XX+0x58>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f001 f89c 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_Delay(10000);
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <turnOnA76XX+0x60>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 fd73 	bl	8001880 <HAL_Delay>

}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	50000400 	.word	0x50000400
 8000da4:	00000bb8 	.word	0x00000bb8
 8000da8:	00002710 	.word	0x00002710

08000dac <connectSimcomA76xx>:

int connectSimcomA76xx(){
 8000dac:	b5b0      	push	{r4, r5, r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	previousTick =  HAL_GetTick();
 8000db0:	f000 fd5c 	bl	800186c <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	001a      	movs	r2, r3
 8000db8:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <connectSimcomA76xx+0xe0>)
 8000dba:	601a      	str	r2, [r3, #0]
	while(isConnectSimcomA76xx == 0 && previousTick  + timeOutConnectA76XX >  HAL_GetTick()){
 8000dbc:	e04b      	b.n	8000e56 <connectSimcomA76xx+0xaa>
		if(strstr((char *)simcomRxBuffer,"PB DONE")){
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <connectSimcomA76xx+0xe4>)
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <connectSimcomA76xx+0xe8>)
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f004 f911 	bl	8004fec <strstr>
 8000dca:	1e03      	subs	r3, r0, #0
 8000dcc:	d002      	beq.n	8000dd4 <connectSimcomA76xx+0x28>
			isPBDONE = 1;
 8000dce:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <connectSimcomA76xx+0xec>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]
		}
		if(isPBDONE==1){
 8000dd4:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <connectSimcomA76xx+0xec>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d11a      	bne.n	8000e12 <connectSimcomA76xx+0x66>
			memset(simcomRxBuffer,'0',100);
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <connectSimcomA76xx+0xe8>)
 8000dde:	2264      	movs	r2, #100	; 0x64
 8000de0:	2130      	movs	r1, #48	; 0x30
 8000de2:	0018      	movs	r0, r3
 8000de4:	f004 f8fa 	bl	8004fdc <memset>
			HAL_Delay(200);
 8000de8:	20c8      	movs	r0, #200	; 0xc8
 8000dea:	f000 fd49 	bl	8001880 <HAL_Delay>
			sendingToSimcomA76xx(AT_CHECK_A76XX);
 8000dee:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <connectSimcomA76xx+0xf0>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff fc5d 	bl	80006b0 <sendingToSimcomA76xx>
			HAL_Delay(200);
 8000df6:	20c8      	movs	r0, #200	; 0xc8
 8000df8:	f000 fd42 	bl	8001880 <HAL_Delay>
			if(strstr((char *)simcomRxBuffer,"OK")){
 8000dfc:	4a28      	ldr	r2, [pc, #160]	; (8000ea0 <connectSimcomA76xx+0xf4>)
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <connectSimcomA76xx+0xe8>)
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f004 f8f2 	bl	8004fec <strstr>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d002      	beq.n	8000e12 <connectSimcomA76xx+0x66>
				isATOK = 1;
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <connectSimcomA76xx+0xf8>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
			}
		}
		if(isATOK==1){
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <connectSimcomA76xx+0xf8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d11d      	bne.n	8000e56 <connectSimcomA76xx+0xaa>
			memset(simcomRxBuffer,'0',100);
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <connectSimcomA76xx+0xe8>)
 8000e1c:	2264      	movs	r2, #100	; 0x64
 8000e1e:	2130      	movs	r1, #48	; 0x30
 8000e20:	0018      	movs	r0, r3
 8000e22:	f004 f8db 	bl	8004fdc <memset>
			HAL_Delay(200);
 8000e26:	20c8      	movs	r0, #200	; 0xc8
 8000e28:	f000 fd2a 	bl	8001880 <HAL_Delay>
			sendingToSimcomA76xx(AT_CHECK_ESIM);
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <connectSimcomA76xx+0xfc>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff fc3e 	bl	80006b0 <sendingToSimcomA76xx>
			HAL_Delay(200);
 8000e34:	20c8      	movs	r0, #200	; 0xc8
 8000e36:	f000 fd23 	bl	8001880 <HAL_Delay>
			if(strstr((char *)simcomRxBuffer,"OKGREG: 0,1")){
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <connectSimcomA76xx+0x100>)
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <connectSimcomA76xx+0xe8>)
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f004 f8d3 	bl	8004fec <strstr>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d005      	beq.n	8000e56 <connectSimcomA76xx+0xaa>
				isConnectSimcomA76xx = 1;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <connectSimcomA76xx+0x104>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
				ledStatus('B');
 8000e50:	2042      	movs	r0, #66	; 0x42
 8000e52:	f000 f8fb 	bl	800104c <ledStatus>
	while(isConnectSimcomA76xx == 0 && previousTick  + timeOutConnectA76XX >  HAL_GetTick()){
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <connectSimcomA76xx+0x104>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10a      	bne.n	8000e74 <connectSimcomA76xx+0xc8>
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <connectSimcomA76xx+0xe0>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <connectSimcomA76xx+0x108>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	18d3      	adds	r3, r2, r3
 8000e68:	001c      	movs	r4, r3
 8000e6a:	f000 fcff 	bl	800186c <HAL_GetTick>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	429c      	cmp	r4, r3
 8000e72:	d8a4      	bhi.n	8000dbe <connectSimcomA76xx+0x12>
			}
		}
	}
	if(isConnectSimcomA76xx==0){
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <connectSimcomA76xx+0x104>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <connectSimcomA76xx+0xd4>
		NVIC_SystemReset();
 8000e7c:	f7ff fb26 	bl	80004cc <__NVIC_SystemReset>
	}

	return isConnectSimcomA76xx;
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <connectSimcomA76xx+0x104>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	20000618 	.word	0x20000618
 8000e90:	0800593c 	.word	0x0800593c
 8000e94:	200005ac 	.word	0x200005ac
 8000e98:	2000059c 	.word	0x2000059c
 8000e9c:	20000050 	.word	0x20000050
 8000ea0:	08005944 	.word	0x08005944
 8000ea4:	20000598 	.word	0x20000598
 8000ea8:	20000058 	.word	0x20000058
 8000eac:	08005948 	.word	0x08005948
 8000eb0:	2000061c 	.word	0x2000061c
 8000eb4:	200001c8 	.word	0x200001c8

08000eb8 <connectMQTT>:

int connectMQTT(void){
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af02      	add	r7, sp, #8
	sendingToSimcomA76xx(AT_START_MQTT);
 8000ebe:	4b50      	ldr	r3, [pc, #320]	; (8001000 <connectMQTT+0x148>)
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fbf5 	bl	80006b0 <sendingToSimcomA76xx>
	HAL_Delay(200);
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f000 fcda 	bl	8001880 <HAL_Delay>
	sprintf(AT_COMMAND,AT_ACQUIRE_CLIENT,MQTT_CLIENT_ID);
 8000ecc:	4a4d      	ldr	r2, [pc, #308]	; (8001004 <connectMQTT+0x14c>)
 8000ece:	494e      	ldr	r1, [pc, #312]	; (8001008 <connectMQTT+0x150>)
 8000ed0:	4b4e      	ldr	r3, [pc, #312]	; (800100c <connectMQTT+0x154>)
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f004 f862 	bl	8004f9c <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 8000ed8:	4b4c      	ldr	r3, [pc, #304]	; (800100c <connectMQTT+0x154>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f7ff fbe8 	bl	80006b0 <sendingToSimcomA76xx>
	HAL_Delay(200);
 8000ee0:	20c8      	movs	r0, #200	; 0xc8
 8000ee2:	f000 fccd 	bl	8001880 <HAL_Delay>
	sprintf(AT_COMMAND,AT_CONNECT_MQTT,MQTT_HOST,MQTT_PORT,MQTT_USER,MQTT_PASS);
 8000ee6:	4c4a      	ldr	r4, [pc, #296]	; (8001010 <connectMQTT+0x158>)
 8000ee8:	4a4a      	ldr	r2, [pc, #296]	; (8001014 <connectMQTT+0x15c>)
 8000eea:	494b      	ldr	r1, [pc, #300]	; (8001018 <connectMQTT+0x160>)
 8000eec:	4847      	ldr	r0, [pc, #284]	; (800100c <connectMQTT+0x154>)
 8000eee:	4b4b      	ldr	r3, [pc, #300]	; (800101c <connectMQTT+0x164>)
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <connectMQTT+0x168>)
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	0023      	movs	r3, r4
 8000ef8:	f004 f850 	bl	8004f9c <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 8000efc:	4b43      	ldr	r3, [pc, #268]	; (800100c <connectMQTT+0x154>)
 8000efe:	0018      	movs	r0, r3
 8000f00:	f7ff fbd6 	bl	80006b0 <sendingToSimcomA76xx>
	HAL_Delay(200);
 8000f04:	20c8      	movs	r0, #200	; 0xc8
 8000f06:	f000 fcbb 	bl	8001880 <HAL_Delay>
	for(int i=1;i<NUMBER_LOADS+1;i++){
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	e064      	b.n	8000fda <connectMQTT+0x122>
		isConnectMQTT = 0;
 8000f10:	4b44      	ldr	r3, [pc, #272]	; (8001024 <connectMQTT+0x16c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
		previousTick =  HAL_GetTick();
 8000f16:	f000 fca9 	bl	800186c <HAL_GetTick>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	4b42      	ldr	r3, [pc, #264]	; (8001028 <connectMQTT+0x170>)
 8000f20:	601a      	str	r2, [r3, #0]
		if(i>9){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	dd0d      	ble.n	8000f44 <connectMQTT+0x8c>
			sprintf(AT_COMMAND,AT_SET_SUBCRIBE_10_18_TOPIC,strlen(FARM)+17);
 8000f28:	4940      	ldr	r1, [pc, #256]	; (800102c <connectMQTT+0x174>)
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <connectMQTT+0x154>)
 8000f2c:	221f      	movs	r2, #31
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f004 f834 	bl	8004f9c <siprintf>
			sendingToSimcomA76xx(AT_COMMAND);
 8000f34:	4b35      	ldr	r3, [pc, #212]	; (800100c <connectMQTT+0x154>)
 8000f36:	0018      	movs	r0, r3
 8000f38:	f7ff fbba 	bl	80006b0 <sendingToSimcomA76xx>
			HAL_Delay(200);
 8000f3c:	20c8      	movs	r0, #200	; 0xc8
 8000f3e:	f000 fc9f 	bl	8001880 <HAL_Delay>
 8000f42:	e009      	b.n	8000f58 <connectMQTT+0xa0>
		}
		else{
			sprintf(AT_COMMAND,AT_SET_SUBCRIBE_0_9_TOPIC,strlen(FARM)+16);//
 8000f44:	493a      	ldr	r1, [pc, #232]	; (8001030 <connectMQTT+0x178>)
 8000f46:	4b31      	ldr	r3, [pc, #196]	; (800100c <connectMQTT+0x154>)
 8000f48:	221e      	movs	r2, #30
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f004 f826 	bl	8004f9c <siprintf>
			sendingToSimcomA76xx(AT_COMMAND);
 8000f50:	4b2e      	ldr	r3, [pc, #184]	; (800100c <connectMQTT+0x154>)
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff fbac 	bl	80006b0 <sendingToSimcomA76xx>
		}
		HAL_Delay(200);
 8000f58:	20c8      	movs	r0, #200	; 0xc8
 8000f5a:	f000 fc91 	bl	8001880 <HAL_Delay>
		sprintf(AT_COMMAND,AT_SUBCRIBE_TOPIC,MQTT_TOPIC_ACTUATOR_CONTROL,i);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a34      	ldr	r2, [pc, #208]	; (8001034 <connectMQTT+0x17c>)
 8000f62:	4935      	ldr	r1, [pc, #212]	; (8001038 <connectMQTT+0x180>)
 8000f64:	4829      	ldr	r0, [pc, #164]	; (800100c <connectMQTT+0x154>)
 8000f66:	f004 f819 	bl	8004f9c <siprintf>
		sendingToSimcomA76xx(AT_COMMAND);
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <connectMQTT+0x154>)
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff fb9f 	bl	80006b0 <sendingToSimcomA76xx>
		HAL_Delay(200);
 8000f72:	20c8      	movs	r0, #200	; 0xc8
 8000f74:	f000 fc84 	bl	8001880 <HAL_Delay>
		memset(simcomRxBuffer,'0',100);
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <connectMQTT+0x184>)
 8000f7a:	2264      	movs	r2, #100	; 0x64
 8000f7c:	2130      	movs	r1, #48	; 0x30
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f004 f82c 	bl	8004fdc <memset>
		sendingToSimcomA76xx(AT_SUBCRIBE);
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <connectMQTT+0x188>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff fb92 	bl	80006b0 <sendingToSimcomA76xx>
		HAL_Delay(200);
 8000f8c:	20c8      	movs	r0, #200	; 0xc8
 8000f8e:	f000 fc77 	bl	8001880 <HAL_Delay>
		while(isConnectMQTT == 0 && previousTick  + timeOutConnectMQTT >  HAL_GetTick()){
 8000f92:	e00a      	b.n	8000faa <connectMQTT+0xf2>

			if(strstr((char *)simcomRxBuffer,"CMQTTSUB: 0,0")){
 8000f94:	4a2b      	ldr	r2, [pc, #172]	; (8001044 <connectMQTT+0x18c>)
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <connectMQTT+0x184>)
 8000f98:	0011      	movs	r1, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f004 f826 	bl	8004fec <strstr>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d002      	beq.n	8000faa <connectMQTT+0xf2>
					isConnectMQTT=1;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <connectMQTT+0x16c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
		while(isConnectMQTT == 0 && previousTick  + timeOutConnectMQTT >  HAL_GetTick()){
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <connectMQTT+0x16c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10a      	bne.n	8000fc8 <connectMQTT+0x110>
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <connectMQTT+0x170>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <connectMQTT+0x190>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	18d3      	adds	r3, r2, r3
 8000fbc:	001c      	movs	r4, r3
 8000fbe:	f000 fc55 	bl	800186c <HAL_GetTick>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	429c      	cmp	r4, r3
 8000fc6:	d8e5      	bhi.n	8000f94 <connectMQTT+0xdc>
			}
		}
		if(isConnectMQTT==0){
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <connectMQTT+0x16c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <connectMQTT+0x11c>
			NVIC_SystemReset();;
 8000fd0:	f7ff fa7c 	bl	80004cc <__NVIC_SystemReset>
	for(int i=1;i<NUMBER_LOADS+1;i++){
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	dd97      	ble.n	8000f10 <connectMQTT+0x58>
		}
	}
	if(isConnectMQTT==1){
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <connectMQTT+0x16c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d104      	bne.n	8000ff2 <connectMQTT+0x13a>
		ledStatus('G');
 8000fe8:	2047      	movs	r0, #71	; 0x47
 8000fea:	f000 f82f 	bl	800104c <ledStatus>
		MX_IWDG_Init();
 8000fee:	f7ff fc8f 	bl	8000910 <MX_IWDG_Init>
	}
	return isConnectMQTT;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <connectMQTT+0x16c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b003      	add	sp, #12
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	20000064 	.word	0x20000064
 8001004:	08005954 	.word	0x08005954
 8001008:	20000074 	.word	0x20000074
 800100c:	20000534 	.word	0x20000534
 8001010:	0000075b 	.word	0x0000075b
 8001014:	08005960 	.word	0x08005960
 8001018:	2000008c 	.word	0x2000008c
 800101c:	0800597c 	.word	0x0800597c
 8001020:	08005984 	.word	0x08005984
 8001024:	20000620 	.word	0x20000620
 8001028:	20000618 	.word	0x20000618
 800102c:	2000011c 	.word	0x2000011c
 8001030:	20000100 	.word	0x20000100
 8001034:	08005990 	.word	0x08005990
 8001038:	20000138 	.word	0x20000138
 800103c:	200005ac 	.word	0x200005ac
 8001040:	20000140 	.word	0x20000140
 8001044:	080059b0 	.word	0x080059b0
 8001048:	200001cc 	.word	0x200001cc

0800104c <ledStatus>:

void ledStatus(char cmd){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	0002      	movs	r2, r0
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	701a      	strb	r2, [r3, #0]
	if(cmd == 'G'){
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b47      	cmp	r3, #71	; 0x47
 800105e:	d113      	bne.n	8001088 <ledStatus+0x3c>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	482e      	ldr	r0, [pc, #184]	; (8001120 <ledStatus+0xd4>)
 8001066:	2201      	movs	r2, #1
 8001068:	0019      	movs	r1, r3
 800106a:	f000 ff2e 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 800106e:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <ledStatus+0xd4>)
 8001070:	2201      	movs	r2, #1
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0018      	movs	r0, r3
 8001076:	f000 ff28 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <ledStatus+0xd4>)
 800107c:	2200      	movs	r2, #0
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	0018      	movs	r0, r3
 8001082:	f000 ff22 	bl	8001eca <HAL_GPIO_WritePin>
	else if(cmd == 'W'){
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
	}
}
 8001086:	e046      	b.n	8001116 <ledStatus+0xca>
	else if(cmd == 'R'){
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b52      	cmp	r3, #82	; 0x52
 800108e:	d113      	bne.n	80010b8 <ledStatus+0x6c>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4822      	ldr	r0, [pc, #136]	; (8001120 <ledStatus+0xd4>)
 8001096:	2201      	movs	r2, #1
 8001098:	0019      	movs	r1, r3
 800109a:	f000 ff16 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <ledStatus+0xd4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 ff10 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <ledStatus+0xd4>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 ff0a 	bl	8001eca <HAL_GPIO_WritePin>
}
 80010b6:	e02e      	b.n	8001116 <ledStatus+0xca>
	else if(cmd == 'B'){
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b42      	cmp	r3, #66	; 0x42
 80010be:	d113      	bne.n	80010e8 <ledStatus+0x9c>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4816      	ldr	r0, [pc, #88]	; (8001120 <ledStatus+0xd4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	0019      	movs	r1, r3
 80010ca:	f000 fefe 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <ledStatus+0xd4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fef8 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <ledStatus+0xd4>)
 80010dc:	2201      	movs	r2, #1
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 fef2 	bl	8001eca <HAL_GPIO_WritePin>
}
 80010e6:	e016      	b.n	8001116 <ledStatus+0xca>
	else if(cmd == 'W'){
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b57      	cmp	r3, #87	; 0x57
 80010ee:	d112      	bne.n	8001116 <ledStatus+0xca>
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	480a      	ldr	r0, [pc, #40]	; (8001120 <ledStatus+0xd4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	0019      	movs	r1, r3
 80010fa:	f000 fee6 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <ledStatus+0xd4>)
 8001100:	2200      	movs	r2, #0
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	0018      	movs	r0, r3
 8001106:	f000 fee0 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <ledStatus+0xd4>)
 800110c:	2200      	movs	r2, #0
 800110e:	2140      	movs	r1, #64	; 0x40
 8001110:	0018      	movs	r0, r3
 8001112:	f000 feda 	bl	8001eca <HAL_GPIO_WritePin>
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	50000800 	.word	0x50000800

08001124 <sendStatusPayloadToMQTT>:
//	sendingToSimcomA76xx(AT_COMMAND);
//	sprintf(AT_COMMAND,AT_INFORM_PAYLOAD,payLoadPin,payLoadStatus);
//	sendingToSimcomA76xx(AT_COMMAND); // Set the payload
//	sendingToSimcomA76xx(AT_PUBLISH);
}// Publish
int sendStatusPayloadToMQTT(){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	//lengthOfStatusPayloadArray = (7*NUMBER_LOADS) +(NUMBER_LOADS-1)+2;
	//STATUS_PAYLOAD_ARRAY[lengthOfStatusPayloadArray];
	if(NUMBER_LOADS<10){
		memcpy(STATUS_PAYLOAD_ARRAY_0_9,STATUS_PAYLOAD_ARRAY_TOTAL,LENGTH_STATUS_PAYLOAD_0_9-1);
 800112a:	4942      	ldr	r1, [pc, #264]	; (8001234 <sendStatusPayloadToMQTT+0x110>)
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <sendStatusPayloadToMQTT+0x114>)
 800112e:	221e      	movs	r2, #30
 8001130:	0018      	movs	r0, r3
 8001132:	f003 ff9d 	bl	8005070 <memcpy>
		STATUS_PAYLOAD_ARRAY_0_9[LENGTH_STATUS_PAYLOAD_0_9-1] = '}';
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <sendStatusPayloadToMQTT+0x114>)
 8001138:	227d      	movs	r2, #125	; 0x7d
 800113a:	779a      	strb	r2, [r3, #30]
		for(int i=1;i<NUMBER_LOADS+1;i++){
 800113c:	2301      	movs	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	e022      	b.n	8001188 <sendStatusPayloadToMQTT+0x64>
				statusOfLoad = HAL_GPIO_ReadPin(GPIO_LOAD_PORT[i-1], GPIO_LOAD_PIN[i-1]);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <sendStatusPayloadToMQTT+0x118>)
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	58d0      	ldr	r0, [r2, r3]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	1e5a      	subs	r2, r3, #1
 8001150:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <sendStatusPayloadToMQTT+0x11c>)
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	58d3      	ldr	r3, [r2, r3]
 8001156:	b29b      	uxth	r3, r3
 8001158:	0019      	movs	r1, r3
 800115a:	f000 fe99 	bl	8001e90 <HAL_GPIO_ReadPin>
 800115e:	0003      	movs	r3, r0
 8001160:	001a      	movs	r2, r3
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <sendStatusPayloadToMQTT+0x120>)
 8001164:	601a      	str	r2, [r3, #0]
				STATUS_PAYLOAD_ARRAY_0_9[i*6-1] = statusOfLoad+48;
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <sendStatusPayloadToMQTT+0x120>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b2d9      	uxtb	r1, r3
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	0013      	movs	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	189b      	adds	r3, r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	3b01      	subs	r3, #1
 8001178:	000a      	movs	r2, r1
 800117a:	3230      	adds	r2, #48	; 0x30
 800117c:	b2d1      	uxtb	r1, r2
 800117e:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <sendStatusPayloadToMQTT+0x114>)
 8001180:	54d1      	strb	r1, [r2, r3]
		for(int i=1;i<NUMBER_LOADS+1;i++){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b05      	cmp	r3, #5
 800118c:	ddd9      	ble.n	8001142 <sendStatusPayloadToMQTT+0x1e>
		}
		sprintf(AT_COMMAND,AT_SET_PUBLISH_TOPIC,strlen(MQTT_TOPIC_ACTUATOR_STATUS)); // Set the topic for publish message
 800118e:	492e      	ldr	r1, [pc, #184]	; (8001248 <sendStatusPayloadToMQTT+0x124>)
 8001190:	4b2e      	ldr	r3, [pc, #184]	; (800124c <sendStatusPayloadToMQTT+0x128>)
 8001192:	221e      	movs	r2, #30
 8001194:	0018      	movs	r0, r3
 8001196:	f003 ff01 	bl	8004f9c <siprintf>
		sendingToSimcomA76xx(AT_COMMAND);
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <sendStatusPayloadToMQTT+0x128>)
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff fa87 	bl	80006b0 <sendingToSimcomA76xx>
		HAL_Delay(200);
 80011a2:	20c8      	movs	r0, #200	; 0xc8
 80011a4:	f000 fb6c 	bl	8001880 <HAL_Delay>
		sprintf(AT_COMMAND,"%s\r\n",MQTT_TOPIC_ACTUATOR_STATUS);
 80011a8:	4a29      	ldr	r2, [pc, #164]	; (8001250 <sendStatusPayloadToMQTT+0x12c>)
 80011aa:	492a      	ldr	r1, [pc, #168]	; (8001254 <sendStatusPayloadToMQTT+0x130>)
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <sendStatusPayloadToMQTT+0x128>)
 80011ae:	0018      	movs	r0, r3
 80011b0:	f003 fef4 	bl	8004f9c <siprintf>
		sendingToSimcomA76xx(AT_COMMAND);
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <sendStatusPayloadToMQTT+0x128>)
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff fa7a 	bl	80006b0 <sendingToSimcomA76xx>
		HAL_Delay(200);
 80011bc:	20c8      	movs	r0, #200	; 0xc8
 80011be:	f000 fb5f 	bl	8001880 <HAL_Delay>

		//sprintf(AT_COMMAND,STATUS_PAYLOAD_ARRAY_0_9,payLoadPin,payLoadStatus);
		int lengthOfInformPayload = strlen(STATUS_PAYLOAD_ARRAY_0_9);
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <sendStatusPayloadToMQTT+0x114>)
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7fe ff9f 	bl	8000108 <strlen>
 80011ca:	0003      	movs	r3, r0
 80011cc:	603b      	str	r3, [r7, #0]

		sprintf(AT_COMMAND,AT_SET_PUBLISH_PAYLOAD,lengthOfInformPayload);
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4921      	ldr	r1, [pc, #132]	; (8001258 <sendStatusPayloadToMQTT+0x134>)
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <sendStatusPayloadToMQTT+0x128>)
 80011d4:	0018      	movs	r0, r3
 80011d6:	f003 fee1 	bl	8004f9c <siprintf>
		sendingToSimcomA76xx(AT_COMMAND);
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <sendStatusPayloadToMQTT+0x128>)
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fa67 	bl	80006b0 <sendingToSimcomA76xx>
		HAL_Delay(200);
 80011e2:	20c8      	movs	r0, #200	; 0xc8
 80011e4:	f000 fb4c 	bl	8001880 <HAL_Delay>
		//sprintf(AT_COMMAND,AT_INFORM_PAYLOAD,payLoadPin,payLoadStatus);
		sendingToSimcomA76xx(STATUS_PAYLOAD_ARRAY_0_9);
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <sendStatusPayloadToMQTT+0x114>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff fa60 	bl	80006b0 <sendingToSimcomA76xx>
		HAL_Delay(200);// Set the payload
 80011f0:	20c8      	movs	r0, #200	; 0xc8
 80011f2:	f000 fb45 	bl	8001880 <HAL_Delay>
		sendingToSimcomA76xx(AT_PUBLISH);
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <sendStatusPayloadToMQTT+0x138>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff fa59 	bl	80006b0 <sendingToSimcomA76xx>
		HAL_Delay(200);
 80011fe:	20c8      	movs	r0, #200	; 0xc8
 8001200:	f000 fb3e 	bl	8001880 <HAL_Delay>
		sendingToSimcomA76xx(AT_PUBLISH);
		HAL_Delay(200);

	}

	if(ledStatusSendTopic == 1){
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <sendStatusPayloadToMQTT+0x13c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d10d      	bne.n	8001228 <sendStatusPayloadToMQTT+0x104>
		ledStatus('W');
 800120c:	2057      	movs	r0, #87	; 0x57
 800120e:	f7ff ff1d 	bl	800104c <ledStatus>
		HAL_Delay(500);
 8001212:	23fa      	movs	r3, #250	; 0xfa
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	0018      	movs	r0, r3
 8001218:	f000 fb32 	bl	8001880 <HAL_Delay>
		ledStatus('G');
 800121c:	2047      	movs	r0, #71	; 0x47
 800121e:	f7ff ff15 	bl	800104c <ledStatus>
		ledStatusSendTopic= 0;
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <sendStatusPayloadToMQTT+0x13c>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
	}
	//sendPayloadStatusToServer = 0;
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	20000150 	.word	0x20000150
 8001238:	20000628 	.word	0x20000628
 800123c:	20000000 	.word	0x20000000
 8001240:	20000028 	.word	0x20000028
 8001244:	20000648 	.word	0x20000648
 8001248:	200000b8 	.word	0x200000b8
 800124c:	20000534 	.word	0x20000534
 8001250:	080059c0 	.word	0x080059c0
 8001254:	080059e0 	.word	0x080059e0
 8001258:	200000d0 	.word	0x200000d0
 800125c:	200000e8 	.word	0x200000e8
 8001260:	2000064c 	.word	0x2000064c

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_MspInit+0x24>)
 8001276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_MspInit+0x24>)
 800127a:	2101      	movs	r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_MspInit+0x24>)
 8001282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_MspInit+0x24>)
 8001286:	2180      	movs	r1, #128	; 0x80
 8001288:	0549      	lsls	r1, r1, #21
 800128a:	430a      	orrs	r2, r1
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	240c      	movs	r4, #12
 80012a2:	193b      	adds	r3, r7, r4
 80012a4:	0018      	movs	r0, r3
 80012a6:	2314      	movs	r3, #20
 80012a8:	001a      	movs	r2, r3
 80012aa:	2100      	movs	r1, #0
 80012ac:	f003 fe96 	bl	8004fdc <memset>
  if(hi2c->Instance==I2C2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <HAL_I2C_MspInit+0x80>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d129      	bne.n	800130e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_I2C_MspInit+0x84>)
 80012bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_I2C_MspInit+0x84>)
 80012c0:	2102      	movs	r1, #2
 80012c2:	430a      	orrs	r2, r1
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_I2C_MspInit+0x84>)
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_DS3231_Pin|I2C2_SDA_DS3231_Pin;
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	22c0      	movs	r2, #192	; 0xc0
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012da:	0021      	movs	r1, r4
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2212      	movs	r2, #18
 80012e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2203      	movs	r2, #3
 80012ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2206      	movs	r2, #6
 80012f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012f8:	0019      	movs	r1, r3
 80012fa:	0010      	movs	r0, r2
 80012fc:	f000 fc4a 	bl	8001b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_I2C_MspInit+0x84>)
 8001302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_I2C_MspInit+0x84>)
 8001306:	2180      	movs	r1, #128	; 0x80
 8001308:	03c9      	lsls	r1, r1, #15
 800130a:	430a      	orrs	r2, r1
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b009      	add	sp, #36	; 0x24
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	40005800 	.word	0x40005800
 800131c:	40021000 	.word	0x40021000
 8001320:	50000400 	.word	0x50000400

08001324 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b08b      	sub	sp, #44	; 0x2c
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	2414      	movs	r4, #20
 800132e:	193b      	adds	r3, r7, r4
 8001330:	0018      	movs	r0, r3
 8001332:	2314      	movs	r3, #20
 8001334:	001a      	movs	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	f003 fe50 	bl	8004fdc <memset>
  if(hspi->Instance==SPI1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a34      	ldr	r2, [pc, #208]	; (8001414 <HAL_SPI_MspInit+0xf0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d132      	bne.n	80013ac <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 8001348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	0149      	lsls	r1, r1, #5
 8001350:	430a      	orrs	r2, r1
 8001352:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 8001356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 800135a:	2101      	movs	r1, #1
 800135c:	430a      	orrs	r2, r1
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_SDCARD_Pin|SPI1_MISO_SDCARD_Pin|SPI1_MOSI_SDCARD_Pin;
 800136c:	0021      	movs	r1, r4
 800136e:	187b      	adds	r3, r7, r1
 8001370:	22e0      	movs	r2, #224	; 0xe0
 8001372:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2202      	movs	r2, #2
 8001378:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2203      	movs	r2, #3
 8001384:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	187a      	adds	r2, r7, r1
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f000 fbfd 	bl	8001b94 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2019      	movs	r0, #25
 80013a0:	f000 fb3e 	bl	8001a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013a4:	2019      	movs	r0, #25
 80013a6:	f000 fb50 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013aa:	e02e      	b.n	800140a <HAL_SPI_MspInit+0xe6>
  else if(hspi->Instance==SPI2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1a      	ldr	r2, [pc, #104]	; (800141c <HAL_SPI_MspInit+0xf8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d129      	bne.n	800140a <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 80013b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	01c9      	lsls	r1, r1, #7
 80013c0:	430a      	orrs	r2, r1
 80013c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 80013c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 80013ca:	2102      	movs	r1, #2
 80013cc:	430a      	orrs	r2, r1
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_SPI_MspInit+0xf4>)
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2202      	movs	r2, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80013dc:	2114      	movs	r1, #20
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	22a0      	movs	r2, #160	; 0xa0
 80013e2:	0212      	lsls	r2, r2, #8
 80013e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2202      	movs	r2, #2
 80013ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2203      	movs	r2, #3
 80013f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_SPI_MspInit+0xfc>)
 8001402:	0019      	movs	r1, r3
 8001404:	0010      	movs	r0, r2
 8001406:	f000 fbc5 	bl	8001b94 <HAL_GPIO_Init>
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b00b      	add	sp, #44	; 0x2c
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	40013000 	.word	0x40013000
 8001418:	40021000 	.word	0x40021000
 800141c:	40003800 	.word	0x40003800
 8001420:	50000400 	.word	0x50000400

08001424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_TIM_Base_MspInit+0x38>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10d      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 8001438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 800143c:	2110      	movs	r1, #16
 800143e:	430a      	orrs	r2, r1
 8001440:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2103      	movs	r1, #3
 8001446:	2011      	movs	r0, #17
 8001448:	f000 faea 	bl	8001a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800144c:	2011      	movs	r0, #17
 800144e:	f000 fafc 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40001000 	.word	0x40001000
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b08b      	sub	sp, #44	; 0x2c
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	2414      	movs	r4, #20
 800146e:	193b      	adds	r3, r7, r4
 8001470:	0018      	movs	r0, r3
 8001472:	2314      	movs	r3, #20
 8001474:	001a      	movs	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	f003 fdb0 	bl	8004fdc <memset>
  if(huart->Instance==USART1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a54      	ldr	r2, [pc, #336]	; (80015d4 <HAL_UART_MspInit+0x170>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d133      	bne.n	80014ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001486:	4b54      	ldr	r3, [pc, #336]	; (80015d8 <HAL_UART_MspInit+0x174>)
 8001488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148a:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_UART_MspInit+0x174>)
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	01c9      	lsls	r1, r1, #7
 8001490:	430a      	orrs	r2, r1
 8001492:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_UART_MspInit+0x174>)
 8001496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001498:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <HAL_UART_MspInit+0x174>)
 800149a:	2101      	movs	r1, #1
 800149c:	430a      	orrs	r2, r1
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
 80014a0:	4b4d      	ldr	r3, [pc, #308]	; (80015d8 <HAL_UART_MspInit+0x174>)
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2201      	movs	r2, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_A76XX_Pin|USART1_RX_A76XX_Pin;
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	22c0      	movs	r2, #192	; 0xc0
 80014b0:	00d2      	lsls	r2, r2, #3
 80014b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	0021      	movs	r1, r4
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2202      	movs	r2, #2
 80014ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	2203      	movs	r2, #3
 80014c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2204      	movs	r2, #4
 80014cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	187a      	adds	r2, r7, r1
 80014d0:	23a0      	movs	r3, #160	; 0xa0
 80014d2:	05db      	lsls	r3, r3, #23
 80014d4:	0011      	movs	r1, r2
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 fb5c 	bl	8001b94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2101      	movs	r1, #1
 80014e0:	201b      	movs	r0, #27
 80014e2:	f000 fa9d 	bl	8001a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014e6:	201b      	movs	r0, #27
 80014e8:	f000 faaf 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80014ec:	e06e      	b.n	80015cc <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3a      	ldr	r2, [pc, #232]	; (80015dc <HAL_UART_MspInit+0x178>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d132      	bne.n	800155e <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <HAL_UART_MspInit+0x174>)
 80014fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014fc:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <HAL_UART_MspInit+0x174>)
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	0289      	lsls	r1, r1, #10
 8001502:	430a      	orrs	r2, r1
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <HAL_UART_MspInit+0x174>)
 8001508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_UART_MspInit+0x174>)
 800150c:	2101      	movs	r1, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <HAL_UART_MspInit+0x174>)
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	2201      	movs	r2, #1
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_GNSS_Pin|USART2_RX_GNSS_Pin;
 800151e:	2114      	movs	r1, #20
 8001520:	187b      	adds	r3, r7, r1
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2202      	movs	r2, #2
 800152a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2203      	movs	r2, #3
 8001536:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2204      	movs	r2, #4
 800153c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	187a      	adds	r2, r7, r1
 8001540:	23a0      	movs	r3, #160	; 0xa0
 8001542:	05db      	lsls	r3, r3, #23
 8001544:	0011      	movs	r1, r2
 8001546:	0018      	movs	r0, r3
 8001548:	f000 fb24 	bl	8001b94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	201c      	movs	r0, #28
 8001552:	f000 fa65 	bl	8001a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001556:	201c      	movs	r0, #28
 8001558:	f000 fa77 	bl	8001a4a <HAL_NVIC_EnableIRQ>
}
 800155c:	e036      	b.n	80015cc <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART4)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_UART_MspInit+0x17c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d131      	bne.n	80015cc <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_UART_MspInit+0x174>)
 800156a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_UART_MspInit+0x174>)
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	0309      	lsls	r1, r1, #12
 8001572:	430a      	orrs	r2, r1
 8001574:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_UART_MspInit+0x174>)
 8001578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_UART_MspInit+0x174>)
 800157c:	2101      	movs	r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_UART_MspInit+0x174>)
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART4_TX_ESP32_Pin|USART4_RX_ESP32_Pin;
 800158e:	2114      	movs	r1, #20
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2203      	movs	r2, #3
 8001594:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2202      	movs	r2, #2
 800159a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2203      	movs	r2, #3
 80015a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	2206      	movs	r2, #6
 80015ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	187a      	adds	r2, r7, r1
 80015b0:	23a0      	movs	r3, #160	; 0xa0
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	0011      	movs	r1, r2
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 faec 	bl	8001b94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 2, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2102      	movs	r1, #2
 80015c0:	200e      	movs	r0, #14
 80015c2:	f000 fa2d 	bl	8001a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80015c6:	200e      	movs	r0, #14
 80015c8:	f000 fa3f 	bl	8001a4a <HAL_NVIC_EnableIRQ>
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b00b      	add	sp, #44	; 0x2c
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40004400 	.word	0x40004400
 80015e0:	40004c00 	.word	0x40004c00

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001608:	f000 f91e 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  countSystick++;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <SysTick_Handler+0x50>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <SysTick_Handler+0x50>)
 8001614:	601a      	str	r2, [r3, #0]
  if(countSystick>TIME_SYSTICK){
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <SysTick_Handler+0x50>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2bc8      	cmp	r3, #200	; 0xc8
 800161c:	dd06      	ble.n	800162c <SysTick_Handler+0x28>
  	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, SET);
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <SysTick_Handler+0x54>)
 8001624:	2201      	movs	r2, #1
 8001626:	0019      	movs	r1, r3
 8001628:	f000 fc4f 	bl	8001eca <HAL_GPIO_WritePin>
  }
  if(countSystick>TIME_SYSTICK*2){
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <SysTick_Handler+0x50>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	23c8      	movs	r3, #200	; 0xc8
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	429a      	cmp	r2, r3
 8001636:	dd09      	ble.n	800164c <SysTick_Handler+0x48>
  	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, RESET);
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4806      	ldr	r0, [pc, #24]	; (8001658 <SysTick_Handler+0x54>)
 800163e:	2200      	movs	r2, #0
 8001640:	0019      	movs	r1, r3
 8001642:	f000 fc42 	bl	8001eca <HAL_GPIO_WritePin>
  	countSystick=0;
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <SysTick_Handler+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	20000650 	.word	0x20000650
 8001658:	50000800 	.word	0x50000800

0800165c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <USART4_5_IRQHandler+0x14>)
 8001662:	0018      	movs	r0, r3
 8001664:	f002 f9fc 	bl	8003a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	200004ac 	.word	0x200004ac

08001674 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <TIM6_IRQHandler+0x14>)
 800167a:	0018      	movs	r0, r3
 800167c:	f001 feda 	bl	8003434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	2000035c 	.word	0x2000035c

0800168c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <SPI1_IRQHandler+0x14>)
 8001692:	0018      	movs	r0, r3
 8001694:	f001 fd34 	bl	8003100 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	200002ac 	.word	0x200002ac

080016a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <USART1_IRQHandler+0x14>)
 80016aa:	0018      	movs	r0, r3
 80016ac:	f002 f9d8 	bl	8003a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
 // HAL_UART_Receive_IT(&huart1, &r, 1);
  /* USER CODE END USART1_IRQn 1 */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	2000039c 	.word	0x2000039c

080016bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <USART2_IRQHandler+0x14>)
 80016c2:	0018      	movs	r0, r3
 80016c4:	f002 f9cc 	bl	8003a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	20000424 	.word	0x20000424

080016d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <_sbrk+0x5c>)
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <_sbrk+0x60>)
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <_sbrk+0x64>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <_sbrk+0x68>)
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	18d3      	adds	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	429a      	cmp	r2, r3
 8001702:	d207      	bcs.n	8001714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001704:	f003 fc88 	bl	8005018 <__errno>
 8001708:	0003      	movs	r3, r0
 800170a:	220c      	movs	r2, #12
 800170c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170e:	2301      	movs	r3, #1
 8001710:	425b      	negs	r3, r3
 8001712:	e009      	b.n	8001728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	18d2      	adds	r2, r2, r3
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <_sbrk+0x64>)
 8001724:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b006      	add	sp, #24
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20005000 	.word	0x20005000
 8001734:	00000400 	.word	0x00000400
 8001738:	20000654 	.word	0x20000654
 800173c:	200007a8 	.word	0x200007a8

08001740 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800174e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001750:	f7ff fff6 	bl	8001740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <LoopForever+0x6>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <LoopForever+0xe>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	; (8001798 <LoopForever+0x16>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177a:	f003 fc53 	bl	8005024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7fe ffad 	bl	80006dc <main>

08001782 <LoopForever>:

LoopForever:
    b LoopForever
 8001782:	e7fe      	b.n	8001782 <LoopForever>
   ldr   r0, =_estack
 8001784:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8001790:	08005a98 	.word	0x08005a98
  ldr r2, =_sbss
 8001794:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8001798:	200007a4 	.word	0x200007a4

0800179c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC1_COMP_IRQHandler>
	...

080017a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x3c>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_Init+0x3c>)
 80017b2:	2140      	movs	r1, #64	; 0x40
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 f811 	bl	80017e0 <HAL_InitTick>
 80017be:	1e03      	subs	r3, r0, #0
 80017c0:	d003      	beq.n	80017ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e001      	b.n	80017ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ca:	f7ff fd51 	bl	8001270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	781b      	ldrb	r3, [r3, #0]
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	40022000 	.word	0x40022000

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_InitTick+0x5c>)
 80017ea:	681c      	ldr	r4, [r3, #0]
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_InitTick+0x60>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	0019      	movs	r1, r3
 80017f2:	23fa      	movs	r3, #250	; 0xfa
 80017f4:	0098      	lsls	r0, r3, #2
 80017f6:	f7fe fc99 	bl	800012c <__udivsi3>
 80017fa:	0003      	movs	r3, r0
 80017fc:	0019      	movs	r1, r3
 80017fe:	0020      	movs	r0, r4
 8001800:	f7fe fc94 	bl	800012c <__udivsi3>
 8001804:	0003      	movs	r3, r0
 8001806:	0018      	movs	r0, r3
 8001808:	f000 f92f 	bl	8001a6a <HAL_SYSTICK_Config>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d001      	beq.n	8001814 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e00f      	b.n	8001834 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d80b      	bhi.n	8001832 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	2301      	movs	r3, #1
 800181e:	425b      	negs	r3, r3
 8001820:	2200      	movs	r2, #0
 8001822:	0018      	movs	r0, r3
 8001824:	f000 f8fc 	bl	8001a20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_InitTick+0x64>)
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b003      	add	sp, #12
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	200001d0 	.word	0x200001d0
 8001840:	200001d8 	.word	0x200001d8
 8001844:	200001d4 	.word	0x200001d4

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x1c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	001a      	movs	r2, r3
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x20>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	18d2      	adds	r2, r2, r3
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_IncTick+0x20>)
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	200001d8 	.word	0x200001d8
 8001868:	20000658 	.word	0x20000658

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_GetTick+0x10>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	20000658 	.word	0x20000658

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff fff0 	bl	800186c <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	001a      	movs	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	189b      	adds	r3, r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	f7ff ffe0 	bl	800186c <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	200001d8 	.word	0x200001d8

080018c8 <__NVIC_EnableIRQ>:
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	0002      	movs	r2, r0
 80018d0:	1dfb      	adds	r3, r7, #7
 80018d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b7f      	cmp	r3, #127	; 0x7f
 80018da:	d809      	bhi.n	80018f0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	001a      	movs	r2, r3
 80018e2:	231f      	movs	r3, #31
 80018e4:	401a      	ands	r2, r3
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <__NVIC_EnableIRQ+0x30>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	4091      	lsls	r1, r2
 80018ec:	000a      	movs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	0002      	movs	r2, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	d828      	bhi.n	8001964 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001912:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <__NVIC_SetPriority+0xd4>)
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b25b      	sxtb	r3, r3
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	33c0      	adds	r3, #192	; 0xc0
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	589b      	ldr	r3, [r3, r2]
 8001922:	1dfa      	adds	r2, r7, #7
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	0011      	movs	r1, r2
 8001928:	2203      	movs	r2, #3
 800192a:	400a      	ands	r2, r1
 800192c:	00d2      	lsls	r2, r2, #3
 800192e:	21ff      	movs	r1, #255	; 0xff
 8001930:	4091      	lsls	r1, r2
 8001932:	000a      	movs	r2, r1
 8001934:	43d2      	mvns	r2, r2
 8001936:	401a      	ands	r2, r3
 8001938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	019b      	lsls	r3, r3, #6
 800193e:	22ff      	movs	r2, #255	; 0xff
 8001940:	401a      	ands	r2, r3
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	0018      	movs	r0, r3
 8001948:	2303      	movs	r3, #3
 800194a:	4003      	ands	r3, r0
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001950:	481f      	ldr	r0, [pc, #124]	; (80019d0 <__NVIC_SetPriority+0xd4>)
 8001952:	1dfb      	adds	r3, r7, #7
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b25b      	sxtb	r3, r3
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	430a      	orrs	r2, r1
 800195c:	33c0      	adds	r3, #192	; 0xc0
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	501a      	str	r2, [r3, r0]
}
 8001962:	e031      	b.n	80019c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001964:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <__NVIC_SetPriority+0xd8>)
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	0019      	movs	r1, r3
 800196c:	230f      	movs	r3, #15
 800196e:	400b      	ands	r3, r1
 8001970:	3b08      	subs	r3, #8
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3306      	adds	r3, #6
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	18d3      	adds	r3, r2, r3
 800197a:	3304      	adds	r3, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1dfa      	adds	r2, r7, #7
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	0011      	movs	r1, r2
 8001984:	2203      	movs	r2, #3
 8001986:	400a      	ands	r2, r1
 8001988:	00d2      	lsls	r2, r2, #3
 800198a:	21ff      	movs	r1, #255	; 0xff
 800198c:	4091      	lsls	r1, r2
 800198e:	000a      	movs	r2, r1
 8001990:	43d2      	mvns	r2, r2
 8001992:	401a      	ands	r2, r3
 8001994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	22ff      	movs	r2, #255	; 0xff
 800199c:	401a      	ands	r2, r3
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	0018      	movs	r0, r3
 80019a4:	2303      	movs	r3, #3
 80019a6:	4003      	ands	r3, r0
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ac:	4809      	ldr	r0, [pc, #36]	; (80019d4 <__NVIC_SetPriority+0xd8>)
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	001c      	movs	r4, r3
 80019b4:	230f      	movs	r3, #15
 80019b6:	4023      	ands	r3, r4
 80019b8:	3b08      	subs	r3, #8
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	430a      	orrs	r2, r1
 80019be:	3306      	adds	r3, #6
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	18c3      	adds	r3, r0, r3
 80019c4:	3304      	adds	r3, #4
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b003      	add	sp, #12
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	045b      	lsls	r3, r3, #17
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d301      	bcc.n	80019f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ec:	2301      	movs	r3, #1
 80019ee:	e010      	b.n	8001a12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <SysTick_Config+0x44>)
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	3a01      	subs	r2, #1
 80019f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f8:	2301      	movs	r3, #1
 80019fa:	425b      	negs	r3, r3
 80019fc:	2103      	movs	r1, #3
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7ff ff7c 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x44>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x44>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	1c02      	adds	r2, r0, #0
 8001a30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	0002      	movs	r2, r0
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff ff33 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b002      	add	sp, #8
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ffaf 	bl	80019d8 <SysTick_Config>
 8001a7a:	0003      	movs	r3, r0
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2225      	movs	r2, #37	; 0x25
 8001a98:	5c9b      	ldrb	r3, [r3, r2]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2224      	movs	r2, #36	; 0x24
 8001aaa:	2100      	movs	r1, #0
 8001aac:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e024      	b.n	8001afc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	210e      	movs	r1, #14
 8001abe:	438a      	bics	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	438a      	bics	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	221c      	movs	r2, #28
 8001ad8:	401a      	ands	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4091      	lsls	r1, r2
 8001ae2:	000a      	movs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2225      	movs	r2, #37	; 0x25
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2224      	movs	r2, #36	; 0x24
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]

    return status;
 8001af6:	230f      	movs	r3, #15
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b004      	add	sp, #16
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2225      	movs	r2, #37	; 0x25
 8001b18:	5c9b      	ldrb	r3, [r3, r2]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d006      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2204      	movs	r2, #4
 8001b24:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e02a      	b.n	8001b84 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	210e      	movs	r1, #14
 8001b3a:	438a      	bics	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	438a      	bics	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	221c      	movs	r2, #28
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	4091      	lsls	r1, r2
 8001b5e:	000a      	movs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2225      	movs	r2, #37	; 0x25
 8001b66:	2101      	movs	r1, #1
 8001b68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2224      	movs	r2, #36	; 0x24
 8001b6e:	2100      	movs	r1, #0
 8001b70:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	0010      	movs	r0, r2
 8001b82:	4798      	blx	r3
    }
  }
  return status;
 8001b84:	230f      	movs	r3, #15
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	781b      	ldrb	r3, [r3, #0]
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001baa:	e155      	b.n	8001e58 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4091      	lsls	r1, r2
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d100      	bne.n	8001bc4 <HAL_GPIO_Init+0x30>
 8001bc2:	e146      	b.n	8001e52 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d005      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	409a      	lsls	r2, r3
 8001bea:	0013      	movs	r3, r2
 8001bec:	43da      	mvns	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	2201      	movs	r2, #1
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d017      	beq.n	8001c7a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	409a      	lsls	r2, r3
 8001c58:	0013      	movs	r3, r2
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2203      	movs	r2, #3
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d123      	bne.n	8001cce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	58d3      	ldr	r3, [r2, r3]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2107      	movs	r1, #7
 8001cb2:	400b      	ands	r3, r1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	6939      	ldr	r1, [r7, #16]
 8001ccc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	401a      	ands	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	029b      	lsls	r3, r3, #10
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d100      	bne.n	8001d10 <HAL_GPIO_Init+0x17c>
 8001d0e:	e0a0      	b.n	8001e52 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d10:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d14:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1c:	4a55      	ldr	r2, [pc, #340]	; (8001e74 <HAL_GPIO_Init+0x2e0>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	589b      	ldr	r3, [r3, r2]
 8001d28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	409a      	lsls	r2, r3
 8001d36:	0013      	movs	r3, r2
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	23a0      	movs	r3, #160	; 0xa0
 8001d44:	05db      	lsls	r3, r3, #23
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d01f      	beq.n	8001d8a <HAL_GPIO_Init+0x1f6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_GPIO_Init+0x2e4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d019      	beq.n	8001d86 <HAL_GPIO_Init+0x1f2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a49      	ldr	r2, [pc, #292]	; (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a48      	ldr	r2, [pc, #288]	; (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00d      	beq.n	8001d7e <HAL_GPIO_Init+0x1ea>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d007      	beq.n	8001d7a <HAL_GPIO_Init+0x1e6>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a46      	ldr	r2, [pc, #280]	; (8001e88 <HAL_GPIO_Init+0x2f4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_GPIO_Init+0x1e2>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e00a      	b.n	8001d8c <HAL_GPIO_Init+0x1f8>
 8001d76:	2306      	movs	r3, #6
 8001d78:	e008      	b.n	8001d8c <HAL_GPIO_Init+0x1f8>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x1f8>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e004      	b.n	8001d8c <HAL_GPIO_Init+0x1f8>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_Init+0x1f8>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_GPIO_Init+0x1f8>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	2103      	movs	r1, #3
 8001d90:	400a      	ands	r2, r1
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	4093      	lsls	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9c:	4935      	ldr	r1, [pc, #212]	; (8001e74 <HAL_GPIO_Init+0x2e0>)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001daa:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43da      	mvns	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	035b      	lsls	r3, r3, #13
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dce:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	039b      	lsls	r3, r3, #14
 8001dec:	4013      	ands	r3, r2
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001dfe:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	029b      	lsls	r3, r3, #10
 8001e16:	4013      	ands	r3, r2
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	4013      	ands	r3, r2
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	40da      	lsrs	r2, r3
 8001e60:	1e13      	subs	r3, r2, #0
 8001e62:	d000      	beq.n	8001e66 <HAL_GPIO_Init+0x2d2>
 8001e64:	e6a2      	b.n	8001bac <HAL_GPIO_Init+0x18>
  }
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b006      	add	sp, #24
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	50000400 	.word	0x50000400
 8001e7c:	50000800 	.word	0x50000800
 8001e80:	50000c00 	.word	0x50000c00
 8001e84:	50001000 	.word	0x50001000
 8001e88:	50001c00 	.word	0x50001c00
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	000a      	movs	r2, r1
 8001e9a:	1cbb      	adds	r3, r7, #2
 8001e9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	1cba      	adds	r2, r7, #2
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001eaa:	230f      	movs	r3, #15
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e003      	b.n	8001ebc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	0008      	movs	r0, r1
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	1cbb      	adds	r3, r7, #2
 8001ed8:	1c02      	adds	r2, r0, #0
 8001eda:	801a      	strh	r2, [r3, #0]
 8001edc:	1c7b      	adds	r3, r7, #1
 8001ede:	1c0a      	adds	r2, r1, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee2:	1c7b      	adds	r3, r7, #1
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	1cbb      	adds	r3, r7, #2
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ef2:	e003      	b.n	8001efc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ef4:	1cbb      	adds	r3, r7, #2
 8001ef6:	881a      	ldrh	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e082      	b.n	800201c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2241      	movs	r2, #65	; 0x41
 8001f1a:	5c9b      	ldrb	r3, [r3, r2]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d107      	bne.n	8001f32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2240      	movs	r2, #64	; 0x40
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff f9b3 	bl	8001298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2241      	movs	r2, #65	; 0x41
 8001f36:	2124      	movs	r1, #36	; 0x24
 8001f38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	438a      	bics	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4934      	ldr	r1, [pc, #208]	; (8002024 <HAL_I2C_Init+0x120>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4931      	ldr	r1, [pc, #196]	; (8002028 <HAL_I2C_Init+0x124>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d108      	bne.n	8001f82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0209      	lsls	r1, r1, #8
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	e007      	b.n	8001f92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2184      	movs	r1, #132	; 0x84
 8001f8c:	0209      	lsls	r1, r1, #8
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d104      	bne.n	8001fa4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	491f      	ldr	r1, [pc, #124]	; (800202c <HAL_I2C_Init+0x128>)
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	491a      	ldr	r1, [pc, #104]	; (8002028 <HAL_I2C_Init+0x124>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69d9      	ldr	r1, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2241      	movs	r2, #65	; 0x41
 8002008:	2120      	movs	r1, #32
 800200a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2242      	movs	r2, #66	; 0x42
 8002016:	2100      	movs	r1, #0
 8002018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}
 8002024:	f0ffffff 	.word	0xf0ffffff
 8002028:	ffff7fff 	.word	0xffff7fff
 800202c:	02008000 	.word	0x02008000

08002030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2241      	movs	r2, #65	; 0x41
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	d138      	bne.n	80020b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	5c9b      	ldrb	r3, [r3, r2]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002050:	2302      	movs	r3, #2
 8002052:	e032      	b.n	80020ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	2101      	movs	r1, #1
 800205a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2241      	movs	r2, #65	; 0x41
 8002060:	2124      	movs	r1, #36	; 0x24
 8002062:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	438a      	bics	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4911      	ldr	r1, [pc, #68]	; (80020c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002080:	400a      	ands	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2241      	movs	r2, #65	; 0x41
 80020a8:	2120      	movs	r1, #32
 80020aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2240      	movs	r2, #64	; 0x40
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e000      	b.n	80020ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
  }
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	ffffefff 	.word	0xffffefff

080020c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2241      	movs	r2, #65	; 0x41
 80020d6:	5c9b      	ldrb	r3, [r3, r2]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d139      	bne.n	8002152 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2240      	movs	r2, #64	; 0x40
 80020e2:	5c9b      	ldrb	r3, [r3, r2]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e033      	b.n	8002154 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2240      	movs	r2, #64	; 0x40
 80020f0:	2101      	movs	r1, #1
 80020f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2241      	movs	r2, #65	; 0x41
 80020f8:	2124      	movs	r1, #36	; 0x24
 80020fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	438a      	bics	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2241      	movs	r2, #65	; 0x41
 8002142:	2120      	movs	r1, #32
 8002144:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	2100      	movs	r1, #0
 800214c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e000      	b.n	8002154 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002152:	2302      	movs	r3, #2
  }
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b004      	add	sp, #16
 800215a:	bd80      	pop	{r7, pc}
 800215c:	fffff0ff 	.word	0xfffff0ff

08002160 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e03d      	b.n	80021ee <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <HAL_IWDG_Init+0x98>)
 8002178:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_IWDG_Init+0x9c>)
 8002180:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6852      	ldr	r2, [r2, #4]
 800218a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6892      	ldr	r2, [r2, #8]
 8002194:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002196:	f7ff fb69 	bl	800186c <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800219e:	e00e      	b.n	80021be <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80021a0:	f7ff fb64 	bl	800186c <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b2a      	cmp	r3, #42	; 0x2a
 80021ac:	d907      	bls.n	80021be <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2207      	movs	r2, #7
 80021b6:	4013      	ands	r3, r2
 80021b8:	d001      	beq.n	80021be <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e017      	b.n	80021ee <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2207      	movs	r2, #7
 80021c6:	4013      	ands	r3, r2
 80021c8:	d1ea      	bne.n	80021a0 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d005      	beq.n	80021e4 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68d2      	ldr	r2, [r2, #12]
 80021e0:	611a      	str	r2, [r3, #16]
 80021e2:	e003      	b.n	80021ec <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <HAL_IWDG_Init+0xa0>)
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	0000cccc 	.word	0x0000cccc
 80021fc:	00005555 	.word	0x00005555
 8002200:	0000aaaa 	.word	0x0000aaaa

08002204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b5b0      	push	{r4, r5, r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	f000 fb6c 	bl	80028f0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002218:	4bc8      	ldr	r3, [pc, #800]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	220c      	movs	r2, #12
 800221e:	4013      	ands	r3, r2
 8002220:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002222:	4bc6      	ldr	r3, [pc, #792]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2201      	movs	r2, #1
 8002234:	4013      	ands	r3, r2
 8002236:	d100      	bne.n	800223a <HAL_RCC_OscConfig+0x36>
 8002238:	e07d      	b.n	8002336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d007      	beq.n	8002250 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d112      	bne.n	800226c <HAL_RCC_OscConfig+0x68>
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	025b      	lsls	r3, r3, #9
 800224c:	429a      	cmp	r2, r3
 800224e:	d10d      	bne.n	800226c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	4bba      	ldr	r3, [pc, #744]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	029b      	lsls	r3, r3, #10
 8002258:	4013      	ands	r3, r2
 800225a:	d100      	bne.n	800225e <HAL_RCC_OscConfig+0x5a>
 800225c:	e06a      	b.n	8002334 <HAL_RCC_OscConfig+0x130>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d166      	bne.n	8002334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	f000 fb42 	bl	80028f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	025b      	lsls	r3, r3, #9
 8002274:	429a      	cmp	r2, r3
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x84>
 8002278:	4bb0      	ldr	r3, [pc, #704]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4baf      	ldr	r3, [pc, #700]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0249      	lsls	r1, r1, #9
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e027      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	23a0      	movs	r3, #160	; 0xa0
 800228e:	02db      	lsls	r3, r3, #11
 8002290:	429a      	cmp	r2, r3
 8002292:	d10e      	bne.n	80022b2 <HAL_RCC_OscConfig+0xae>
 8002294:	4ba9      	ldr	r3, [pc, #676]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4ba8      	ldr	r3, [pc, #672]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	02c9      	lsls	r1, r1, #11
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	4ba6      	ldr	r3, [pc, #664]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4ba5      	ldr	r3, [pc, #660]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	0249      	lsls	r1, r1, #9
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e012      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 80022b2:	4ba2      	ldr	r3, [pc, #648]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4ba1      	ldr	r3, [pc, #644]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80022b8:	49a1      	ldr	r1, [pc, #644]	; (8002540 <HAL_RCC_OscConfig+0x33c>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	4b9f      	ldr	r3, [pc, #636]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	4013      	ands	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4b9b      	ldr	r3, [pc, #620]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b9a      	ldr	r3, [pc, #616]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80022d2:	499c      	ldr	r1, [pc, #624]	; (8002544 <HAL_RCC_OscConfig+0x340>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d014      	beq.n	800230a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fac4 	bl	800186c <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ea:	f7ff fabf 	bl	800186c <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	; 0x64
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e2f9      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022fc:	4b8f      	ldr	r3, [pc, #572]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	029b      	lsls	r3, r3, #10
 8002304:	4013      	ands	r3, r2
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0xe6>
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff faaf 	bl	800186c <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff faaa 	bl	800186c <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e2e4      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002326:	4b85      	ldr	r3, [pc, #532]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	029b      	lsls	r3, r3, #10
 800232e:	4013      	ands	r3, r2
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x110>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2202      	movs	r2, #2
 800233c:	4013      	ands	r3, r2
 800233e:	d100      	bne.n	8002342 <HAL_RCC_OscConfig+0x13e>
 8002340:	e099      	b.n	8002476 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	2220      	movs	r2, #32
 800234c:	4013      	ands	r3, r2
 800234e:	d009      	beq.n	8002364 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002350:	4b7a      	ldr	r3, [pc, #488]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b79      	ldr	r3, [pc, #484]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002356:	2120      	movs	r1, #32
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	2220      	movs	r2, #32
 8002360:	4393      	bics	r3, r2
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	d13e      	bne.n	80023ee <HAL_RCC_OscConfig+0x1ea>
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d13b      	bne.n	80023ee <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002376:	4b71      	ldr	r3, [pc, #452]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2204      	movs	r2, #4
 800237c:	4013      	ands	r3, r2
 800237e:	d004      	beq.n	800238a <HAL_RCC_OscConfig+0x186>
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e2b2      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b6c      	ldr	r3, [pc, #432]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a6e      	ldr	r2, [pc, #440]	; (8002548 <HAL_RCC_OscConfig+0x344>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	021a      	lsls	r2, r3, #8
 800239a:	4b68      	ldr	r3, [pc, #416]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023a0:	4b66      	ldr	r3, [pc, #408]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2209      	movs	r2, #9
 80023a6:	4393      	bics	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	4b64      	ldr	r3, [pc, #400]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023b2:	f000 fbeb 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 80023b6:	0001      	movs	r1, r0
 80023b8:	4b60      	ldr	r3, [pc, #384]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	220f      	movs	r2, #15
 80023c0:	4013      	ands	r3, r2
 80023c2:	4a62      	ldr	r2, [pc, #392]	; (800254c <HAL_RCC_OscConfig+0x348>)
 80023c4:	5cd3      	ldrb	r3, [r2, r3]
 80023c6:	000a      	movs	r2, r1
 80023c8:	40da      	lsrs	r2, r3
 80023ca:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCC_OscConfig+0x34c>)
 80023cc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80023ce:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_OscConfig+0x350>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2513      	movs	r5, #19
 80023d4:	197c      	adds	r4, r7, r5
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff fa02 	bl	80017e0 <HAL_InitTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80023e0:	197b      	adds	r3, r7, r5
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d046      	beq.n	8002476 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80023e8:	197b      	adds	r3, r7, r5
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	e280      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d027      	beq.n	8002444 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023f4:	4b51      	ldr	r3, [pc, #324]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2209      	movs	r2, #9
 80023fa:	4393      	bics	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	4b4f      	ldr	r3, [pc, #316]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002402:	430a      	orrs	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff fa31 	bl	800186c <HAL_GetTick>
 800240a:	0003      	movs	r3, r0
 800240c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002410:	f7ff fa2c 	bl	800186c <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e266      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002422:	4b46      	ldr	r3, [pc, #280]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2204      	movs	r2, #4
 8002428:	4013      	ands	r3, r2
 800242a:	d0f1      	beq.n	8002410 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_RCC_OscConfig+0x344>)
 8002432:	4013      	ands	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	021a      	lsls	r2, r3, #8
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	e018      	b.n	8002476 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002444:	4b3d      	ldr	r3, [pc, #244]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b3c      	ldr	r3, [pc, #240]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800244a:	2101      	movs	r1, #1
 800244c:	438a      	bics	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fa0c 	bl	800186c <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245a:	f7ff fa07 	bl	800186c <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e241      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2204      	movs	r2, #4
 8002472:	4013      	ands	r3, r2
 8002474:	d1f1      	bne.n	800245a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2210      	movs	r2, #16
 800247c:	4013      	ands	r3, r2
 800247e:	d100      	bne.n	8002482 <HAL_RCC_OscConfig+0x27e>
 8002480:	e0a1      	b.n	80025c6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d140      	bne.n	800250a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <HAL_RCC_OscConfig+0x338>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_OscConfig+0x29c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e227      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <HAL_RCC_OscConfig+0x354>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1a      	ldr	r2, [r3, #32]
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	0a19      	lsrs	r1, r3, #8
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	061a      	lsls	r2, r3, #24
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	0b5b      	lsrs	r3, r3, #13
 80024ce:	3301      	adds	r3, #1
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	0212      	lsls	r2, r2, #8
 80024d4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_OscConfig+0x338>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	210f      	movs	r1, #15
 80024de:	400b      	ands	r3, r1
 80024e0:	491a      	ldr	r1, [pc, #104]	; (800254c <HAL_RCC_OscConfig+0x348>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCC_OscConfig+0x34c>)
 80024e8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCC_OscConfig+0x350>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2513      	movs	r5, #19
 80024f0:	197c      	adds	r4, r7, r5
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff f974 	bl	80017e0 <HAL_InitTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80024fc:	197b      	adds	r3, r7, r5
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d060      	beq.n	80025c6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002504:	197b      	adds	r3, r7, r5
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	e1f2      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d03f      	beq.n	8002592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_OscConfig+0x338>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0049      	lsls	r1, r1, #1
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff f9a4 	bl	800186c <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002528:	e018      	b.n	800255c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800252a:	f7ff f99f 	bl	800186c <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d911      	bls.n	800255c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e1d9      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
 800253c:	40021000 	.word	0x40021000
 8002540:	fffeffff 	.word	0xfffeffff
 8002544:	fffbffff 	.word	0xfffbffff
 8002548:	ffffe0ff 	.word	0xffffe0ff
 800254c:	080059e8 	.word	0x080059e8
 8002550:	200001d0 	.word	0x200001d0
 8002554:	200001d4 	.word	0x200001d4
 8002558:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800255c:	4bc9      	ldr	r3, [pc, #804]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d0e0      	beq.n	800252a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002568:	4bc6      	ldr	r3, [pc, #792]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4ac6      	ldr	r2, [pc, #792]	; (8002888 <HAL_RCC_OscConfig+0x684>)
 800256e:	4013      	ands	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1a      	ldr	r2, [r3, #32]
 8002576:	4bc3      	ldr	r3, [pc, #780]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257c:	4bc1      	ldr	r3, [pc, #772]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	0a19      	lsrs	r1, r3, #8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	061a      	lsls	r2, r3, #24
 800258a:	4bbe      	ldr	r3, [pc, #760]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	e019      	b.n	80025c6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002592:	4bbc      	ldr	r3, [pc, #752]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4bbb      	ldr	r3, [pc, #748]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002598:	49bc      	ldr	r1, [pc, #752]	; (800288c <HAL_RCC_OscConfig+0x688>)
 800259a:	400a      	ands	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff f965 	bl	800186c <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025a8:	f7ff f960 	bl	800186c <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e19a      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025ba:	4bb2      	ldr	r3, [pc, #712]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2208      	movs	r2, #8
 80025cc:	4013      	ands	r3, r2
 80025ce:	d036      	beq.n	800263e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d019      	beq.n	800260c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d8:	4baa      	ldr	r3, [pc, #680]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80025da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025dc:	4ba9      	ldr	r3, [pc, #676]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80025de:	2101      	movs	r1, #1
 80025e0:	430a      	orrs	r2, r1
 80025e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7ff f942 	bl	800186c <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ee:	f7ff f93d 	bl	800186c <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e177      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002600:	4ba0      	ldr	r3, [pc, #640]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	2202      	movs	r2, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d0f1      	beq.n	80025ee <HAL_RCC_OscConfig+0x3ea>
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260c:	4b9d      	ldr	r3, [pc, #628]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800260e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002610:	4b9c      	ldr	r3, [pc, #624]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002612:	2101      	movs	r1, #1
 8002614:	438a      	bics	r2, r1
 8002616:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7ff f928 	bl	800186c <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002622:	f7ff f923 	bl	800186c <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e15d      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002634:	4b93      	ldr	r3, [pc, #588]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d1f1      	bne.n	8002622 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2204      	movs	r2, #4
 8002644:	4013      	ands	r3, r2
 8002646:	d100      	bne.n	800264a <HAL_RCC_OscConfig+0x446>
 8002648:	e0ae      	b.n	80027a8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2023      	movs	r0, #35	; 0x23
 800264c:	183b      	adds	r3, r7, r0
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	055b      	lsls	r3, r3, #21
 800265a:	4013      	ands	r3, r2
 800265c:	d109      	bne.n	8002672 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002662:	4b88      	ldr	r3, [pc, #544]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0549      	lsls	r1, r1, #21
 8002668:	430a      	orrs	r2, r1
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800266c:	183b      	adds	r3, r7, r0
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b87      	ldr	r3, [pc, #540]	; (8002890 <HAL_RCC_OscConfig+0x68c>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4013      	ands	r3, r2
 800267c:	d11a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267e:	4b84      	ldr	r3, [pc, #528]	; (8002890 <HAL_RCC_OscConfig+0x68c>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b83      	ldr	r3, [pc, #524]	; (8002890 <HAL_RCC_OscConfig+0x68c>)
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	0049      	lsls	r1, r1, #1
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268c:	f7ff f8ee 	bl	800186c <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7ff f8e9 	bl	800186c <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	; 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e123      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_OscConfig+0x68c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	429a      	cmp	r2, r3
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4cc>
 80026c0:	4b70      	ldr	r3, [pc, #448]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80026c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026c4:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0049      	lsls	r1, r1, #1
 80026ca:	430a      	orrs	r2, r1
 80026cc:	651a      	str	r2, [r3, #80]	; 0x50
 80026ce:	e031      	b.n	8002734 <HAL_RCC_OscConfig+0x530>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x4ee>
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80026da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026dc:	4b69      	ldr	r3, [pc, #420]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80026de:	496b      	ldr	r1, [pc, #428]	; (800288c <HAL_RCC_OscConfig+0x688>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	651a      	str	r2, [r3, #80]	; 0x50
 80026e4:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80026e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026e8:	4b66      	ldr	r3, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80026ea:	496a      	ldr	r1, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x690>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	651a      	str	r2, [r3, #80]	; 0x50
 80026f0:	e020      	b.n	8002734 <HAL_RCC_OscConfig+0x530>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	23a0      	movs	r3, #160	; 0xa0
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d10e      	bne.n	800271c <HAL_RCC_OscConfig+0x518>
 80026fe:	4b61      	ldr	r3, [pc, #388]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002702:	4b60      	ldr	r3, [pc, #384]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	00c9      	lsls	r1, r1, #3
 8002708:	430a      	orrs	r2, r1
 800270a:	651a      	str	r2, [r3, #80]	; 0x50
 800270c:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800270e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002710:	4b5c      	ldr	r3, [pc, #368]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	0049      	lsls	r1, r1, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	651a      	str	r2, [r3, #80]	; 0x50
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0x530>
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800271e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002720:	4b58      	ldr	r3, [pc, #352]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002722:	495a      	ldr	r1, [pc, #360]	; (800288c <HAL_RCC_OscConfig+0x688>)
 8002724:	400a      	ands	r2, r1
 8002726:	651a      	str	r2, [r3, #80]	; 0x50
 8002728:	4b56      	ldr	r3, [pc, #344]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800272a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800272c:	4b55      	ldr	r3, [pc, #340]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800272e:	4959      	ldr	r1, [pc, #356]	; (8002894 <HAL_RCC_OscConfig+0x690>)
 8002730:	400a      	ands	r2, r1
 8002732:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d015      	beq.n	8002768 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7ff f896 	bl	800186c <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002744:	e009      	b.n	800275a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7ff f891 	bl	800186c <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	4a51      	ldr	r2, [pc, #324]	; (8002898 <HAL_RCC_OscConfig+0x694>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0ca      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800275a:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800275c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4013      	ands	r3, r2
 8002764:	d0ef      	beq.n	8002746 <HAL_RCC_OscConfig+0x542>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7ff f880 	bl	800186c <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002770:	e009      	b.n	8002786 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7ff f87b 	bl	800186c <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	4a46      	ldr	r2, [pc, #280]	; (8002898 <HAL_RCC_OscConfig+0x694>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0b4      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4013      	ands	r3, r2
 8002790:	d1ef      	bne.n	8002772 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002792:	2323      	movs	r3, #35	; 0x23
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800279e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a0:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80027a2:	493e      	ldr	r1, [pc, #248]	; (800289c <HAL_RCC_OscConfig+0x698>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d100      	bne.n	80027b2 <HAL_RCC_OscConfig+0x5ae>
 80027b0:	e09d      	b.n	80028ee <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d100      	bne.n	80027ba <HAL_RCC_OscConfig+0x5b6>
 80027b8:	e076      	b.n	80028a8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d145      	bne.n	800284e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b30      	ldr	r3, [pc, #192]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80027c8:	4935      	ldr	r1, [pc, #212]	; (80028a0 <HAL_RCC_OscConfig+0x69c>)
 80027ca:	400a      	ands	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7ff f84d 	bl	800186c <HAL_GetTick>
 80027d2:	0003      	movs	r3, r0
 80027d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d8:	f7ff f848 	bl	800186c <HAL_GetTick>
 80027dc:	0002      	movs	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e082      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	049b      	lsls	r3, r3, #18
 80027f2:	4013      	ands	r3, r2
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <HAL_RCC_OscConfig+0x6a0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	431a      	orrs	r2, r3
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002812:	430a      	orrs	r2, r1
 8002814:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	0449      	lsls	r1, r1, #17
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff f822 	bl	800186c <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7ff f81d 	bl	800186c <HAL_GetTick>
 8002832:	0002      	movs	r2, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e057      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	049b      	lsls	r3, r3, #18
 8002848:	4013      	ands	r3, r2
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x62a>
 800284c:	e04f      	b.n	80028ee <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002854:	4912      	ldr	r1, [pc, #72]	; (80028a0 <HAL_RCC_OscConfig+0x69c>)
 8002856:	400a      	ands	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7ff f807 	bl	800186c <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff f802 	bl	800186c <HAL_GetTick>
 8002868:	0002      	movs	r2, r0
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e03c      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002876:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_RCC_OscConfig+0x680>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	049b      	lsls	r3, r3, #18
 800287e:	4013      	ands	r3, r2
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x660>
 8002882:	e034      	b.n	80028ee <HAL_RCC_OscConfig+0x6ea>
 8002884:	40021000 	.word	0x40021000
 8002888:	ffff1fff 	.word	0xffff1fff
 800288c:	fffffeff 	.word	0xfffffeff
 8002890:	40007000 	.word	0x40007000
 8002894:	fffffbff 	.word	0xfffffbff
 8002898:	00001388 	.word	0x00001388
 800289c:	efffffff 	.word	0xefffffff
 80028a0:	feffffff 	.word	0xfeffffff
 80028a4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e01d      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_RCC_OscConfig+0x6f4>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	401a      	ands	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d10f      	bne.n	80028ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	23f0      	movs	r3, #240	; 0xf0
 80028ce:	039b      	lsls	r3, r3, #14
 80028d0:	401a      	ands	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	23c0      	movs	r3, #192	; 0xc0
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	401a      	ands	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b00a      	add	sp, #40	; 0x28
 80028f6:	bdb0      	pop	{r4, r5, r7, pc}
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b5b0      	push	{r4, r5, r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e128      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002910:	4b96      	ldr	r3, [pc, #600]	; (8002b6c <HAL_RCC_ClockConfig+0x270>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2201      	movs	r2, #1
 8002916:	4013      	ands	r3, r2
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d91e      	bls.n	800295c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b93      	ldr	r3, [pc, #588]	; (8002b6c <HAL_RCC_ClockConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	4393      	bics	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	4b90      	ldr	r3, [pc, #576]	; (8002b6c <HAL_RCC_ClockConfig+0x270>)
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002930:	f7fe ff9c 	bl	800186c <HAL_GetTick>
 8002934:	0003      	movs	r3, r0
 8002936:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002938:	e009      	b.n	800294e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293a:	f7fe ff97 	bl	800186c <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	4a8a      	ldr	r2, [pc, #552]	; (8002b70 <HAL_RCC_ClockConfig+0x274>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e109      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b87      	ldr	r3, [pc, #540]	; (8002b6c <HAL_RCC_ClockConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d1ee      	bne.n	800293a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2202      	movs	r2, #2
 8002962:	4013      	ands	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002966:	4b83      	ldr	r3, [pc, #524]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	22f0      	movs	r2, #240	; 0xf0
 800296c:	4393      	bics	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	4b7f      	ldr	r3, [pc, #508]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002976:	430a      	orrs	r2, r1
 8002978:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2201      	movs	r2, #1
 8002980:	4013      	ands	r3, r2
 8002982:	d100      	bne.n	8002986 <HAL_RCC_ClockConfig+0x8a>
 8002984:	e089      	b.n	8002a9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800298e:	4b79      	ldr	r3, [pc, #484]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	029b      	lsls	r3, r3, #10
 8002996:	4013      	ands	r3, r2
 8002998:	d120      	bne.n	80029dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0e1      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a6:	4b73      	ldr	r3, [pc, #460]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	049b      	lsls	r3, r3, #18
 80029ae:	4013      	ands	r3, r2
 80029b0:	d114      	bne.n	80029dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0d5      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029be:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2204      	movs	r2, #4
 80029c4:	4013      	ands	r3, r2
 80029c6:	d109      	bne.n	80029dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0ca      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029cc:	4b69      	ldr	r3, [pc, #420]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4013      	ands	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0c2      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029dc:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2203      	movs	r2, #3
 80029e2:	4393      	bics	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 80029ec:	430a      	orrs	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7fe ff3c 	bl	800186c <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d111      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a00:	e009      	b.n	8002a16 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a02:	f7fe ff33 	bl	800186c <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <HAL_RCC_ClockConfig+0x274>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0a5      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d1ef      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x106>
 8002a22:	e03a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d111      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2c:	e009      	b.n	8002a42 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2e:	f7fe ff1d 	bl	800186c <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	4a4d      	ldr	r2, [pc, #308]	; (8002b70 <HAL_RCC_ClockConfig+0x274>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e08f      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a42:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	220c      	movs	r2, #12
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d1ef      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x132>
 8002a4e:	e024      	b.n	8002a9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d11b      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a58:	e009      	b.n	8002a6e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5a:	f7fe ff07 	bl	800186c <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	4a42      	ldr	r2, [pc, #264]	; (8002b70 <HAL_RCC_ClockConfig+0x274>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e079      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	220c      	movs	r2, #12
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d1ef      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x15e>
 8002a7a:	e00e      	b.n	8002a9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fef6 	bl	800186c <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	4a3a      	ldr	r2, [pc, #232]	; (8002b70 <HAL_RCC_ClockConfig+0x274>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e068      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a90:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	220c      	movs	r2, #12
 8002a96:	4013      	ands	r3, r2
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9a:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <HAL_RCC_ClockConfig+0x270>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d21e      	bcs.n	8002ae6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa8:	4b30      	ldr	r3, [pc, #192]	; (8002b6c <HAL_RCC_ClockConfig+0x270>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2201      	movs	r2, #1
 8002aae:	4393      	bics	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_RCC_ClockConfig+0x270>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002aba:	f7fe fed7 	bl	800186c <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	e009      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe fed2 	bl	800186c <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <HAL_RCC_ClockConfig+0x274>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e044      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_ClockConfig+0x270>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d1ee      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2204      	movs	r2, #4
 8002aec:	4013      	ands	r3, r2
 8002aee:	d009      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af0:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <HAL_RCC_ClockConfig+0x27c>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	0019      	movs	r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_RCC_ClockConfig+0x280>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	0019      	movs	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	00da      	lsls	r2, r3, #3
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b24:	f000 f832 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b28:	0001      	movs	r1, r0
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_ClockConfig+0x278>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	220f      	movs	r2, #15
 8002b32:	4013      	ands	r3, r2
 8002b34:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <HAL_RCC_ClockConfig+0x284>)
 8002b36:	5cd3      	ldrb	r3, [r2, r3]
 8002b38:	000a      	movs	r2, r1
 8002b3a:	40da      	lsrs	r2, r3
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCC_ClockConfig+0x288>)
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_RCC_ClockConfig+0x28c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	250b      	movs	r5, #11
 8002b46:	197c      	adds	r4, r7, r5
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7fe fe49 	bl	80017e0 <HAL_InitTick>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b52:	197b      	adds	r3, r7, r5
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b5a:	197b      	adds	r3, r7, r5
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b004      	add	sp, #16
 8002b68:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	00001388 	.word	0x00001388
 8002b74:	40021000 	.word	0x40021000
 8002b78:	fffff8ff 	.word	0xfffff8ff
 8002b7c:	ffffc7ff 	.word	0xffffc7ff
 8002b80:	080059e8 	.word	0x080059e8
 8002b84:	200001d0 	.word	0x200001d0
 8002b88:	200001d4 	.word	0x200001d4

08002b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	b5b0      	push	{r4, r5, r7, lr}
 8002b8e:	b08e      	sub	sp, #56	; 0x38
 8002b90:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b92:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9a:	230c      	movs	r3, #12
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d014      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x40>
 8002ba2:	d900      	bls.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x1a>
 8002ba4:	e07b      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x112>
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d002      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x24>
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bae:	e076      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bb0:	4b44      	ldr	r3, [pc, #272]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002bba:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002bbe:	e07c      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002bc0:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x140>)
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bc4:	e079      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc6:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bca:	e076      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	0c9a      	lsrs	r2, r3, #18
 8002bd0:	230f      	movs	r3, #15
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x148>)
 8002bd6:	5c9b      	ldrb	r3, [r3, r2]
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	0d9a      	lsrs	r2, r3, #22
 8002bde:	2303      	movs	r3, #3
 8002be0:	4013      	ands	r3, r2
 8002be2:	3301      	adds	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	025b      	lsls	r3, r3, #9
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d01a      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	4a35      	ldr	r2, [pc, #212]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	69b8      	ldr	r0, [r7, #24]
 8002c00:	69f9      	ldr	r1, [r7, #28]
 8002c02:	f7fd fb3f 	bl	8000284 <__aeabi_lmul>
 8002c06:	0002      	movs	r2, r0
 8002c08:	000b      	movs	r3, r1
 8002c0a:	0010      	movs	r0, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f7fd fb13 	bl	8000244 <__aeabi_uldivmod>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	000b      	movs	r3, r1
 8002c22:	0013      	movs	r3, r2
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
 8002c26:	e037      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c28:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d01a      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	68f9      	ldr	r1, [r7, #12]
 8002c42:	f7fd fb1f 	bl	8000284 <__aeabi_lmul>
 8002c46:	0002      	movs	r2, r0
 8002c48:	000b      	movs	r3, r1
 8002c4a:	0010      	movs	r0, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f7fd faf3 	bl	8000244 <__aeabi_uldivmod>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	000b      	movs	r3, r1
 8002c62:	0013      	movs	r3, r2
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
 8002c66:	e017      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	0019      	movs	r1, r3
 8002c70:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x140>)
 8002c72:	2300      	movs	r3, #0
 8002c74:	f7fd fb06 	bl	8000284 <__aeabi_lmul>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	000b      	movs	r3, r1
 8002c7c:	0010      	movs	r0, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	001c      	movs	r4, r3
 8002c84:	2300      	movs	r3, #0
 8002c86:	001d      	movs	r5, r3
 8002c88:	0022      	movs	r2, r4
 8002c8a:	002b      	movs	r3, r5
 8002c8c:	f7fd fada 	bl	8000244 <__aeabi_uldivmod>
 8002c90:	0002      	movs	r2, r0
 8002c92:	000b      	movs	r3, r1
 8002c94:	0013      	movs	r3, r2
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c9c:	e00d      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	0b5b      	lsrs	r3, r3, #13
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	3301      	adds	r3, #1
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	0212      	lsls	r2, r2, #8
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	0013      	movs	r3, r2
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cb8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b00e      	add	sp, #56	; 0x38
 8002cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	003d0900 	.word	0x003d0900
 8002ccc:	00f42400 	.word	0x00f42400
 8002cd0:	007a1200 	.word	0x007a1200
 8002cd4:	08005a00 	.word	0x08005a00

08002cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	200001d0 	.word	0x200001d0

08002cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf0:	f7ff fff2 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	0001      	movs	r1, r0
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	4013      	ands	r3, r2
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	40d9      	lsrs	r1, r3
 8002d06:	000b      	movs	r3, r1
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40021000 	.word	0x40021000
 8002d14:	080059f8 	.word	0x080059f8

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d1c:	f7ff ffdc 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002d20:	0001      	movs	r1, r0
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	0adb      	lsrs	r3, r3, #11
 8002d28:	2207      	movs	r2, #7
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	40d9      	lsrs	r1, r3
 8002d32:	000b      	movs	r3, r1
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	080059f8 	.word	0x080059f8

08002d44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d4c:	2017      	movs	r0, #23
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d100      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002d5e:	e0c7      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d60:	4b93      	ldr	r3, [pc, #588]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	055b      	lsls	r3, r3, #21
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	4b90      	ldr	r3, [pc, #576]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d70:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	0549      	lsls	r1, r1, #21
 8002d76:	430a      	orrs	r2, r1
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d7a:	183b      	adds	r3, r7, r0
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	4b8c      	ldr	r3, [pc, #560]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d11a      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8c:	4b89      	ldr	r3, [pc, #548]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b88      	ldr	r3, [pc, #544]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	0049      	lsls	r1, r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fd67 	bl	800186c <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	e008      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fe fd62 	bl	800186c <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0f8      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	4b7f      	ldr	r3, [pc, #508]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002dc2:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	23c0      	movs	r3, #192	; 0xc0
 8002dc8:	039b      	lsls	r3, r3, #14
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	23c0      	movs	r3, #192	; 0xc0
 8002dd4:	039b      	lsls	r3, r3, #14
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d013      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	23c0      	movs	r3, #192	; 0xc0
 8002de4:	029b      	lsls	r3, r3, #10
 8002de6:	401a      	ands	r2, r3
 8002de8:	23c0      	movs	r3, #192	; 0xc0
 8002dea:	029b      	lsls	r3, r3, #10
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d10a      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002df0:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	401a      	ands	r2, r3
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	029b      	lsls	r3, r3, #10
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d101      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0d0      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002e06:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e0a:	23c0      	movs	r3, #192	; 0xc0
 8002e0c:	029b      	lsls	r3, r3, #10
 8002e0e:	4013      	ands	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d03b      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	23c0      	movs	r3, #192	; 0xc0
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	4013      	ands	r3, r2
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d033      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d02e      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e32:	4b5f      	ldr	r3, [pc, #380]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e36:	4a60      	ldr	r2, [pc, #384]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e3c:	4b5c      	ldr	r3, [pc, #368]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e40:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e42:	2180      	movs	r1, #128	; 0x80
 8002e44:	0309      	lsls	r1, r1, #12
 8002e46:	430a      	orrs	r2, r1
 8002e48:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e4a:	4b59      	ldr	r3, [pc, #356]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e4e:	4b58      	ldr	r3, [pc, #352]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e50:	495a      	ldr	r1, [pc, #360]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002e52:	400a      	ands	r2, r1
 8002e54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002e56:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	d014      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fe fd01 	bl	800186c <HAL_GetTick>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e6e:	e009      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe fcfc 	bl	800186c <HAL_GetTick>
 8002e74:	0002      	movs	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	4a51      	ldr	r2, [pc, #324]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e091      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e84:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d0ef      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2220      	movs	r2, #32
 8002e96:	4013      	ands	r3, r2
 8002e98:	d01f      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	23c0      	movs	r3, #192	; 0xc0
 8002ea0:	029b      	lsls	r3, r3, #10
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	23c0      	movs	r3, #192	; 0xc0
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002eac:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a44      	ldr	r2, [pc, #272]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	23c0      	movs	r3, #192	; 0xc0
 8002ebc:	039b      	lsls	r3, r3, #14
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ec8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	23c0      	movs	r3, #192	; 0xc0
 8002ed0:	029b      	lsls	r3, r3, #10
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eda:	2317      	movs	r3, #23
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee8:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002eea:	4937      	ldr	r1, [pc, #220]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002eec:	400a      	ands	r2, r1
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002efa:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	2203      	movs	r2, #3
 8002f00:	4393      	bics	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2202      	movs	r2, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1c:	220c      	movs	r2, #12
 8002f1e:	4393      	bics	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2204      	movs	r2, #4
 8002f32:	4013      	ands	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f46:	430a      	orrs	r2, r1
 8002f48:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2208      	movs	r2, #8
 8002f50:	4013      	ands	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4013      	ands	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f78:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f84:	430a      	orrs	r2, r1
 8002f86:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b006      	add	sp, #24
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	fffcffff 	.word	0xfffcffff
 8002fbc:	fff7ffff 	.word	0xfff7ffff
 8002fc0:	00001388 	.word	0x00001388
 8002fc4:	ffcfffff 	.word	0xffcfffff
 8002fc8:	efffffff 	.word	0xefffffff
 8002fcc:	fffff3ff 	.word	0xfffff3ff
 8002fd0:	ffffcfff 	.word	0xffffcfff
 8002fd4:	fff3ffff 	.word	0xfff3ffff

08002fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e083      	b.n	80030f2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	2382      	movs	r3, #130	; 0x82
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d009      	beq.n	8003012 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	61da      	str	r2, [r3, #28]
 8003004:	e005      	b.n	8003012 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2251      	movs	r2, #81	; 0x51
 800301c:	5c9b      	ldrb	r3, [r3, r2]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2250      	movs	r2, #80	; 0x50
 8003028:	2100      	movs	r1, #0
 800302a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	0018      	movs	r0, r3
 8003030:	f7fe f978 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2251      	movs	r2, #81	; 0x51
 8003038:	2102      	movs	r1, #2
 800303a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2140      	movs	r1, #64	; 0x40
 8003048:	438a      	bics	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	2382      	movs	r3, #130	; 0x82
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	401a      	ands	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	2384      	movs	r3, #132	; 0x84
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	400b      	ands	r3, r1
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68d9      	ldr	r1, [r3, #12]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	400b      	ands	r3, r1
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2102      	movs	r1, #2
 8003074:	400b      	ands	r3, r1
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	2101      	movs	r1, #1
 800307e:	400b      	ands	r3, r1
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6999      	ldr	r1, [r3, #24]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	400b      	ands	r3, r1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2138      	movs	r1, #56	; 0x38
 8003094:	400b      	ands	r3, r1
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	2180      	movs	r1, #128	; 0x80
 800309e:	400b      	ands	r3, r1
 80030a0:	431a      	orrs	r2, r3
 80030a2:	0011      	movs	r1, r2
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	019b      	lsls	r3, r3, #6
 80030ac:	401a      	ands	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	0c1b      	lsrs	r3, r3, #16
 80030bc:	2204      	movs	r2, #4
 80030be:	4013      	ands	r3, r2
 80030c0:	0019      	movs	r1, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2210      	movs	r2, #16
 80030c8:	401a      	ands	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4907      	ldr	r1, [pc, #28]	; (80030fc <HAL_SPI_Init+0x124>)
 80030de:	400a      	ands	r2, r1
 80030e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2251      	movs	r2, #81	; 0x51
 80030ec:	2101      	movs	r1, #1
 80030ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	fffff7ff 	.word	0xfffff7ff

08003100 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2240      	movs	r2, #64	; 0x40
 800311c:	4013      	ands	r3, r2
 800311e:	d10d      	bne.n	800313c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2201      	movs	r2, #1
 8003124:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003126:	d009      	beq.n	800313c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	4013      	ands	r3, r2
 800312e:	d005      	beq.n	800313c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	0010      	movs	r0, r2
 8003138:	4798      	blx	r3
    return;
 800313a:	e0c5      	b.n	80032c8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2202      	movs	r2, #2
 8003140:	4013      	ands	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_SPI_IRQHandler+0x58>
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	4013      	ands	r3, r2
 800314a:	d005      	beq.n	8003158 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	0010      	movs	r0, r2
 8003154:	4798      	blx	r3
    return;
 8003156:	e0b7      	b.n	80032c8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2220      	movs	r2, #32
 800315c:	4013      	ands	r3, r2
 800315e:	d109      	bne.n	8003174 <HAL_SPI_IRQHandler+0x74>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2240      	movs	r2, #64	; 0x40
 8003164:	4013      	ands	r3, r2
 8003166:	d105      	bne.n	8003174 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4013      	ands	r3, r2
 8003170:	d100      	bne.n	8003174 <HAL_SPI_IRQHandler+0x74>
 8003172:	e0a9      	b.n	80032c8 <HAL_SPI_IRQHandler+0x1c8>
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2220      	movs	r2, #32
 8003178:	4013      	ands	r3, r2
 800317a:	d100      	bne.n	800317e <HAL_SPI_IRQHandler+0x7e>
 800317c:	e0a4      	b.n	80032c8 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2240      	movs	r2, #64	; 0x40
 8003182:	4013      	ands	r3, r2
 8003184:	d023      	beq.n	80031ce <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2251      	movs	r2, #81	; 0x51
 800318a:	5c9b      	ldrb	r3, [r3, r2]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b03      	cmp	r3, #3
 8003190:	d011      	beq.n	80031b6 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	2204      	movs	r2, #4
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	e00b      	b.n	80031ce <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	693b      	ldr	r3, [r7, #16]
        return;
 80031cc:	e07c      	b.n	80032c8 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2220      	movs	r2, #32
 80031d2:	4013      	ands	r3, r2
 80031d4:	d014      	beq.n	8003200 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	2201      	movs	r2, #1
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2140      	movs	r1, #64	; 0x40
 80031fa:	438a      	bics	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4013      	ands	r3, r2
 8003208:	d00c      	beq.n	8003224 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	2208      	movs	r2, #8
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	2b00      	cmp	r3, #0
 800322a:	d04c      	beq.n	80032c6 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	21e0      	movs	r1, #224	; 0xe0
 8003238:	438a      	bics	r2, r1
 800323a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2251      	movs	r2, #81	; 0x51
 8003240:	2101      	movs	r1, #1
 8003242:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	d103      	bne.n	8003254 <HAL_SPI_IRQHandler+0x154>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2201      	movs	r2, #1
 8003250:	4013      	ands	r3, r2
 8003252:	d032      	beq.n	80032ba <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2103      	movs	r1, #3
 8003260:	438a      	bics	r2, r1
 8003262:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003270:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_SPI_IRQHandler+0x1d0>)
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003278:	0018      	movs	r0, r3
 800327a:	f7fe fc43 	bl	8001b04 <HAL_DMA_Abort_IT>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d005      	beq.n	800328e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_SPI_IRQHandler+0x1d0>)
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7fe fc2e 	bl	8001b04 <HAL_DMA_Abort_IT>
 80032a8:	1e03      	subs	r3, r0, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	2240      	movs	r2, #64	; 0x40
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80032b8:	e004      	b.n	80032c4 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f809 	bl	80032d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80032c2:	e000      	b.n	80032c6 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80032c4:	46c0      	nop			; (mov r8, r8)
    return;
 80032c6:	46c0      	nop			; (mov r8, r8)
  }
}
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b008      	add	sp, #32
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	080032e5 	.word	0x080032e5

080032d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	0018      	movs	r0, r3
 8003302:	f7ff ffe7 	bl	80032d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b004      	add	sp, #16
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e032      	b.n	8003386 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2239      	movs	r2, #57	; 0x39
 8003324:	5c9b      	ldrb	r3, [r3, r2]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d107      	bne.n	800333c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2238      	movs	r2, #56	; 0x38
 8003330:	2100      	movs	r1, #0
 8003332:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	0018      	movs	r0, r3
 8003338:	f7fe f874 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2239      	movs	r2, #57	; 0x39
 8003340:	2102      	movs	r1, #2
 8003342:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	0019      	movs	r1, r3
 800334e:	0010      	movs	r0, r2
 8003350:	f000 f978 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	223e      	movs	r2, #62	; 0x3e
 8003358:	2101      	movs	r1, #1
 800335a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	223a      	movs	r2, #58	; 0x3a
 8003360:	2101      	movs	r1, #1
 8003362:	5499      	strb	r1, [r3, r2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223b      	movs	r2, #59	; 0x3b
 8003368:	2101      	movs	r1, #1
 800336a:	5499      	strb	r1, [r3, r2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	223c      	movs	r2, #60	; 0x3c
 8003370:	2101      	movs	r1, #1
 8003372:	5499      	strb	r1, [r3, r2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	223d      	movs	r2, #61	; 0x3d
 8003378:	2101      	movs	r1, #1
 800337a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2239      	movs	r2, #57	; 0x39
 8003380:	2101      	movs	r1, #1
 8003382:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2239      	movs	r2, #57	; 0x39
 800339c:	5c9b      	ldrb	r3, [r3, r2]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d001      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e03b      	b.n	8003420 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2239      	movs	r2, #57	; 0x39
 80033ac:	2102      	movs	r1, #2
 80033ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2101      	movs	r1, #1
 80033bc:	430a      	orrs	r2, r1
 80033be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	05db      	lsls	r3, r3, #23
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d00e      	beq.n	80033ea <HAL_TIM_Base_Start_IT+0x5a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <HAL_TIM_Base_Start_IT+0x98>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_TIM_Base_Start_IT+0x5a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a14      	ldr	r2, [pc, #80]	; (800342c <HAL_TIM_Base_Start_IT+0x9c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d004      	beq.n	80033ea <HAL_TIM_Base_Start_IT+0x5a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a12      	ldr	r2, [pc, #72]	; (8003430 <HAL_TIM_Base_Start_IT+0xa0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d111      	bne.n	800340e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2207      	movs	r2, #7
 80033f2:	4013      	ands	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b06      	cmp	r3, #6
 80033fa:	d010      	beq.n	800341e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2101      	movs	r1, #1
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340c:	e007      	b.n	800341e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40000400 	.word	0x40000400
 800342c:	40010800 	.word	0x40010800
 8003430:	40011400 	.word	0x40011400

08003434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d124      	bne.n	8003494 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2202      	movs	r2, #2
 8003452:	4013      	ands	r3, r2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d11d      	bne.n	8003494 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2203      	movs	r2, #3
 800345e:	4252      	negs	r2, r2
 8003460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2203      	movs	r2, #3
 8003470:	4013      	ands	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	0018      	movs	r0, r3
 8003478:	f000 f8cc 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 800347c:	e007      	b.n	800348e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	0018      	movs	r0, r3
 8003482:	f000 f8bf 	bl	8003604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f000 f8cb 	bl	8003624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2204      	movs	r2, #4
 800349c:	4013      	ands	r3, r2
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d125      	bne.n	80034ee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2204      	movs	r2, #4
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d11e      	bne.n	80034ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2205      	movs	r2, #5
 80034b6:	4252      	negs	r2, r2
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	23c0      	movs	r3, #192	; 0xc0
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f89f 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 80034d6:	e007      	b.n	80034e8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 f892 	bl	8003604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 f89e 	bl	8003624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2208      	movs	r2, #8
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d124      	bne.n	8003546 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2208      	movs	r2, #8
 8003504:	4013      	ands	r3, r2
 8003506:	2b08      	cmp	r3, #8
 8003508:	d11d      	bne.n	8003546 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2209      	movs	r2, #9
 8003510:	4252      	negs	r2, r2
 8003512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2204      	movs	r2, #4
 8003518:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2203      	movs	r2, #3
 8003522:	4013      	ands	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0018      	movs	r0, r3
 800352a:	f000 f873 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 800352e:	e007      	b.n	8003540 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0018      	movs	r0, r3
 8003534:	f000 f866 	bl	8003604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f872 	bl	8003624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2210      	movs	r2, #16
 800354e:	4013      	ands	r3, r2
 8003550:	2b10      	cmp	r3, #16
 8003552:	d125      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2210      	movs	r2, #16
 800355c:	4013      	ands	r3, r2
 800355e:	2b10      	cmp	r3, #16
 8003560:	d11e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2211      	movs	r2, #17
 8003568:	4252      	negs	r2, r2
 800356a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2208      	movs	r2, #8
 8003570:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	23c0      	movs	r3, #192	; 0xc0
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4013      	ands	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	0018      	movs	r0, r3
 8003584:	f000 f846 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 8003588:	e007      	b.n	800359a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0018      	movs	r0, r3
 800358e:	f000 f839 	bl	8003604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 f845 	bl	8003624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2201      	movs	r2, #1
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10f      	bne.n	80035ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d108      	bne.n	80035ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2202      	movs	r2, #2
 80035c2:	4252      	negs	r2, r2
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7fd f851 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2240      	movs	r2, #64	; 0x40
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d10f      	bne.n	80035fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2240      	movs	r2, #64	; 0x40
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d108      	bne.n	80035fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2241      	movs	r2, #65	; 0x41
 80035f0:	4252      	negs	r2, r2
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 f81c 	bl	8003634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}

08003644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	05db      	lsls	r3, r3, #23
 800365a:	429a      	cmp	r2, r3
 800365c:	d00b      	beq.n	8003676 <TIM_Base_SetConfig+0x32>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <TIM_Base_SetConfig+0xac>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d007      	beq.n	8003676 <TIM_Base_SetConfig+0x32>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <TIM_Base_SetConfig+0xb0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0x32>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <TIM_Base_SetConfig+0xb4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2270      	movs	r2, #112	; 0x70
 800367a:	4393      	bics	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	05db      	lsls	r3, r3, #23
 800368e:	429a      	cmp	r2, r3
 8003690:	d00b      	beq.n	80036aa <TIM_Base_SetConfig+0x66>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <TIM_Base_SetConfig+0xac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <TIM_Base_SetConfig+0x66>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <TIM_Base_SetConfig+0xb0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d003      	beq.n	80036aa <TIM_Base_SetConfig+0x66>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <TIM_Base_SetConfig+0xb4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d108      	bne.n	80036bc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a13      	ldr	r2, [pc, #76]	; (80036fc <TIM_Base_SetConfig+0xb8>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2280      	movs	r2, #128	; 0x80
 80036c0:	4393      	bics	r3, r2
 80036c2:	001a      	movs	r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	615a      	str	r2, [r3, #20]
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40010800 	.word	0x40010800
 80036f8:	40011400 	.word	0x40011400
 80036fc:	fffffcff 	.word	0xfffffcff

08003700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2238      	movs	r2, #56	; 0x38
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003714:	2302      	movs	r3, #2
 8003716:	e047      	b.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2238      	movs	r2, #56	; 0x38
 800371c:	2101      	movs	r1, #1
 800371e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2239      	movs	r2, #57	; 0x39
 8003724:	2102      	movs	r1, #2
 8003726:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2270      	movs	r2, #112	; 0x70
 800373c:	4393      	bics	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	05db      	lsls	r3, r3, #23
 800375a:	429a      	cmp	r2, r3
 800375c:	d00e      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a11      	ldr	r2, [pc, #68]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a10      	ldr	r2, [pc, #64]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10c      	bne.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	4393      	bics	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4313      	orrs	r3, r2
 800378c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2239      	movs	r2, #57	; 0x39
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2238      	movs	r2, #56	; 0x38
 80037a2:	2100      	movs	r1, #0
 80037a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b004      	add	sp, #16
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40010800 	.word	0x40010800
 80037b8:	40011400 	.word	0x40011400

080037bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e044      	b.n	8003858 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d107      	bne.n	80037e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2278      	movs	r2, #120	; 0x78
 80037da:	2100      	movs	r1, #0
 80037dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7fd fe3f 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2224      	movs	r2, #36	; 0x24
 80037ea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2101      	movs	r1, #1
 80037f8:	438a      	bics	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 fc2c 	bl	800405c <UART_SetConfig>
 8003804:	0003      	movs	r3, r0
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e024      	b.n	8003858 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 febd 	bl	8004598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	490d      	ldr	r1, [pc, #52]	; (8003860 <HAL_UART_Init+0xa4>)
 800382a:	400a      	ands	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	212a      	movs	r1, #42	; 0x2a
 800383a:	438a      	bics	r2, r1
 800383c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2101      	movs	r1, #1
 800384a:	430a      	orrs	r2, r1
 800384c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f000 ff55 	bl	8004700 <UART_CheckIdleState>
 8003856:	0003      	movs	r3, r0
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}
 8003860:	ffffb7ff 	.word	0xffffb7ff

08003864 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	1dbb      	adds	r3, r7, #6
 8003872:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003878:	2b20      	cmp	r3, #32
 800387a:	d000      	beq.n	800387e <HAL_UART_Transmit+0x1a>
 800387c:	e08c      	b.n	8003998 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_UART_Transmit+0x28>
 8003884:	1dbb      	adds	r3, r7, #6
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e084      	b.n	800399a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	015b      	lsls	r3, r3, #5
 8003898:	429a      	cmp	r2, r3
 800389a:	d109      	bne.n	80038b0 <HAL_UART_Transmit+0x4c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2201      	movs	r2, #1
 80038a8:	4013      	ands	r3, r2
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e074      	b.n	800399a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2284      	movs	r2, #132	; 0x84
 80038b4:	2100      	movs	r1, #0
 80038b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2221      	movs	r2, #33	; 0x21
 80038bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038be:	f7fd ffd5 	bl	800186c <HAL_GetTick>
 80038c2:	0003      	movs	r3, r0
 80038c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1dba      	adds	r2, r7, #6
 80038ca:	2150      	movs	r1, #80	; 0x50
 80038cc:	8812      	ldrh	r2, [r2, #0]
 80038ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1dba      	adds	r2, r7, #6
 80038d4:	2152      	movs	r1, #82	; 0x52
 80038d6:	8812      	ldrh	r2, [r2, #0]
 80038d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	015b      	lsls	r3, r3, #5
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d108      	bne.n	80038f8 <HAL_UART_Transmit+0x94>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d104      	bne.n	80038f8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e003      	b.n	8003900 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003900:	e02f      	b.n	8003962 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	0013      	movs	r3, r2
 800390c:	2200      	movs	r2, #0
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	f000 ff9e 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 8003914:	1e03      	subs	r3, r0, #0
 8003916:	d004      	beq.n	8003922 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e03b      	b.n	800399a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	001a      	movs	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	05d2      	lsls	r2, r2, #23
 8003934:	0dd2      	lsrs	r2, r2, #23
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	3302      	adds	r3, #2
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	e007      	b.n	8003950 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3301      	adds	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2252      	movs	r2, #82	; 0x52
 8003954:	5a9b      	ldrh	r3, [r3, r2]
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b299      	uxth	r1, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2252      	movs	r2, #82	; 0x52
 8003960:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2252      	movs	r2, #82	; 0x52
 8003966:	5a9b      	ldrh	r3, [r3, r2]
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1c9      	bne.n	8003902 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	0013      	movs	r3, r2
 8003978:	2200      	movs	r2, #0
 800397a:	2140      	movs	r1, #64	; 0x40
 800397c:	f000 ff68 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 8003980:	1e03      	subs	r3, r0, #0
 8003982:	d004      	beq.n	800398e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e005      	b.n	800399a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b008      	add	sp, #32
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	1dbb      	adds	r3, r7, #6
 80039b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	589b      	ldr	r3, [r3, r2]
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d14a      	bne.n	8003a52 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_UART_Receive_IT+0x26>
 80039c2:	1dbb      	adds	r3, r7, #6
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e042      	b.n	8003a54 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	015b      	lsls	r3, r3, #5
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d109      	bne.n	80039ee <HAL_UART_Receive_IT+0x4a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2201      	movs	r2, #1
 80039e6:	4013      	ands	r3, r2
 80039e8:	d001      	beq.n	80039ee <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e032      	b.n	8003a54 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_UART_Receive_IT+0xb8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d020      	beq.n	8003a40 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d019      	beq.n	8003a40 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a10:	613b      	str	r3, [r7, #16]
  return(result);
 8003a12:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	2301      	movs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f383 8810 	msr	PRIMASK, r3
}
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	04c9      	lsls	r1, r1, #19
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f383 8810 	msr	PRIMASK, r3
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a40:	1dbb      	adds	r3, r7, #6
 8003a42:	881a      	ldrh	r2, [r3, #0]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 ff6b 	bl	8004924 <UART_Start_Receive_IT>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	e000      	b.n	8003a54 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
  }
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b008      	add	sp, #32
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40004800 	.word	0x40004800

08003a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b0ab      	sub	sp, #172	; 0xac
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	22a4      	movs	r2, #164	; 0xa4
 8003a70:	18b9      	adds	r1, r7, r2
 8003a72:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	20a0      	movs	r0, #160	; 0xa0
 8003a7c:	1839      	adds	r1, r7, r0
 8003a7e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	219c      	movs	r1, #156	; 0x9c
 8003a88:	1879      	adds	r1, r7, r1
 8003a8a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a8c:	0011      	movs	r1, r2
 8003a8e:	18bb      	adds	r3, r7, r2
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a99      	ldr	r2, [pc, #612]	; (8003cf8 <HAL_UART_IRQHandler+0x298>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	2298      	movs	r2, #152	; 0x98
 8003a98:	18bc      	adds	r4, r7, r2
 8003a9a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003a9c:	18bb      	adds	r3, r7, r2
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d114      	bne.n	8003ace <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d00f      	beq.n	8003ace <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003aae:	183b      	adds	r3, r7, r0
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d00a      	beq.n	8003ace <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d100      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x62>
 8003ac0:	e2a0      	b.n	8004004 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	0010      	movs	r0, r2
 8003aca:	4798      	blx	r3
      }
      return;
 8003acc:	e29a      	b.n	8004004 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ace:	2398      	movs	r3, #152	; 0x98
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d100      	bne.n	8003ada <HAL_UART_IRQHandler+0x7a>
 8003ad8:	e114      	b.n	8003d04 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ada:	239c      	movs	r3, #156	; 0x9c
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ae6:	23a0      	movs	r3, #160	; 0xa0
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a83      	ldr	r2, [pc, #524]	; (8003cfc <HAL_UART_IRQHandler+0x29c>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	d100      	bne.n	8003af4 <HAL_UART_IRQHandler+0x94>
 8003af2:	e107      	b.n	8003d04 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003af4:	23a4      	movs	r3, #164	; 0xa4
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2201      	movs	r2, #1
 8003afc:	4013      	ands	r3, r2
 8003afe:	d012      	beq.n	8003b26 <HAL_UART_IRQHandler+0xc6>
 8003b00:	23a0      	movs	r3, #160	; 0xa0
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d00b      	beq.n	8003b26 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2201      	movs	r2, #1
 8003b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2284      	movs	r2, #132	; 0x84
 8003b1a:	589b      	ldr	r3, [r3, r2]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2184      	movs	r1, #132	; 0x84
 8003b24:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b26:	23a4      	movs	r3, #164	; 0xa4
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d011      	beq.n	8003b56 <HAL_UART_IRQHandler+0xf6>
 8003b32:	239c      	movs	r3, #156	; 0x9c
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d00b      	beq.n	8003b56 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2202      	movs	r2, #2
 8003b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2284      	movs	r2, #132	; 0x84
 8003b4a:	589b      	ldr	r3, [r3, r2]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2184      	movs	r1, #132	; 0x84
 8003b54:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b56:	23a4      	movs	r3, #164	; 0xa4
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d011      	beq.n	8003b86 <HAL_UART_IRQHandler+0x126>
 8003b62:	239c      	movs	r3, #156	; 0x9c
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2204      	movs	r2, #4
 8003b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2284      	movs	r2, #132	; 0x84
 8003b7a:	589b      	ldr	r3, [r3, r2]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2184      	movs	r1, #132	; 0x84
 8003b84:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b86:	23a4      	movs	r3, #164	; 0xa4
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d017      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b92:	23a0      	movs	r3, #160	; 0xa0
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d105      	bne.n	8003baa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b9e:	239c      	movs	r3, #156	; 0x9c
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2208      	movs	r2, #8
 8003bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2284      	movs	r2, #132	; 0x84
 8003bb6:	589b      	ldr	r3, [r3, r2]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2184      	movs	r1, #132	; 0x84
 8003bc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bc2:	23a4      	movs	r3, #164	; 0xa4
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x198>
 8003bd0:	23a0      	movs	r3, #160	; 0xa0
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	04db      	lsls	r3, r3, #19
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d00c      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	0112      	lsls	r2, r2, #4
 8003be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2284      	movs	r2, #132	; 0x84
 8003bec:	589b      	ldr	r3, [r3, r2]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2184      	movs	r1, #132	; 0x84
 8003bf6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2284      	movs	r2, #132	; 0x84
 8003bfc:	589b      	ldr	r3, [r3, r2]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d100      	bne.n	8003c04 <HAL_UART_IRQHandler+0x1a4>
 8003c02:	e201      	b.n	8004008 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c04:	23a4      	movs	r3, #164	; 0xa4
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c10:	23a0      	movs	r3, #160	; 0xa0
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2220      	movs	r2, #32
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d008      	beq.n	8003c2e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	0010      	movs	r0, r2
 8003c2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2284      	movs	r2, #132	; 0x84
 8003c32:	589b      	ldr	r3, [r3, r2]
 8003c34:	2194      	movs	r1, #148	; 0x94
 8003c36:	187a      	adds	r2, r7, r1
 8003c38:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2240      	movs	r2, #64	; 0x40
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d004      	beq.n	8003c52 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2228      	movs	r2, #40	; 0x28
 8003c4e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c50:	d047      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 ff2f 	bl	8004ab8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2240      	movs	r2, #64	; 0x40
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d137      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c68:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c70:	2090      	movs	r0, #144	; 0x90
 8003c72:	183a      	adds	r2, r7, r0
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	2301      	movs	r3, #1
 8003c78:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c7c:	f383 8810 	msr	PRIMASK, r3
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2140      	movs	r1, #64	; 0x40
 8003c8e:	438a      	bics	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	183b      	adds	r3, r7, r0
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c9a:	f383 8810 	msr	PRIMASK, r3
}
 8003c9e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <HAL_UART_IRQHandler+0x2a0>)
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7fd ff25 	bl	8001b04 <HAL_DMA_Abort_IT>
 8003cba:	1e03      	subs	r3, r0, #0
 8003cbc:	d01a      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc8:	0018      	movs	r0, r3
 8003cca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	e012      	b.n	8003cf4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 f9af 	bl	8004034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd6:	e00d      	b.n	8003cf4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 f9aa 	bl	8004034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	e008      	b.n	8003cf4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 f9a5 	bl	8004034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2284      	movs	r2, #132	; 0x84
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003cf2:	e189      	b.n	8004008 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	46c0      	nop			; (mov r8, r8)
    return;
 8003cf6:	e187      	b.n	8004008 <HAL_UART_IRQHandler+0x5a8>
 8003cf8:	0000080f 	.word	0x0000080f
 8003cfc:	04000120 	.word	0x04000120
 8003d00:	08004b81 	.word	0x08004b81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d000      	beq.n	8003d0e <HAL_UART_IRQHandler+0x2ae>
 8003d0c:	e13b      	b.n	8003f86 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d0e:	23a4      	movs	r3, #164	; 0xa4
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2210      	movs	r2, #16
 8003d16:	4013      	ands	r3, r2
 8003d18:	d100      	bne.n	8003d1c <HAL_UART_IRQHandler+0x2bc>
 8003d1a:	e134      	b.n	8003f86 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d1c:	23a0      	movs	r3, #160	; 0xa0
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2210      	movs	r2, #16
 8003d24:	4013      	ands	r3, r2
 8003d26:	d100      	bne.n	8003d2a <HAL_UART_IRQHandler+0x2ca>
 8003d28:	e12d      	b.n	8003f86 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2210      	movs	r2, #16
 8003d30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2240      	movs	r2, #64	; 0x40
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d000      	beq.n	8003d42 <HAL_UART_IRQHandler+0x2e2>
 8003d40:	e0a1      	b.n	8003e86 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	217e      	movs	r1, #126	; 0x7e
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d100      	bne.n	8003d5a <HAL_UART_IRQHandler+0x2fa>
 8003d58:	e158      	b.n	800400c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2258      	movs	r2, #88	; 0x58
 8003d5e:	5a9b      	ldrh	r3, [r3, r2]
 8003d60:	187a      	adds	r2, r7, r1
 8003d62:	8812      	ldrh	r2, [r2, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d300      	bcc.n	8003d6a <HAL_UART_IRQHandler+0x30a>
 8003d68:	e150      	b.n	800400c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	187a      	adds	r2, r7, r1
 8003d6e:	215a      	movs	r1, #90	; 0x5a
 8003d70:	8812      	ldrh	r2, [r2, #0]
 8003d72:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d16f      	bne.n	8003e62 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d82:	f3ef 8310 	mrs	r3, PRIMASK
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d92:	f383 8810 	msr	PRIMASK, r3
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	499e      	ldr	r1, [pc, #632]	; (800401c <HAL_UART_IRQHandler+0x5bc>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003daa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	f383 8810 	msr	PRIMASK, r3
}
 8003db2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db4:	f3ef 8310 	mrs	r3, PRIMASK
 8003db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	677b      	str	r3, [r7, #116]	; 0x74
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc4:	f383 8810 	msr	PRIMASK, r3
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	438a      	bics	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ddc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de0:	f383 8810 	msr	PRIMASK, r3
}
 8003de4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dee:	673b      	str	r3, [r7, #112]	; 0x70
 8003df0:	2301      	movs	r3, #1
 8003df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df6:	f383 8810 	msr	PRIMASK, r3
}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2140      	movs	r1, #64	; 0x40
 8003e08:	438a      	bics	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e0e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e30:	2301      	movs	r3, #1
 8003e32:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2110      	movs	r1, #16
 8003e48:	438a      	bics	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fd fe11 	bl	8001a84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2258      	movs	r2, #88	; 0x58
 8003e6c:	5a9a      	ldrh	r2, [r3, r2]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	215a      	movs	r1, #90	; 0x5a
 8003e72:	5a5b      	ldrh	r3, [r3, r1]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0011      	movs	r1, r2
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f000 f8e0 	bl	8004044 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e84:	e0c2      	b.n	800400c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2258      	movs	r2, #88	; 0x58
 8003e8a:	5a99      	ldrh	r1, [r3, r2]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	225a      	movs	r2, #90	; 0x5a
 8003e90:	5a9b      	ldrh	r3, [r3, r2]
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	208e      	movs	r0, #142	; 0x8e
 8003e96:	183b      	adds	r3, r7, r0
 8003e98:	1a8a      	subs	r2, r1, r2
 8003e9a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	225a      	movs	r2, #90	; 0x5a
 8003ea0:	5a9b      	ldrh	r3, [r3, r2]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d100      	bne.n	8003eaa <HAL_UART_IRQHandler+0x44a>
 8003ea8:	e0b2      	b.n	8004010 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003eaa:	183b      	adds	r3, r7, r0
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d100      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x454>
 8003eb2:	e0ad      	b.n	8004010 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebc:	2488      	movs	r4, #136	; 0x88
 8003ebe:	193a      	adds	r2, r7, r4
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f383 8810 	msr	PRIMASK, r3
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4951      	ldr	r1, [pc, #324]	; (8004020 <HAL_UART_IRQHandler+0x5c0>)
 8003eda:	400a      	ands	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ef2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	2484      	movs	r4, #132	; 0x84
 8003ef6:	193a      	adds	r2, r7, r4
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	2301      	movs	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f383 8810 	msr	PRIMASK, r3
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2101      	movs	r1, #1
 8003f12:	438a      	bics	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	193b      	adds	r3, r7, r4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f383 8810 	msr	PRIMASK, r3
}
 8003f22:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	2120      	movs	r1, #32
 8003f2a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f38:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f40:	2480      	movs	r4, #128	; 0x80
 8003f42:	193a      	adds	r2, r7, r4
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	2301      	movs	r3, #1
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2110      	movs	r1, #16
 8003f5e:	438a      	bics	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	193b      	adds	r3, r7, r4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	f383 8810 	msr	PRIMASK, r3
}
 8003f6e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f76:	183b      	adds	r3, r7, r0
 8003f78:	881a      	ldrh	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0011      	movs	r1, r2
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f000 f860 	bl	8004044 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f84:	e044      	b.n	8004010 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f86:	23a4      	movs	r3, #164	; 0xa4
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	035b      	lsls	r3, r3, #13
 8003f90:	4013      	ands	r3, r2
 8003f92:	d010      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x556>
 8003f94:	239c      	movs	r3, #156	; 0x9c
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	03db      	lsls	r3, r3, #15
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	0352      	lsls	r2, r2, #13
 8003faa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f000 ffec 	bl	8004f8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fb4:	e02f      	b.n	8004016 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fb6:	23a4      	movs	r3, #164	; 0xa4
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2280      	movs	r2, #128	; 0x80
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fc2:	23a0      	movs	r3, #160	; 0xa0
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01e      	beq.n	8004014 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	0010      	movs	r0, r2
 8003fde:	4798      	blx	r3
    }
    return;
 8003fe0:	e018      	b.n	8004014 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fe2:	23a4      	movs	r3, #164	; 0xa4
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	4013      	ands	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_UART_IRQHandler+0x5b6>
 8003fee:	23a0      	movs	r3, #160	; 0xa0
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2240      	movs	r2, #64	; 0x40
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d00d      	beq.n	8004016 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 fdd6 	bl	8004bae <UART_EndTransmit_IT>
    return;
 8004002:	e008      	b.n	8004016 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	e006      	b.n	8004016 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	e004      	b.n	8004016 <HAL_UART_IRQHandler+0x5b6>
      return;
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	e002      	b.n	8004016 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	e000      	b.n	8004016 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004014:	46c0      	nop			; (mov r8, r8)
  }

}
 8004016:	46bd      	mov	sp, r7
 8004018:	b02b      	add	sp, #172	; 0xac
 800401a:	bd90      	pop	{r4, r7, pc}
 800401c:	fffffeff 	.word	0xfffffeff
 8004020:	fffffedf 	.word	0xfffffedf

08004024 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b002      	add	sp, #8
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b002      	add	sp, #8
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	000a      	movs	r2, r1
 800404e:	1cbb      	adds	r3, r7, #2
 8004050:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b002      	add	sp, #8
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800405c:	b5b0      	push	{r4, r5, r7, lr}
 800405e:	b08e      	sub	sp, #56	; 0x38
 8004060:	af00      	add	r7, sp, #0
 8004062:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004064:	231a      	movs	r3, #26
 8004066:	2218      	movs	r2, #24
 8004068:	189b      	adds	r3, r3, r2
 800406a:	19db      	adds	r3, r3, r7
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	431a      	orrs	r2, r3
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	431a      	orrs	r2, r3
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4313      	orrs	r3, r2
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4ac3      	ldr	r2, [pc, #780]	; (800439c <UART_SetConfig+0x340>)
 8004090:	4013      	ands	r3, r2
 8004092:	0019      	movs	r1, r3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409a:	430a      	orrs	r2, r1
 800409c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4abe      	ldr	r2, [pc, #760]	; (80043a0 <UART_SetConfig+0x344>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	0019      	movs	r1, r3
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4ab8      	ldr	r2, [pc, #736]	; (80043a4 <UART_SetConfig+0x348>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040cc:	4313      	orrs	r3, r2
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	4ab4      	ldr	r2, [pc, #720]	; (80043a8 <UART_SetConfig+0x34c>)
 80040d8:	4013      	ands	r3, r2
 80040da:	0019      	movs	r1, r3
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e2:	430a      	orrs	r2, r1
 80040e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4ab0      	ldr	r2, [pc, #704]	; (80043ac <UART_SetConfig+0x350>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d131      	bne.n	8004154 <UART_SetConfig+0xf8>
 80040f0:	4baf      	ldr	r3, [pc, #700]	; (80043b0 <UART_SetConfig+0x354>)
 80040f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f4:	2203      	movs	r2, #3
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d01d      	beq.n	8004138 <UART_SetConfig+0xdc>
 80040fc:	d823      	bhi.n	8004146 <UART_SetConfig+0xea>
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d00c      	beq.n	800411c <UART_SetConfig+0xc0>
 8004102:	d820      	bhi.n	8004146 <UART_SetConfig+0xea>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <UART_SetConfig+0xb2>
 8004108:	2b01      	cmp	r3, #1
 800410a:	d00e      	beq.n	800412a <UART_SetConfig+0xce>
 800410c:	e01b      	b.n	8004146 <UART_SetConfig+0xea>
 800410e:	231b      	movs	r3, #27
 8004110:	2218      	movs	r2, #24
 8004112:	189b      	adds	r3, r3, r2
 8004114:	19db      	adds	r3, r3, r7
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e0b4      	b.n	8004286 <UART_SetConfig+0x22a>
 800411c:	231b      	movs	r3, #27
 800411e:	2218      	movs	r2, #24
 8004120:	189b      	adds	r3, r3, r2
 8004122:	19db      	adds	r3, r3, r7
 8004124:	2202      	movs	r2, #2
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	e0ad      	b.n	8004286 <UART_SetConfig+0x22a>
 800412a:	231b      	movs	r3, #27
 800412c:	2218      	movs	r2, #24
 800412e:	189b      	adds	r3, r3, r2
 8004130:	19db      	adds	r3, r3, r7
 8004132:	2204      	movs	r2, #4
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	e0a6      	b.n	8004286 <UART_SetConfig+0x22a>
 8004138:	231b      	movs	r3, #27
 800413a:	2218      	movs	r2, #24
 800413c:	189b      	adds	r3, r3, r2
 800413e:	19db      	adds	r3, r3, r7
 8004140:	2208      	movs	r2, #8
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e09f      	b.n	8004286 <UART_SetConfig+0x22a>
 8004146:	231b      	movs	r3, #27
 8004148:	2218      	movs	r2, #24
 800414a:	189b      	adds	r3, r3, r2
 800414c:	19db      	adds	r3, r3, r7
 800414e:	2210      	movs	r2, #16
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e098      	b.n	8004286 <UART_SetConfig+0x22a>
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a96      	ldr	r2, [pc, #600]	; (80043b4 <UART_SetConfig+0x358>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d131      	bne.n	80041c2 <UART_SetConfig+0x166>
 800415e:	4b94      	ldr	r3, [pc, #592]	; (80043b0 <UART_SetConfig+0x354>)
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	220c      	movs	r2, #12
 8004164:	4013      	ands	r3, r2
 8004166:	2b0c      	cmp	r3, #12
 8004168:	d01d      	beq.n	80041a6 <UART_SetConfig+0x14a>
 800416a:	d823      	bhi.n	80041b4 <UART_SetConfig+0x158>
 800416c:	2b08      	cmp	r3, #8
 800416e:	d00c      	beq.n	800418a <UART_SetConfig+0x12e>
 8004170:	d820      	bhi.n	80041b4 <UART_SetConfig+0x158>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <UART_SetConfig+0x120>
 8004176:	2b04      	cmp	r3, #4
 8004178:	d00e      	beq.n	8004198 <UART_SetConfig+0x13c>
 800417a:	e01b      	b.n	80041b4 <UART_SetConfig+0x158>
 800417c:	231b      	movs	r3, #27
 800417e:	2218      	movs	r2, #24
 8004180:	189b      	adds	r3, r3, r2
 8004182:	19db      	adds	r3, r3, r7
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e07d      	b.n	8004286 <UART_SetConfig+0x22a>
 800418a:	231b      	movs	r3, #27
 800418c:	2218      	movs	r2, #24
 800418e:	189b      	adds	r3, r3, r2
 8004190:	19db      	adds	r3, r3, r7
 8004192:	2202      	movs	r2, #2
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e076      	b.n	8004286 <UART_SetConfig+0x22a>
 8004198:	231b      	movs	r3, #27
 800419a:	2218      	movs	r2, #24
 800419c:	189b      	adds	r3, r3, r2
 800419e:	19db      	adds	r3, r3, r7
 80041a0:	2204      	movs	r2, #4
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e06f      	b.n	8004286 <UART_SetConfig+0x22a>
 80041a6:	231b      	movs	r3, #27
 80041a8:	2218      	movs	r2, #24
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	19db      	adds	r3, r3, r7
 80041ae:	2208      	movs	r2, #8
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e068      	b.n	8004286 <UART_SetConfig+0x22a>
 80041b4:	231b      	movs	r3, #27
 80041b6:	2218      	movs	r2, #24
 80041b8:	189b      	adds	r3, r3, r2
 80041ba:	19db      	adds	r3, r3, r7
 80041bc:	2210      	movs	r2, #16
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e061      	b.n	8004286 <UART_SetConfig+0x22a>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7c      	ldr	r2, [pc, #496]	; (80043b8 <UART_SetConfig+0x35c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d106      	bne.n	80041da <UART_SetConfig+0x17e>
 80041cc:	231b      	movs	r3, #27
 80041ce:	2218      	movs	r2, #24
 80041d0:	189b      	adds	r3, r3, r2
 80041d2:	19db      	adds	r3, r3, r7
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e055      	b.n	8004286 <UART_SetConfig+0x22a>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a77      	ldr	r2, [pc, #476]	; (80043bc <UART_SetConfig+0x360>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d106      	bne.n	80041f2 <UART_SetConfig+0x196>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2218      	movs	r2, #24
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e049      	b.n	8004286 <UART_SetConfig+0x22a>
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6b      	ldr	r2, [pc, #428]	; (80043a4 <UART_SetConfig+0x348>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d13e      	bne.n	800427a <UART_SetConfig+0x21e>
 80041fc:	4b6c      	ldr	r3, [pc, #432]	; (80043b0 <UART_SetConfig+0x354>)
 80041fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004200:	23c0      	movs	r3, #192	; 0xc0
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	4013      	ands	r3, r2
 8004206:	22c0      	movs	r2, #192	; 0xc0
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	4293      	cmp	r3, r2
 800420c:	d027      	beq.n	800425e <UART_SetConfig+0x202>
 800420e:	22c0      	movs	r2, #192	; 0xc0
 8004210:	0112      	lsls	r2, r2, #4
 8004212:	4293      	cmp	r3, r2
 8004214:	d82a      	bhi.n	800426c <UART_SetConfig+0x210>
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	0112      	lsls	r2, r2, #4
 800421a:	4293      	cmp	r3, r2
 800421c:	d011      	beq.n	8004242 <UART_SetConfig+0x1e6>
 800421e:	2280      	movs	r2, #128	; 0x80
 8004220:	0112      	lsls	r2, r2, #4
 8004222:	4293      	cmp	r3, r2
 8004224:	d822      	bhi.n	800426c <UART_SetConfig+0x210>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d004      	beq.n	8004234 <UART_SetConfig+0x1d8>
 800422a:	2280      	movs	r2, #128	; 0x80
 800422c:	00d2      	lsls	r2, r2, #3
 800422e:	4293      	cmp	r3, r2
 8004230:	d00e      	beq.n	8004250 <UART_SetConfig+0x1f4>
 8004232:	e01b      	b.n	800426c <UART_SetConfig+0x210>
 8004234:	231b      	movs	r3, #27
 8004236:	2218      	movs	r2, #24
 8004238:	189b      	adds	r3, r3, r2
 800423a:	19db      	adds	r3, r3, r7
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	e021      	b.n	8004286 <UART_SetConfig+0x22a>
 8004242:	231b      	movs	r3, #27
 8004244:	2218      	movs	r2, #24
 8004246:	189b      	adds	r3, r3, r2
 8004248:	19db      	adds	r3, r3, r7
 800424a:	2202      	movs	r2, #2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e01a      	b.n	8004286 <UART_SetConfig+0x22a>
 8004250:	231b      	movs	r3, #27
 8004252:	2218      	movs	r2, #24
 8004254:	189b      	adds	r3, r3, r2
 8004256:	19db      	adds	r3, r3, r7
 8004258:	2204      	movs	r2, #4
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e013      	b.n	8004286 <UART_SetConfig+0x22a>
 800425e:	231b      	movs	r3, #27
 8004260:	2218      	movs	r2, #24
 8004262:	189b      	adds	r3, r3, r2
 8004264:	19db      	adds	r3, r3, r7
 8004266:	2208      	movs	r2, #8
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e00c      	b.n	8004286 <UART_SetConfig+0x22a>
 800426c:	231b      	movs	r3, #27
 800426e:	2218      	movs	r2, #24
 8004270:	189b      	adds	r3, r3, r2
 8004272:	19db      	adds	r3, r3, r7
 8004274:	2210      	movs	r2, #16
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e005      	b.n	8004286 <UART_SetConfig+0x22a>
 800427a:	231b      	movs	r3, #27
 800427c:	2218      	movs	r2, #24
 800427e:	189b      	adds	r3, r3, r2
 8004280:	19db      	adds	r3, r3, r7
 8004282:	2210      	movs	r2, #16
 8004284:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a46      	ldr	r2, [pc, #280]	; (80043a4 <UART_SetConfig+0x348>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d000      	beq.n	8004292 <UART_SetConfig+0x236>
 8004290:	e09a      	b.n	80043c8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004292:	231b      	movs	r3, #27
 8004294:	2218      	movs	r2, #24
 8004296:	189b      	adds	r3, r3, r2
 8004298:	19db      	adds	r3, r3, r7
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d01d      	beq.n	80042dc <UART_SetConfig+0x280>
 80042a0:	dc20      	bgt.n	80042e4 <UART_SetConfig+0x288>
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d015      	beq.n	80042d2 <UART_SetConfig+0x276>
 80042a6:	dc1d      	bgt.n	80042e4 <UART_SetConfig+0x288>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <UART_SetConfig+0x256>
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d005      	beq.n	80042bc <UART_SetConfig+0x260>
 80042b0:	e018      	b.n	80042e4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b2:	f7fe fd1b 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80042b6:	0003      	movs	r3, r0
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ba:	e01c      	b.n	80042f6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042bc:	4b3c      	ldr	r3, [pc, #240]	; (80043b0 <UART_SetConfig+0x354>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2210      	movs	r2, #16
 80042c2:	4013      	ands	r3, r2
 80042c4:	d002      	beq.n	80042cc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042c6:	4b3e      	ldr	r3, [pc, #248]	; (80043c0 <UART_SetConfig+0x364>)
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042ca:	e014      	b.n	80042f6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80042cc:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <UART_SetConfig+0x368>)
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042d0:	e011      	b.n	80042f6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d2:	f7fe fc5b 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 80042d6:	0003      	movs	r3, r0
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042da:	e00c      	b.n	80042f6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042e2:	e008      	b.n	80042f6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80042e8:	231a      	movs	r3, #26
 80042ea:	2218      	movs	r2, #24
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	19db      	adds	r3, r3, r7
 80042f0:	2201      	movs	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]
        break;
 80042f4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d100      	bne.n	80042fe <UART_SetConfig+0x2a2>
 80042fc:	e133      	b.n	8004566 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	0013      	movs	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	189b      	adds	r3, r3, r2
 8004308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800430a:	429a      	cmp	r2, r3
 800430c:	d305      	bcc.n	800431a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004316:	429a      	cmp	r2, r3
 8004318:	d906      	bls.n	8004328 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800431a:	231a      	movs	r3, #26
 800431c:	2218      	movs	r2, #24
 800431e:	189b      	adds	r3, r3, r2
 8004320:	19db      	adds	r3, r3, r7
 8004322:	2201      	movs	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e11e      	b.n	8004566 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	6939      	ldr	r1, [r7, #16]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	000b      	movs	r3, r1
 8004336:	0e1b      	lsrs	r3, r3, #24
 8004338:	0010      	movs	r0, r2
 800433a:	0205      	lsls	r5, r0, #8
 800433c:	431d      	orrs	r5, r3
 800433e:	000b      	movs	r3, r1
 8004340:	021c      	lsls	r4, r3, #8
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	68b8      	ldr	r0, [r7, #8]
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	1900      	adds	r0, r0, r4
 8004354:	4169      	adcs	r1, r5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	2300      	movs	r3, #0
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f7fb ff6e 	bl	8000244 <__aeabi_uldivmod>
 8004368:	0002      	movs	r2, r0
 800436a:	000b      	movs	r3, r1
 800436c:	0013      	movs	r3, r2
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004372:	23c0      	movs	r3, #192	; 0xc0
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	429a      	cmp	r2, r3
 8004378:	d309      	bcc.n	800438e <UART_SetConfig+0x332>
 800437a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	035b      	lsls	r3, r3, #13
 8004380:	429a      	cmp	r2, r3
 8004382:	d204      	bcs.n	800438e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800438a:	60da      	str	r2, [r3, #12]
 800438c:	e0eb      	b.n	8004566 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800438e:	231a      	movs	r3, #26
 8004390:	2218      	movs	r2, #24
 8004392:	189b      	adds	r3, r3, r2
 8004394:	19db      	adds	r3, r3, r7
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e0e4      	b.n	8004566 <UART_SetConfig+0x50a>
 800439c:	efff69f3 	.word	0xefff69f3
 80043a0:	ffffcfff 	.word	0xffffcfff
 80043a4:	40004800 	.word	0x40004800
 80043a8:	fffff4ff 	.word	0xfffff4ff
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40004400 	.word	0x40004400
 80043b8:	40004c00 	.word	0x40004c00
 80043bc:	40005000 	.word	0x40005000
 80043c0:	003d0900 	.word	0x003d0900
 80043c4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d000      	beq.n	80043d6 <UART_SetConfig+0x37a>
 80043d4:	e070      	b.n	80044b8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80043d6:	231b      	movs	r3, #27
 80043d8:	2218      	movs	r2, #24
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	19db      	adds	r3, r3, r7
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d822      	bhi.n	800442a <UART_SetConfig+0x3ce>
 80043e4:	009a      	lsls	r2, r3, #2
 80043e6:	4b67      	ldr	r3, [pc, #412]	; (8004584 <UART_SetConfig+0x528>)
 80043e8:	18d3      	adds	r3, r2, r3
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ee:	f7fe fc7d 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80043f2:	0003      	movs	r3, r0
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043f6:	e021      	b.n	800443c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe fc8e 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 80043fc:	0003      	movs	r3, r0
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004400:	e01c      	b.n	800443c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004402:	4b61      	ldr	r3, [pc, #388]	; (8004588 <UART_SetConfig+0x52c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2210      	movs	r2, #16
 8004408:	4013      	ands	r3, r2
 800440a:	d002      	beq.n	8004412 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800440c:	4b5f      	ldr	r3, [pc, #380]	; (800458c <UART_SetConfig+0x530>)
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004410:	e014      	b.n	800443c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004412:	4b5f      	ldr	r3, [pc, #380]	; (8004590 <UART_SetConfig+0x534>)
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004416:	e011      	b.n	800443c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004418:	f7fe fbb8 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 800441c:	0003      	movs	r3, r0
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004420:	e00c      	b.n	800443c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004428:	e008      	b.n	800443c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800442e:	231a      	movs	r3, #26
 8004430:	2218      	movs	r2, #24
 8004432:	189b      	adds	r3, r3, r2
 8004434:	19db      	adds	r3, r3, r7
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
        break;
 800443a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d100      	bne.n	8004444 <UART_SetConfig+0x3e8>
 8004442:	e090      	b.n	8004566 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	005a      	lsls	r2, r3, #1
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	18d2      	adds	r2, r2, r3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	0019      	movs	r1, r3
 8004456:	0010      	movs	r0, r2
 8004458:	f7fb fe68 	bl	800012c <__udivsi3>
 800445c:	0003      	movs	r3, r0
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	2b0f      	cmp	r3, #15
 8004464:	d921      	bls.n	80044aa <UART_SetConfig+0x44e>
 8004466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	025b      	lsls	r3, r3, #9
 800446c:	429a      	cmp	r2, r3
 800446e:	d21c      	bcs.n	80044aa <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	b29a      	uxth	r2, r3
 8004474:	200e      	movs	r0, #14
 8004476:	2418      	movs	r4, #24
 8004478:	1903      	adds	r3, r0, r4
 800447a:	19db      	adds	r3, r3, r7
 800447c:	210f      	movs	r1, #15
 800447e:	438a      	bics	r2, r1
 8004480:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	2207      	movs	r2, #7
 800448a:	4013      	ands	r3, r2
 800448c:	b299      	uxth	r1, r3
 800448e:	1903      	adds	r3, r0, r4
 8004490:	19db      	adds	r3, r3, r7
 8004492:	1902      	adds	r2, r0, r4
 8004494:	19d2      	adds	r2, r2, r7
 8004496:	8812      	ldrh	r2, [r2, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	1902      	adds	r2, r0, r4
 80044a2:	19d2      	adds	r2, r2, r7
 80044a4:	8812      	ldrh	r2, [r2, #0]
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	e05d      	b.n	8004566 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80044aa:	231a      	movs	r3, #26
 80044ac:	2218      	movs	r2, #24
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	19db      	adds	r3, r3, r7
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	e056      	b.n	8004566 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044b8:	231b      	movs	r3, #27
 80044ba:	2218      	movs	r2, #24
 80044bc:	189b      	adds	r3, r3, r2
 80044be:	19db      	adds	r3, r3, r7
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d822      	bhi.n	800450c <UART_SetConfig+0x4b0>
 80044c6:	009a      	lsls	r2, r3, #2
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <UART_SetConfig+0x538>)
 80044ca:	18d3      	adds	r3, r2, r3
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fe fc0c 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80044d4:	0003      	movs	r3, r0
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044d8:	e021      	b.n	800451e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044da:	f7fe fc1d 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 80044de:	0003      	movs	r3, r0
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044e2:	e01c      	b.n	800451e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e4:	4b28      	ldr	r3, [pc, #160]	; (8004588 <UART_SetConfig+0x52c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2210      	movs	r2, #16
 80044ea:	4013      	ands	r3, r2
 80044ec:	d002      	beq.n	80044f4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80044ee:	4b27      	ldr	r3, [pc, #156]	; (800458c <UART_SetConfig+0x530>)
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80044f2:	e014      	b.n	800451e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80044f4:	4b26      	ldr	r3, [pc, #152]	; (8004590 <UART_SetConfig+0x534>)
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044f8:	e011      	b.n	800451e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fa:	f7fe fb47 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 80044fe:	0003      	movs	r3, r0
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004502:	e00c      	b.n	800451e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800450a:	e008      	b.n	800451e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004510:	231a      	movs	r3, #26
 8004512:	2218      	movs	r2, #24
 8004514:	189b      	adds	r3, r3, r2
 8004516:	19db      	adds	r3, r3, r7
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
        break;
 800451c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	085a      	lsrs	r2, r3, #1
 800452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452c:	18d2      	adds	r2, r2, r3
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	0019      	movs	r1, r3
 8004534:	0010      	movs	r0, r2
 8004536:	f7fb fdf9 	bl	800012c <__udivsi3>
 800453a:	0003      	movs	r3, r0
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	2b0f      	cmp	r3, #15
 8004542:	d90a      	bls.n	800455a <UART_SetConfig+0x4fe>
 8004544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	025b      	lsls	r3, r3, #9
 800454a:	429a      	cmp	r2, r3
 800454c:	d205      	bcs.n	800455a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	b29a      	uxth	r2, r3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60da      	str	r2, [r3, #12]
 8004558:	e005      	b.n	8004566 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800455a:	231a      	movs	r3, #26
 800455c:	2218      	movs	r2, #24
 800455e:	189b      	adds	r3, r3, r2
 8004560:	19db      	adds	r3, r3, r7
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	2200      	movs	r2, #0
 800456a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2200      	movs	r2, #0
 8004570:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004572:	231a      	movs	r3, #26
 8004574:	2218      	movs	r2, #24
 8004576:	189b      	adds	r3, r3, r2
 8004578:	19db      	adds	r3, r3, r7
 800457a:	781b      	ldrb	r3, [r3, #0]
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b00e      	add	sp, #56	; 0x38
 8004582:	bdb0      	pop	{r4, r5, r7, pc}
 8004584:	08005a0c 	.word	0x08005a0c
 8004588:	40021000 	.word	0x40021000
 800458c:	003d0900 	.word	0x003d0900
 8004590:	00f42400 	.word	0x00f42400
 8004594:	08005a30 	.word	0x08005a30

08004598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2201      	movs	r2, #1
 80045a6:	4013      	ands	r3, r2
 80045a8:	d00b      	beq.n	80045c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a4a      	ldr	r2, [pc, #296]	; (80046dc <UART_AdvFeatureConfig+0x144>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	0019      	movs	r1, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	2202      	movs	r2, #2
 80045c8:	4013      	ands	r3, r2
 80045ca:	d00b      	beq.n	80045e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4a43      	ldr	r2, [pc, #268]	; (80046e0 <UART_AdvFeatureConfig+0x148>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2204      	movs	r2, #4
 80045ea:	4013      	ands	r3, r2
 80045ec:	d00b      	beq.n	8004606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a3b      	ldr	r2, [pc, #236]	; (80046e4 <UART_AdvFeatureConfig+0x14c>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	0019      	movs	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2208      	movs	r2, #8
 800460c:	4013      	ands	r3, r2
 800460e:	d00b      	beq.n	8004628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4a34      	ldr	r2, [pc, #208]	; (80046e8 <UART_AdvFeatureConfig+0x150>)
 8004618:	4013      	ands	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	2210      	movs	r2, #16
 800462e:	4013      	ands	r3, r2
 8004630:	d00b      	beq.n	800464a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a2c      	ldr	r2, [pc, #176]	; (80046ec <UART_AdvFeatureConfig+0x154>)
 800463a:	4013      	ands	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	2220      	movs	r2, #32
 8004650:	4013      	ands	r3, r2
 8004652:	d00b      	beq.n	800466c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	4a25      	ldr	r2, [pc, #148]	; (80046f0 <UART_AdvFeatureConfig+0x158>)
 800465c:	4013      	ands	r3, r2
 800465e:	0019      	movs	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2240      	movs	r2, #64	; 0x40
 8004672:	4013      	ands	r3, r2
 8004674:	d01d      	beq.n	80046b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <UART_AdvFeatureConfig+0x15c>)
 800467e:	4013      	ands	r3, r2
 8004680:	0019      	movs	r1, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004692:	2380      	movs	r3, #128	; 0x80
 8004694:	035b      	lsls	r3, r3, #13
 8004696:	429a      	cmp	r2, r3
 8004698:	d10b      	bne.n	80046b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <UART_AdvFeatureConfig+0x160>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0019      	movs	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2280      	movs	r2, #128	; 0x80
 80046b8:	4013      	ands	r3, r2
 80046ba:	d00b      	beq.n	80046d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <UART_AdvFeatureConfig+0x164>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	0019      	movs	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
  }
}
 80046d4:	46c0      	nop			; (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b002      	add	sp, #8
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	fffdffff 	.word	0xfffdffff
 80046e0:	fffeffff 	.word	0xfffeffff
 80046e4:	fffbffff 	.word	0xfffbffff
 80046e8:	ffff7fff 	.word	0xffff7fff
 80046ec:	ffffefff 	.word	0xffffefff
 80046f0:	ffffdfff 	.word	0xffffdfff
 80046f4:	ffefffff 	.word	0xffefffff
 80046f8:	ff9fffff 	.word	0xff9fffff
 80046fc:	fff7ffff 	.word	0xfff7ffff

08004700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b092      	sub	sp, #72	; 0x48
 8004704:	af02      	add	r7, sp, #8
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2284      	movs	r2, #132	; 0x84
 800470c:	2100      	movs	r1, #0
 800470e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004710:	f7fd f8ac 	bl	800186c <HAL_GetTick>
 8004714:	0003      	movs	r3, r0
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2208      	movs	r2, #8
 8004720:	4013      	ands	r3, r2
 8004722:	2b08      	cmp	r3, #8
 8004724:	d12c      	bne.n	8004780 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	0391      	lsls	r1, r2, #14
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	4a46      	ldr	r2, [pc, #280]	; (8004848 <UART_CheckIdleState+0x148>)
 8004730:	9200      	str	r2, [sp, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	f000 f88c 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 8004738:	1e03      	subs	r3, r0, #0
 800473a:	d021      	beq.n	8004780 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473c:	f3ef 8310 	mrs	r3, PRIMASK
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004744:	63bb      	str	r3, [r7, #56]	; 0x38
 8004746:	2301      	movs	r3, #1
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	f383 8810 	msr	PRIMASK, r3
}
 8004750:	46c0      	nop			; (mov r8, r8)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2180      	movs	r1, #128	; 0x80
 800475e:	438a      	bics	r2, r1
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	f383 8810 	msr	PRIMASK, r3
}
 800476c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2278      	movs	r2, #120	; 0x78
 8004778:	2100      	movs	r1, #0
 800477a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e05f      	b.n	8004840 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2204      	movs	r2, #4
 8004788:	4013      	ands	r3, r2
 800478a:	2b04      	cmp	r3, #4
 800478c:	d146      	bne.n	800481c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	03d1      	lsls	r1, r2, #15
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	4a2c      	ldr	r2, [pc, #176]	; (8004848 <UART_CheckIdleState+0x148>)
 8004798:	9200      	str	r2, [sp, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	f000 f858 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 80047a0:	1e03      	subs	r3, r0, #0
 80047a2:	d03b      	beq.n	800481c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a4:	f3ef 8310 	mrs	r3, PRIMASK
 80047a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80047aa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
 80047ae:	2301      	movs	r3, #1
 80047b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f383 8810 	msr	PRIMASK, r3
}
 80047b8:	46c0      	nop			; (mov r8, r8)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4921      	ldr	r1, [pc, #132]	; (800484c <UART_CheckIdleState+0x14c>)
 80047c6:	400a      	ands	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d6:	f3ef 8310 	mrs	r3, PRIMASK
 80047da:	61bb      	str	r3, [r7, #24]
  return(result);
 80047dc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
 80047e0:	2301      	movs	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2101      	movs	r1, #1
 80047f8:	438a      	bics	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	f383 8810 	msr	PRIMASK, r3
}
 8004806:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	2120      	movs	r1, #32
 800480e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2278      	movs	r2, #120	; 0x78
 8004814:	2100      	movs	r1, #0
 8004816:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e011      	b.n	8004840 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2280      	movs	r2, #128	; 0x80
 8004826:	2120      	movs	r1, #32
 8004828:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2278      	movs	r2, #120	; 0x78
 800483a:	2100      	movs	r1, #0
 800483c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	b010      	add	sp, #64	; 0x40
 8004846:	bd80      	pop	{r7, pc}
 8004848:	01ffffff 	.word	0x01ffffff
 800484c:	fffffedf 	.word	0xfffffedf

08004850 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004860:	e04b      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	3301      	adds	r3, #1
 8004866:	d048      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004868:	f7fd f800 	bl	800186c <HAL_GetTick>
 800486c:	0002      	movs	r2, r0
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	429a      	cmp	r2, r3
 8004876:	d302      	bcc.n	800487e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e04b      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2204      	movs	r2, #4
 800488a:	4013      	ands	r3, r2
 800488c:	d035      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	2208      	movs	r2, #8
 8004896:	4013      	ands	r3, r2
 8004898:	2b08      	cmp	r3, #8
 800489a:	d111      	bne.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2208      	movs	r2, #8
 80048a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 f906 	bl	8004ab8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2284      	movs	r2, #132	; 0x84
 80048b0:	2108      	movs	r1, #8
 80048b2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2278      	movs	r2, #120	; 0x78
 80048b8:	2100      	movs	r1, #0
 80048ba:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e02c      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	401a      	ands	r2, r3
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d112      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2280      	movs	r2, #128	; 0x80
 80048da:	0112      	lsls	r2, r2, #4
 80048dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f000 f8e9 	bl	8004ab8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2284      	movs	r2, #132	; 0x84
 80048ea:	2120      	movs	r1, #32
 80048ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2278      	movs	r2, #120	; 0x78
 80048f2:	2100      	movs	r1, #0
 80048f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e00f      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	425a      	negs	r2, r3
 800490a:	4153      	adcs	r3, r2
 800490c:	b2db      	uxtb	r3, r3
 800490e:	001a      	movs	r2, r3
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d0a4      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	b004      	add	sp, #16
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b090      	sub	sp, #64	; 0x40
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	1dbb      	adds	r3, r7, #6
 8004930:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1dba      	adds	r2, r7, #6
 800493c:	2158      	movs	r1, #88	; 0x58
 800493e:	8812      	ldrh	r2, [r2, #0]
 8004940:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1dba      	adds	r2, r7, #6
 8004946:	215a      	movs	r1, #90	; 0x5a
 8004948:	8812      	ldrh	r2, [r2, #0]
 800494a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	015b      	lsls	r3, r3, #5
 800495a:	429a      	cmp	r2, r3
 800495c:	d10d      	bne.n	800497a <UART_Start_Receive_IT+0x56>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <UART_Start_Receive_IT+0x4c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	225c      	movs	r2, #92	; 0x5c
 800496a:	4950      	ldr	r1, [pc, #320]	; (8004aac <UART_Start_Receive_IT+0x188>)
 800496c:	5299      	strh	r1, [r3, r2]
 800496e:	e02e      	b.n	80049ce <UART_Start_Receive_IT+0xaa>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	225c      	movs	r2, #92	; 0x5c
 8004974:	21ff      	movs	r1, #255	; 0xff
 8004976:	5299      	strh	r1, [r3, r2]
 8004978:	e029      	b.n	80049ce <UART_Start_Receive_IT+0xaa>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10d      	bne.n	800499e <UART_Start_Receive_IT+0x7a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <UART_Start_Receive_IT+0x70>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	225c      	movs	r2, #92	; 0x5c
 800498e:	21ff      	movs	r1, #255	; 0xff
 8004990:	5299      	strh	r1, [r3, r2]
 8004992:	e01c      	b.n	80049ce <UART_Start_Receive_IT+0xaa>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	225c      	movs	r2, #92	; 0x5c
 8004998:	217f      	movs	r1, #127	; 0x7f
 800499a:	5299      	strh	r1, [r3, r2]
 800499c:	e017      	b.n	80049ce <UART_Start_Receive_IT+0xaa>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	055b      	lsls	r3, r3, #21
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d10d      	bne.n	80049c6 <UART_Start_Receive_IT+0xa2>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <UART_Start_Receive_IT+0x98>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	225c      	movs	r2, #92	; 0x5c
 80049b6:	217f      	movs	r1, #127	; 0x7f
 80049b8:	5299      	strh	r1, [r3, r2]
 80049ba:	e008      	b.n	80049ce <UART_Start_Receive_IT+0xaa>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	225c      	movs	r2, #92	; 0x5c
 80049c0:	213f      	movs	r1, #63	; 0x3f
 80049c2:	5299      	strh	r1, [r3, r2]
 80049c4:	e003      	b.n	80049ce <UART_Start_Receive_IT+0xaa>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	225c      	movs	r2, #92	; 0x5c
 80049ca:	2100      	movs	r1, #0
 80049cc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2284      	movs	r2, #132	; 0x84
 80049d2:	2100      	movs	r1, #0
 80049d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2280      	movs	r2, #128	; 0x80
 80049da:	2122      	movs	r1, #34	; 0x22
 80049dc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049de:	f3ef 8310 	mrs	r3, PRIMASK
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e8:	2301      	movs	r3, #1
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	f383 8810 	msr	PRIMASK, r3
}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2101      	movs	r1, #1
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a06:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	f383 8810 	msr	PRIMASK, r3
}
 8004a0e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	015b      	lsls	r3, r3, #5
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d107      	bne.n	8004a2c <UART_Start_Receive_IT+0x108>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d103      	bne.n	8004a2c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <UART_Start_Receive_IT+0x18c>)
 8004a28:	669a      	str	r2, [r3, #104]	; 0x68
 8004a2a:	e002      	b.n	8004a32 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <UART_Start_Receive_IT+0x190>)
 8004a30:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d019      	beq.n	8004a6e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a40:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
 8004a44:	2301      	movs	r3, #1
 8004a46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	f383 8810 	msr	PRIMASK, r3
}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2190      	movs	r1, #144	; 0x90
 8004a5c:	0049      	lsls	r1, r1, #1
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	f383 8810 	msr	PRIMASK, r3
}
 8004a6c:	e018      	b.n	8004aa0 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a72:	613b      	str	r3, [r7, #16]
  return(result);
 8004a74:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a78:	2301      	movs	r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f383 8810 	msr	PRIMASK, r3
}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2120      	movs	r1, #32
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f383 8810 	msr	PRIMASK, r3
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b010      	add	sp, #64	; 0x40
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	000001ff 	.word	0x000001ff
 8004ab0:	08004dc9 	.word	0x08004dc9
 8004ab4:	08004c05 	.word	0x08004c05

08004ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08e      	sub	sp, #56	; 0x38
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8004ac6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aca:	2301      	movs	r3, #1
 8004acc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f383 8810 	msr	PRIMASK, r3
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4926      	ldr	r1, [pc, #152]	; (8004b7c <UART_EndRxTransfer+0xc4>)
 8004ae2:	400a      	ands	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f383 8810 	msr	PRIMASK, r3
}
 8004af0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af2:	f3ef 8310 	mrs	r3, PRIMASK
 8004af6:	623b      	str	r3, [r7, #32]
  return(result);
 8004af8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30
 8004afc:	2301      	movs	r3, #1
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	f383 8810 	msr	PRIMASK, r3
}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2101      	movs	r1, #1
 8004b14:	438a      	bics	r2, r1
 8004b16:	609a      	str	r2, [r3, #8]
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	f383 8810 	msr	PRIMASK, r3
}
 8004b22:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d118      	bne.n	8004b5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b36:	2301      	movs	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f383 8810 	msr	PRIMASK, r3
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2110      	movs	r1, #16
 8004b4e:	438a      	bics	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f383 8810 	msr	PRIMASK, r3
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2280      	movs	r2, #128	; 0x80
 8004b62:	2120      	movs	r1, #32
 8004b64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b00e      	add	sp, #56	; 0x38
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	fffffedf 	.word	0xfffffedf

08004b80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	225a      	movs	r2, #90	; 0x5a
 8004b92:	2100      	movs	r1, #0
 8004b94:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2252      	movs	r2, #82	; 0x52
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7ff fa47 	bl	8004034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b004      	add	sp, #16
 8004bac:	bd80      	pop	{r7, pc}

08004bae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bba:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f383 8810 	msr	PRIMASK, r3
}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2140      	movs	r1, #64	; 0x40
 8004bd8:	438a      	bics	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f383 8810 	msr	PRIMASK, r3
}
 8004be6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7ff fa14 	bl	8004024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfc:	46c0      	nop			; (mov r8, r8)
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b006      	add	sp, #24
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b094      	sub	sp, #80	; 0x50
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c0c:	204e      	movs	r0, #78	; 0x4e
 8004c0e:	183b      	adds	r3, r7, r0
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	215c      	movs	r1, #92	; 0x5c
 8004c14:	5a52      	ldrh	r2, [r2, r1]
 8004c16:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	589b      	ldr	r3, [r3, r2]
 8004c1e:	2b22      	cmp	r3, #34	; 0x22
 8004c20:	d000      	beq.n	8004c24 <UART_RxISR_8BIT+0x20>
 8004c22:	e0bf      	b.n	8004da4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c2a:	214c      	movs	r1, #76	; 0x4c
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	183b      	adds	r3, r7, r0
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b2d9      	uxtb	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	400a      	ands	r2, r1
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	225a      	movs	r2, #90	; 0x5a
 8004c54:	5a9b      	ldrh	r3, [r3, r2]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b299      	uxth	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	225a      	movs	r2, #90	; 0x5a
 8004c60:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	225a      	movs	r2, #90	; 0x5a
 8004c66:	5a9b      	ldrh	r3, [r3, r2]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d000      	beq.n	8004c70 <UART_RxISR_8BIT+0x6c>
 8004c6e:	e0a1      	b.n	8004db4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c70:	f3ef 8310 	mrs	r3, PRIMASK
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	494a      	ldr	r1, [pc, #296]	; (8004dbc <UART_RxISR_8BIT+0x1b8>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	647b      	str	r3, [r7, #68]	; 0x44
 8004cac:	2301      	movs	r3, #1
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb2:	f383 8810 	msr	PRIMASK, r3
}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	f383 8810 	msr	PRIMASK, r3
}
 8004cd2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	2120      	movs	r1, #32
 8004cda:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a34      	ldr	r2, [pc, #208]	; (8004dc0 <UART_RxISR_8BIT+0x1bc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01f      	beq.n	8004d32 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d00:	f3ef 8310 	mrs	r3, PRIMASK
 8004d04:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d06:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d08:	643b      	str	r3, [r7, #64]	; 0x40
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4928      	ldr	r1, [pc, #160]	; (8004dc4 <UART_RxISR_8BIT+0x1c0>)
 8004d22:	400a      	ands	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f383 8810 	msr	PRIMASK, r3
}
 8004d30:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d12f      	bne.n	8004d9a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d40:	f3ef 8310 	mrs	r3, PRIMASK
 8004d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d46:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f383 8810 	msr	PRIMASK, r3
}
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2110      	movs	r1, #16
 8004d62:	438a      	bics	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f383 8810 	msr	PRIMASK, r3
}
 8004d70:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2210      	movs	r2, #16
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d103      	bne.n	8004d88 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2210      	movs	r2, #16
 8004d86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2258      	movs	r2, #88	; 0x58
 8004d8c:	5a9a      	ldrh	r2, [r3, r2]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0011      	movs	r1, r2
 8004d92:	0018      	movs	r0, r3
 8004d94:	f7ff f956 	bl	8004044 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d98:	e00c      	b.n	8004db4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fb fba7 	bl	80004f0 <HAL_UART_RxCpltCallback>
}
 8004da2:	e007      	b.n	8004db4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2108      	movs	r1, #8
 8004db0:	430a      	orrs	r2, r1
 8004db2:	619a      	str	r2, [r3, #24]
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b014      	add	sp, #80	; 0x50
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	fffffedf 	.word	0xfffffedf
 8004dc0:	40004800 	.word	0x40004800
 8004dc4:	fbffffff 	.word	0xfbffffff

08004dc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b094      	sub	sp, #80	; 0x50
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004dd0:	204e      	movs	r0, #78	; 0x4e
 8004dd2:	183b      	adds	r3, r7, r0
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	215c      	movs	r1, #92	; 0x5c
 8004dd8:	5a52      	ldrh	r2, [r2, r1]
 8004dda:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	589b      	ldr	r3, [r3, r2]
 8004de2:	2b22      	cmp	r3, #34	; 0x22
 8004de4:	d000      	beq.n	8004de8 <UART_RxISR_16BIT+0x20>
 8004de6:	e0bf      	b.n	8004f68 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dee:	214c      	movs	r1, #76	; 0x4c
 8004df0:	187b      	adds	r3, r7, r1
 8004df2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dfa:	187b      	adds	r3, r7, r1
 8004dfc:	183a      	adds	r2, r7, r0
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	8812      	ldrh	r2, [r2, #0]
 8004e02:	4013      	ands	r3, r2
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	1c9a      	adds	r2, r3, #2
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	225a      	movs	r2, #90	; 0x5a
 8004e18:	5a9b      	ldrh	r3, [r3, r2]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b299      	uxth	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	225a      	movs	r2, #90	; 0x5a
 8004e24:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	225a      	movs	r2, #90	; 0x5a
 8004e2a:	5a9b      	ldrh	r3, [r3, r2]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d000      	beq.n	8004e34 <UART_RxISR_16BIT+0x6c>
 8004e32:	e0a1      	b.n	8004f78 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e34:	f3ef 8310 	mrs	r3, PRIMASK
 8004e38:	623b      	str	r3, [r7, #32]
  return(result);
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3e:	2301      	movs	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	494a      	ldr	r1, [pc, #296]	; (8004f80 <UART_RxISR_16BIT+0x1b8>)
 8004e56:	400a      	ands	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e66:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e70:	2301      	movs	r3, #1
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	f383 8810 	msr	PRIMASK, r3
}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2101      	movs	r1, #1
 8004e88:	438a      	bics	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2280      	movs	r2, #128	; 0x80
 8004e9c:	2120      	movs	r1, #32
 8004e9e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a34      	ldr	r2, [pc, #208]	; (8004f84 <UART_RxISR_16BIT+0x1bc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01f      	beq.n	8004ef6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d018      	beq.n	8004ef6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8004eca:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ece:	2301      	movs	r3, #1
 8004ed0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f383 8810 	msr	PRIMASK, r3
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4928      	ldr	r1, [pc, #160]	; (8004f88 <UART_RxISR_16BIT+0x1c0>)
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f383 8810 	msr	PRIMASK, r3
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d12f      	bne.n	8004f5e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f04:	f3ef 8310 	mrs	r3, PRIMASK
 8004f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f0a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f0e:	2301      	movs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f383 8810 	msr	PRIMASK, r3
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2110      	movs	r1, #16
 8004f26:	438a      	bics	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f383 8810 	msr	PRIMASK, r3
}
 8004f34:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d103      	bne.n	8004f4c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2210      	movs	r2, #16
 8004f4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2258      	movs	r2, #88	; 0x58
 8004f50:	5a9a      	ldrh	r2, [r3, r2]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	0011      	movs	r1, r2
 8004f56:	0018      	movs	r0, r3
 8004f58:	f7ff f874 	bl	8004044 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f5c:	e00c      	b.n	8004f78 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f7fb fac5 	bl	80004f0 <HAL_UART_RxCpltCallback>
}
 8004f66:	e007      	b.n	8004f78 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2108      	movs	r1, #8
 8004f74:	430a      	orrs	r2, r1
 8004f76:	619a      	str	r2, [r3, #24]
}
 8004f78:	46c0      	nop			; (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b014      	add	sp, #80	; 0x50
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	fffffedf 	.word	0xfffffedf
 8004f84:	40004800 	.word	0x40004800
 8004f88:	fbffffff 	.word	0xfbffffff

08004f8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f94:	46c0      	nop			; (mov r8, r8)
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b002      	add	sp, #8
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <siprintf>:
 8004f9c:	b40e      	push	{r1, r2, r3}
 8004f9e:	b500      	push	{lr}
 8004fa0:	490b      	ldr	r1, [pc, #44]	; (8004fd0 <siprintf+0x34>)
 8004fa2:	b09c      	sub	sp, #112	; 0x70
 8004fa4:	ab1d      	add	r3, sp, #116	; 0x74
 8004fa6:	9002      	str	r0, [sp, #8]
 8004fa8:	9006      	str	r0, [sp, #24]
 8004faa:	9107      	str	r1, [sp, #28]
 8004fac:	9104      	str	r1, [sp, #16]
 8004fae:	4809      	ldr	r0, [pc, #36]	; (8004fd4 <siprintf+0x38>)
 8004fb0:	4909      	ldr	r1, [pc, #36]	; (8004fd8 <siprintf+0x3c>)
 8004fb2:	cb04      	ldmia	r3!, {r2}
 8004fb4:	9105      	str	r1, [sp, #20]
 8004fb6:	6800      	ldr	r0, [r0, #0]
 8004fb8:	a902      	add	r1, sp, #8
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	f000 f9c2 	bl	8005344 <_svfiprintf_r>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	9b02      	ldr	r3, [sp, #8]
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	b01c      	add	sp, #112	; 0x70
 8004fc8:	bc08      	pop	{r3}
 8004fca:	b003      	add	sp, #12
 8004fcc:	4718      	bx	r3
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	7fffffff 	.word	0x7fffffff
 8004fd4:	20000228 	.word	0x20000228
 8004fd8:	ffff0208 	.word	0xffff0208

08004fdc <memset>:
 8004fdc:	0003      	movs	r3, r0
 8004fde:	1882      	adds	r2, r0, r2
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d100      	bne.n	8004fe6 <memset+0xa>
 8004fe4:	4770      	bx	lr
 8004fe6:	7019      	strb	r1, [r3, #0]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	e7f9      	b.n	8004fe0 <memset+0x4>

08004fec <strstr>:
 8004fec:	780a      	ldrb	r2, [r1, #0]
 8004fee:	b530      	push	{r4, r5, lr}
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d10c      	bne.n	800500e <strstr+0x22>
 8004ff4:	bd30      	pop	{r4, r5, pc}
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d108      	bne.n	800500c <strstr+0x20>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	5ccc      	ldrb	r4, [r1, r3]
 8004ffe:	2c00      	cmp	r4, #0
 8005000:	d0f8      	beq.n	8004ff4 <strstr+0x8>
 8005002:	5cc5      	ldrb	r5, [r0, r3]
 8005004:	42a5      	cmp	r5, r4
 8005006:	d101      	bne.n	800500c <strstr+0x20>
 8005008:	3301      	adds	r3, #1
 800500a:	e7f7      	b.n	8004ffc <strstr+0x10>
 800500c:	3001      	adds	r0, #1
 800500e:	7803      	ldrb	r3, [r0, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <strstr+0xa>
 8005014:	0018      	movs	r0, r3
 8005016:	e7ed      	b.n	8004ff4 <strstr+0x8>

08005018 <__errno>:
 8005018:	4b01      	ldr	r3, [pc, #4]	; (8005020 <__errno+0x8>)
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	4770      	bx	lr
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	20000228 	.word	0x20000228

08005024 <__libc_init_array>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	2600      	movs	r6, #0
 8005028:	4c0c      	ldr	r4, [pc, #48]	; (800505c <__libc_init_array+0x38>)
 800502a:	4d0d      	ldr	r5, [pc, #52]	; (8005060 <__libc_init_array+0x3c>)
 800502c:	1b64      	subs	r4, r4, r5
 800502e:	10a4      	asrs	r4, r4, #2
 8005030:	42a6      	cmp	r6, r4
 8005032:	d109      	bne.n	8005048 <__libc_init_array+0x24>
 8005034:	2600      	movs	r6, #0
 8005036:	f000 fc6d 	bl	8005914 <_init>
 800503a:	4c0a      	ldr	r4, [pc, #40]	; (8005064 <__libc_init_array+0x40>)
 800503c:	4d0a      	ldr	r5, [pc, #40]	; (8005068 <__libc_init_array+0x44>)
 800503e:	1b64      	subs	r4, r4, r5
 8005040:	10a4      	asrs	r4, r4, #2
 8005042:	42a6      	cmp	r6, r4
 8005044:	d105      	bne.n	8005052 <__libc_init_array+0x2e>
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	00b3      	lsls	r3, r6, #2
 800504a:	58eb      	ldr	r3, [r5, r3]
 800504c:	4798      	blx	r3
 800504e:	3601      	adds	r6, #1
 8005050:	e7ee      	b.n	8005030 <__libc_init_array+0xc>
 8005052:	00b3      	lsls	r3, r6, #2
 8005054:	58eb      	ldr	r3, [r5, r3]
 8005056:	4798      	blx	r3
 8005058:	3601      	adds	r6, #1
 800505a:	e7f2      	b.n	8005042 <__libc_init_array+0x1e>
 800505c:	08005a90 	.word	0x08005a90
 8005060:	08005a90 	.word	0x08005a90
 8005064:	08005a94 	.word	0x08005a94
 8005068:	08005a90 	.word	0x08005a90

0800506c <__retarget_lock_acquire_recursive>:
 800506c:	4770      	bx	lr

0800506e <__retarget_lock_release_recursive>:
 800506e:	4770      	bx	lr

08005070 <memcpy>:
 8005070:	2300      	movs	r3, #0
 8005072:	b510      	push	{r4, lr}
 8005074:	429a      	cmp	r2, r3
 8005076:	d100      	bne.n	800507a <memcpy+0xa>
 8005078:	bd10      	pop	{r4, pc}
 800507a:	5ccc      	ldrb	r4, [r1, r3]
 800507c:	54c4      	strb	r4, [r0, r3]
 800507e:	3301      	adds	r3, #1
 8005080:	e7f8      	b.n	8005074 <memcpy+0x4>
	...

08005084 <_free_r>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	0005      	movs	r5, r0
 8005088:	2900      	cmp	r1, #0
 800508a:	d010      	beq.n	80050ae <_free_r+0x2a>
 800508c:	1f0c      	subs	r4, r1, #4
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	da00      	bge.n	8005096 <_free_r+0x12>
 8005094:	18e4      	adds	r4, r4, r3
 8005096:	0028      	movs	r0, r5
 8005098:	f000 f8e2 	bl	8005260 <__malloc_lock>
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <_free_r+0x90>)
 800509e:	6813      	ldr	r3, [r2, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <_free_r+0x2c>
 80050a4:	6063      	str	r3, [r4, #4]
 80050a6:	6014      	str	r4, [r2, #0]
 80050a8:	0028      	movs	r0, r5
 80050aa:	f000 f8e1 	bl	8005270 <__malloc_unlock>
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d908      	bls.n	80050c6 <_free_r+0x42>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	1821      	adds	r1, r4, r0
 80050b8:	428b      	cmp	r3, r1
 80050ba:	d1f3      	bne.n	80050a4 <_free_r+0x20>
 80050bc:	6819      	ldr	r1, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	1809      	adds	r1, r1, r0
 80050c2:	6021      	str	r1, [r4, #0]
 80050c4:	e7ee      	b.n	80050a4 <_free_r+0x20>
 80050c6:	001a      	movs	r2, r3
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <_free_r+0x4e>
 80050ce:	42a3      	cmp	r3, r4
 80050d0:	d9f9      	bls.n	80050c6 <_free_r+0x42>
 80050d2:	6811      	ldr	r1, [r2, #0]
 80050d4:	1850      	adds	r0, r2, r1
 80050d6:	42a0      	cmp	r0, r4
 80050d8:	d10b      	bne.n	80050f2 <_free_r+0x6e>
 80050da:	6820      	ldr	r0, [r4, #0]
 80050dc:	1809      	adds	r1, r1, r0
 80050de:	1850      	adds	r0, r2, r1
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	4283      	cmp	r3, r0
 80050e4:	d1e0      	bne.n	80050a8 <_free_r+0x24>
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	1841      	adds	r1, r0, r1
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	6053      	str	r3, [r2, #4]
 80050f0:	e7da      	b.n	80050a8 <_free_r+0x24>
 80050f2:	42a0      	cmp	r0, r4
 80050f4:	d902      	bls.n	80050fc <_free_r+0x78>
 80050f6:	230c      	movs	r3, #12
 80050f8:	602b      	str	r3, [r5, #0]
 80050fa:	e7d5      	b.n	80050a8 <_free_r+0x24>
 80050fc:	6820      	ldr	r0, [r4, #0]
 80050fe:	1821      	adds	r1, r4, r0
 8005100:	428b      	cmp	r3, r1
 8005102:	d103      	bne.n	800510c <_free_r+0x88>
 8005104:	6819      	ldr	r1, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	1809      	adds	r1, r1, r0
 800510a:	6021      	str	r1, [r4, #0]
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	6054      	str	r4, [r2, #4]
 8005110:	e7ca      	b.n	80050a8 <_free_r+0x24>
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	2000079c 	.word	0x2000079c

08005118 <sbrk_aligned>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	4e0f      	ldr	r6, [pc, #60]	; (8005158 <sbrk_aligned+0x40>)
 800511c:	000d      	movs	r5, r1
 800511e:	6831      	ldr	r1, [r6, #0]
 8005120:	0004      	movs	r4, r0
 8005122:	2900      	cmp	r1, #0
 8005124:	d102      	bne.n	800512c <sbrk_aligned+0x14>
 8005126:	f000 fba1 	bl	800586c <_sbrk_r>
 800512a:	6030      	str	r0, [r6, #0]
 800512c:	0029      	movs	r1, r5
 800512e:	0020      	movs	r0, r4
 8005130:	f000 fb9c 	bl	800586c <_sbrk_r>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d00a      	beq.n	800514e <sbrk_aligned+0x36>
 8005138:	2303      	movs	r3, #3
 800513a:	1cc5      	adds	r5, r0, #3
 800513c:	439d      	bics	r5, r3
 800513e:	42a8      	cmp	r0, r5
 8005140:	d007      	beq.n	8005152 <sbrk_aligned+0x3a>
 8005142:	1a29      	subs	r1, r5, r0
 8005144:	0020      	movs	r0, r4
 8005146:	f000 fb91 	bl	800586c <_sbrk_r>
 800514a:	3001      	adds	r0, #1
 800514c:	d101      	bne.n	8005152 <sbrk_aligned+0x3a>
 800514e:	2501      	movs	r5, #1
 8005150:	426d      	negs	r5, r5
 8005152:	0028      	movs	r0, r5
 8005154:	bd70      	pop	{r4, r5, r6, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	200007a0 	.word	0x200007a0

0800515c <_malloc_r>:
 800515c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800515e:	2203      	movs	r2, #3
 8005160:	1ccb      	adds	r3, r1, #3
 8005162:	4393      	bics	r3, r2
 8005164:	3308      	adds	r3, #8
 8005166:	0006      	movs	r6, r0
 8005168:	001f      	movs	r7, r3
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d238      	bcs.n	80051e0 <_malloc_r+0x84>
 800516e:	270c      	movs	r7, #12
 8005170:	42b9      	cmp	r1, r7
 8005172:	d837      	bhi.n	80051e4 <_malloc_r+0x88>
 8005174:	0030      	movs	r0, r6
 8005176:	f000 f873 	bl	8005260 <__malloc_lock>
 800517a:	4b38      	ldr	r3, [pc, #224]	; (800525c <_malloc_r+0x100>)
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	001c      	movs	r4, r3
 8005182:	2c00      	cmp	r4, #0
 8005184:	d133      	bne.n	80051ee <_malloc_r+0x92>
 8005186:	0039      	movs	r1, r7
 8005188:	0030      	movs	r0, r6
 800518a:	f7ff ffc5 	bl	8005118 <sbrk_aligned>
 800518e:	0004      	movs	r4, r0
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d15e      	bne.n	8005252 <_malloc_r+0xf6>
 8005194:	9b00      	ldr	r3, [sp, #0]
 8005196:	681c      	ldr	r4, [r3, #0]
 8005198:	0025      	movs	r5, r4
 800519a:	2d00      	cmp	r5, #0
 800519c:	d14e      	bne.n	800523c <_malloc_r+0xe0>
 800519e:	2c00      	cmp	r4, #0
 80051a0:	d051      	beq.n	8005246 <_malloc_r+0xea>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	0029      	movs	r1, r5
 80051a6:	18e3      	adds	r3, r4, r3
 80051a8:	0030      	movs	r0, r6
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	f000 fb5e 	bl	800586c <_sbrk_r>
 80051b0:	9b01      	ldr	r3, [sp, #4]
 80051b2:	4283      	cmp	r3, r0
 80051b4:	d147      	bne.n	8005246 <_malloc_r+0xea>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	0030      	movs	r0, r6
 80051ba:	1aff      	subs	r7, r7, r3
 80051bc:	0039      	movs	r1, r7
 80051be:	f7ff ffab 	bl	8005118 <sbrk_aligned>
 80051c2:	3001      	adds	r0, #1
 80051c4:	d03f      	beq.n	8005246 <_malloc_r+0xea>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	19db      	adds	r3, r3, r7
 80051ca:	6023      	str	r3, [r4, #0]
 80051cc:	9b00      	ldr	r3, [sp, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d040      	beq.n	8005256 <_malloc_r+0xfa>
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	42a2      	cmp	r2, r4
 80051d8:	d133      	bne.n	8005242 <_malloc_r+0xe6>
 80051da:	2200      	movs	r2, #0
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	e014      	b.n	800520a <_malloc_r+0xae>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	dac5      	bge.n	8005170 <_malloc_r+0x14>
 80051e4:	230c      	movs	r3, #12
 80051e6:	2500      	movs	r5, #0
 80051e8:	6033      	str	r3, [r6, #0]
 80051ea:	0028      	movs	r0, r5
 80051ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	1bc9      	subs	r1, r1, r7
 80051f2:	d420      	bmi.n	8005236 <_malloc_r+0xda>
 80051f4:	290b      	cmp	r1, #11
 80051f6:	d918      	bls.n	800522a <_malloc_r+0xce>
 80051f8:	19e2      	adds	r2, r4, r7
 80051fa:	6027      	str	r7, [r4, #0]
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d112      	bne.n	8005226 <_malloc_r+0xca>
 8005200:	9b00      	ldr	r3, [sp, #0]
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	6011      	str	r1, [r2, #0]
 8005208:	6053      	str	r3, [r2, #4]
 800520a:	0030      	movs	r0, r6
 800520c:	0025      	movs	r5, r4
 800520e:	f000 f82f 	bl	8005270 <__malloc_unlock>
 8005212:	2207      	movs	r2, #7
 8005214:	350b      	adds	r5, #11
 8005216:	1d23      	adds	r3, r4, #4
 8005218:	4395      	bics	r5, r2
 800521a:	1aea      	subs	r2, r5, r3
 800521c:	429d      	cmp	r5, r3
 800521e:	d0e4      	beq.n	80051ea <_malloc_r+0x8e>
 8005220:	1b5b      	subs	r3, r3, r5
 8005222:	50a3      	str	r3, [r4, r2]
 8005224:	e7e1      	b.n	80051ea <_malloc_r+0x8e>
 8005226:	605a      	str	r2, [r3, #4]
 8005228:	e7ec      	b.n	8005204 <_malloc_r+0xa8>
 800522a:	6862      	ldr	r2, [r4, #4]
 800522c:	42a3      	cmp	r3, r4
 800522e:	d1d5      	bne.n	80051dc <_malloc_r+0x80>
 8005230:	9b00      	ldr	r3, [sp, #0]
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e7e9      	b.n	800520a <_malloc_r+0xae>
 8005236:	0023      	movs	r3, r4
 8005238:	6864      	ldr	r4, [r4, #4]
 800523a:	e7a2      	b.n	8005182 <_malloc_r+0x26>
 800523c:	002c      	movs	r4, r5
 800523e:	686d      	ldr	r5, [r5, #4]
 8005240:	e7ab      	b.n	800519a <_malloc_r+0x3e>
 8005242:	0013      	movs	r3, r2
 8005244:	e7c4      	b.n	80051d0 <_malloc_r+0x74>
 8005246:	230c      	movs	r3, #12
 8005248:	0030      	movs	r0, r6
 800524a:	6033      	str	r3, [r6, #0]
 800524c:	f000 f810 	bl	8005270 <__malloc_unlock>
 8005250:	e7cb      	b.n	80051ea <_malloc_r+0x8e>
 8005252:	6027      	str	r7, [r4, #0]
 8005254:	e7d9      	b.n	800520a <_malloc_r+0xae>
 8005256:	605b      	str	r3, [r3, #4]
 8005258:	deff      	udf	#255	; 0xff
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	2000079c 	.word	0x2000079c

08005260 <__malloc_lock>:
 8005260:	b510      	push	{r4, lr}
 8005262:	4802      	ldr	r0, [pc, #8]	; (800526c <__malloc_lock+0xc>)
 8005264:	f7ff ff02 	bl	800506c <__retarget_lock_acquire_recursive>
 8005268:	bd10      	pop	{r4, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	20000798 	.word	0x20000798

08005270 <__malloc_unlock>:
 8005270:	b510      	push	{r4, lr}
 8005272:	4802      	ldr	r0, [pc, #8]	; (800527c <__malloc_unlock+0xc>)
 8005274:	f7ff fefb 	bl	800506e <__retarget_lock_release_recursive>
 8005278:	bd10      	pop	{r4, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	20000798 	.word	0x20000798

08005280 <__ssputs_r>:
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	b085      	sub	sp, #20
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	9203      	str	r2, [sp, #12]
 8005288:	688e      	ldr	r6, [r1, #8]
 800528a:	9a01      	ldr	r2, [sp, #4]
 800528c:	0007      	movs	r7, r0
 800528e:	000c      	movs	r4, r1
 8005290:	680b      	ldr	r3, [r1, #0]
 8005292:	4296      	cmp	r6, r2
 8005294:	d831      	bhi.n	80052fa <__ssputs_r+0x7a>
 8005296:	898a      	ldrh	r2, [r1, #12]
 8005298:	2190      	movs	r1, #144	; 0x90
 800529a:	00c9      	lsls	r1, r1, #3
 800529c:	420a      	tst	r2, r1
 800529e:	d029      	beq.n	80052f4 <__ssputs_r+0x74>
 80052a0:	2003      	movs	r0, #3
 80052a2:	6921      	ldr	r1, [r4, #16]
 80052a4:	1a5b      	subs	r3, r3, r1
 80052a6:	9302      	str	r3, [sp, #8]
 80052a8:	6963      	ldr	r3, [r4, #20]
 80052aa:	4343      	muls	r3, r0
 80052ac:	0fdd      	lsrs	r5, r3, #31
 80052ae:	18ed      	adds	r5, r5, r3
 80052b0:	9b01      	ldr	r3, [sp, #4]
 80052b2:	9802      	ldr	r0, [sp, #8]
 80052b4:	3301      	adds	r3, #1
 80052b6:	181b      	adds	r3, r3, r0
 80052b8:	106d      	asrs	r5, r5, #1
 80052ba:	42ab      	cmp	r3, r5
 80052bc:	d900      	bls.n	80052c0 <__ssputs_r+0x40>
 80052be:	001d      	movs	r5, r3
 80052c0:	0552      	lsls	r2, r2, #21
 80052c2:	d529      	bpl.n	8005318 <__ssputs_r+0x98>
 80052c4:	0029      	movs	r1, r5
 80052c6:	0038      	movs	r0, r7
 80052c8:	f7ff ff48 	bl	800515c <_malloc_r>
 80052cc:	1e06      	subs	r6, r0, #0
 80052ce:	d02d      	beq.n	800532c <__ssputs_r+0xac>
 80052d0:	9a02      	ldr	r2, [sp, #8]
 80052d2:	6921      	ldr	r1, [r4, #16]
 80052d4:	f7ff fecc 	bl	8005070 <memcpy>
 80052d8:	89a2      	ldrh	r2, [r4, #12]
 80052da:	4b19      	ldr	r3, [pc, #100]	; (8005340 <__ssputs_r+0xc0>)
 80052dc:	401a      	ands	r2, r3
 80052de:	2380      	movs	r3, #128	; 0x80
 80052e0:	4313      	orrs	r3, r2
 80052e2:	81a3      	strh	r3, [r4, #12]
 80052e4:	9b02      	ldr	r3, [sp, #8]
 80052e6:	6126      	str	r6, [r4, #16]
 80052e8:	18f6      	adds	r6, r6, r3
 80052ea:	6026      	str	r6, [r4, #0]
 80052ec:	6165      	str	r5, [r4, #20]
 80052ee:	9e01      	ldr	r6, [sp, #4]
 80052f0:	1aed      	subs	r5, r5, r3
 80052f2:	60a5      	str	r5, [r4, #8]
 80052f4:	9b01      	ldr	r3, [sp, #4]
 80052f6:	429e      	cmp	r6, r3
 80052f8:	d900      	bls.n	80052fc <__ssputs_r+0x7c>
 80052fa:	9e01      	ldr	r6, [sp, #4]
 80052fc:	0032      	movs	r2, r6
 80052fe:	9903      	ldr	r1, [sp, #12]
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	f000 fa9f 	bl	8005844 <memmove>
 8005306:	2000      	movs	r0, #0
 8005308:	68a3      	ldr	r3, [r4, #8]
 800530a:	1b9b      	subs	r3, r3, r6
 800530c:	60a3      	str	r3, [r4, #8]
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	199b      	adds	r3, r3, r6
 8005312:	6023      	str	r3, [r4, #0]
 8005314:	b005      	add	sp, #20
 8005316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005318:	002a      	movs	r2, r5
 800531a:	0038      	movs	r0, r7
 800531c:	f000 fac3 	bl	80058a6 <_realloc_r>
 8005320:	1e06      	subs	r6, r0, #0
 8005322:	d1df      	bne.n	80052e4 <__ssputs_r+0x64>
 8005324:	0038      	movs	r0, r7
 8005326:	6921      	ldr	r1, [r4, #16]
 8005328:	f7ff feac 	bl	8005084 <_free_r>
 800532c:	230c      	movs	r3, #12
 800532e:	2001      	movs	r0, #1
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	89a2      	ldrh	r2, [r4, #12]
 8005334:	3334      	adds	r3, #52	; 0x34
 8005336:	4313      	orrs	r3, r2
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	4240      	negs	r0, r0
 800533c:	e7ea      	b.n	8005314 <__ssputs_r+0x94>
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	fffffb7f 	.word	0xfffffb7f

08005344 <_svfiprintf_r>:
 8005344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005346:	b0a1      	sub	sp, #132	; 0x84
 8005348:	9003      	str	r0, [sp, #12]
 800534a:	001d      	movs	r5, r3
 800534c:	898b      	ldrh	r3, [r1, #12]
 800534e:	000f      	movs	r7, r1
 8005350:	0016      	movs	r6, r2
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	d511      	bpl.n	800537a <_svfiprintf_r+0x36>
 8005356:	690b      	ldr	r3, [r1, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10e      	bne.n	800537a <_svfiprintf_r+0x36>
 800535c:	2140      	movs	r1, #64	; 0x40
 800535e:	f7ff fefd 	bl	800515c <_malloc_r>
 8005362:	6038      	str	r0, [r7, #0]
 8005364:	6138      	str	r0, [r7, #16]
 8005366:	2800      	cmp	r0, #0
 8005368:	d105      	bne.n	8005376 <_svfiprintf_r+0x32>
 800536a:	230c      	movs	r3, #12
 800536c:	9a03      	ldr	r2, [sp, #12]
 800536e:	3801      	subs	r0, #1
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	b021      	add	sp, #132	; 0x84
 8005374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005376:	2340      	movs	r3, #64	; 0x40
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	2300      	movs	r3, #0
 800537c:	ac08      	add	r4, sp, #32
 800537e:	6163      	str	r3, [r4, #20]
 8005380:	3320      	adds	r3, #32
 8005382:	7663      	strb	r3, [r4, #25]
 8005384:	3310      	adds	r3, #16
 8005386:	76a3      	strb	r3, [r4, #26]
 8005388:	9507      	str	r5, [sp, #28]
 800538a:	0035      	movs	r5, r6
 800538c:	782b      	ldrb	r3, [r5, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <_svfiprintf_r+0x52>
 8005392:	2b25      	cmp	r3, #37	; 0x25
 8005394:	d148      	bne.n	8005428 <_svfiprintf_r+0xe4>
 8005396:	1bab      	subs	r3, r5, r6
 8005398:	9305      	str	r3, [sp, #20]
 800539a:	42b5      	cmp	r5, r6
 800539c:	d00b      	beq.n	80053b6 <_svfiprintf_r+0x72>
 800539e:	0032      	movs	r2, r6
 80053a0:	0039      	movs	r1, r7
 80053a2:	9803      	ldr	r0, [sp, #12]
 80053a4:	f7ff ff6c 	bl	8005280 <__ssputs_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d100      	bne.n	80053ae <_svfiprintf_r+0x6a>
 80053ac:	e0af      	b.n	800550e <_svfiprintf_r+0x1ca>
 80053ae:	6963      	ldr	r3, [r4, #20]
 80053b0:	9a05      	ldr	r2, [sp, #20]
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	6163      	str	r3, [r4, #20]
 80053b6:	782b      	ldrb	r3, [r5, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d100      	bne.n	80053be <_svfiprintf_r+0x7a>
 80053bc:	e0a7      	b.n	800550e <_svfiprintf_r+0x1ca>
 80053be:	2201      	movs	r2, #1
 80053c0:	2300      	movs	r3, #0
 80053c2:	4252      	negs	r2, r2
 80053c4:	6062      	str	r2, [r4, #4]
 80053c6:	a904      	add	r1, sp, #16
 80053c8:	3254      	adds	r2, #84	; 0x54
 80053ca:	1852      	adds	r2, r2, r1
 80053cc:	1c6e      	adds	r6, r5, #1
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	60e3      	str	r3, [r4, #12]
 80053d2:	60a3      	str	r3, [r4, #8]
 80053d4:	7013      	strb	r3, [r2, #0]
 80053d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80053d8:	4b55      	ldr	r3, [pc, #340]	; (8005530 <_svfiprintf_r+0x1ec>)
 80053da:	2205      	movs	r2, #5
 80053dc:	0018      	movs	r0, r3
 80053de:	7831      	ldrb	r1, [r6, #0]
 80053e0:	9305      	str	r3, [sp, #20]
 80053e2:	f000 fa55 	bl	8005890 <memchr>
 80053e6:	1c75      	adds	r5, r6, #1
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d11f      	bne.n	800542c <_svfiprintf_r+0xe8>
 80053ec:	6822      	ldr	r2, [r4, #0]
 80053ee:	06d3      	lsls	r3, r2, #27
 80053f0:	d504      	bpl.n	80053fc <_svfiprintf_r+0xb8>
 80053f2:	2353      	movs	r3, #83	; 0x53
 80053f4:	a904      	add	r1, sp, #16
 80053f6:	185b      	adds	r3, r3, r1
 80053f8:	2120      	movs	r1, #32
 80053fa:	7019      	strb	r1, [r3, #0]
 80053fc:	0713      	lsls	r3, r2, #28
 80053fe:	d504      	bpl.n	800540a <_svfiprintf_r+0xc6>
 8005400:	2353      	movs	r3, #83	; 0x53
 8005402:	a904      	add	r1, sp, #16
 8005404:	185b      	adds	r3, r3, r1
 8005406:	212b      	movs	r1, #43	; 0x2b
 8005408:	7019      	strb	r1, [r3, #0]
 800540a:	7833      	ldrb	r3, [r6, #0]
 800540c:	2b2a      	cmp	r3, #42	; 0x2a
 800540e:	d016      	beq.n	800543e <_svfiprintf_r+0xfa>
 8005410:	0035      	movs	r5, r6
 8005412:	2100      	movs	r1, #0
 8005414:	200a      	movs	r0, #10
 8005416:	68e3      	ldr	r3, [r4, #12]
 8005418:	782a      	ldrb	r2, [r5, #0]
 800541a:	1c6e      	adds	r6, r5, #1
 800541c:	3a30      	subs	r2, #48	; 0x30
 800541e:	2a09      	cmp	r2, #9
 8005420:	d94e      	bls.n	80054c0 <_svfiprintf_r+0x17c>
 8005422:	2900      	cmp	r1, #0
 8005424:	d111      	bne.n	800544a <_svfiprintf_r+0x106>
 8005426:	e017      	b.n	8005458 <_svfiprintf_r+0x114>
 8005428:	3501      	adds	r5, #1
 800542a:	e7af      	b.n	800538c <_svfiprintf_r+0x48>
 800542c:	9b05      	ldr	r3, [sp, #20]
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	1ac0      	subs	r0, r0, r3
 8005432:	2301      	movs	r3, #1
 8005434:	4083      	lsls	r3, r0
 8005436:	4313      	orrs	r3, r2
 8005438:	002e      	movs	r6, r5
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	e7cc      	b.n	80053d8 <_svfiprintf_r+0x94>
 800543e:	9b07      	ldr	r3, [sp, #28]
 8005440:	1d19      	adds	r1, r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	9107      	str	r1, [sp, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	db01      	blt.n	800544e <_svfiprintf_r+0x10a>
 800544a:	930b      	str	r3, [sp, #44]	; 0x2c
 800544c:	e004      	b.n	8005458 <_svfiprintf_r+0x114>
 800544e:	425b      	negs	r3, r3
 8005450:	60e3      	str	r3, [r4, #12]
 8005452:	2302      	movs	r3, #2
 8005454:	4313      	orrs	r3, r2
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	782b      	ldrb	r3, [r5, #0]
 800545a:	2b2e      	cmp	r3, #46	; 0x2e
 800545c:	d10a      	bne.n	8005474 <_svfiprintf_r+0x130>
 800545e:	786b      	ldrb	r3, [r5, #1]
 8005460:	2b2a      	cmp	r3, #42	; 0x2a
 8005462:	d135      	bne.n	80054d0 <_svfiprintf_r+0x18c>
 8005464:	9b07      	ldr	r3, [sp, #28]
 8005466:	3502      	adds	r5, #2
 8005468:	1d1a      	adds	r2, r3, #4
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	9207      	str	r2, [sp, #28]
 800546e:	2b00      	cmp	r3, #0
 8005470:	db2b      	blt.n	80054ca <_svfiprintf_r+0x186>
 8005472:	9309      	str	r3, [sp, #36]	; 0x24
 8005474:	4e2f      	ldr	r6, [pc, #188]	; (8005534 <_svfiprintf_r+0x1f0>)
 8005476:	2203      	movs	r2, #3
 8005478:	0030      	movs	r0, r6
 800547a:	7829      	ldrb	r1, [r5, #0]
 800547c:	f000 fa08 	bl	8005890 <memchr>
 8005480:	2800      	cmp	r0, #0
 8005482:	d006      	beq.n	8005492 <_svfiprintf_r+0x14e>
 8005484:	2340      	movs	r3, #64	; 0x40
 8005486:	1b80      	subs	r0, r0, r6
 8005488:	4083      	lsls	r3, r0
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	3501      	adds	r5, #1
 800548e:	4313      	orrs	r3, r2
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	7829      	ldrb	r1, [r5, #0]
 8005494:	2206      	movs	r2, #6
 8005496:	4828      	ldr	r0, [pc, #160]	; (8005538 <_svfiprintf_r+0x1f4>)
 8005498:	1c6e      	adds	r6, r5, #1
 800549a:	7621      	strb	r1, [r4, #24]
 800549c:	f000 f9f8 	bl	8005890 <memchr>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d03c      	beq.n	800551e <_svfiprintf_r+0x1da>
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <_svfiprintf_r+0x1f8>)
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d125      	bne.n	80054f6 <_svfiprintf_r+0x1b2>
 80054aa:	2207      	movs	r2, #7
 80054ac:	9b07      	ldr	r3, [sp, #28]
 80054ae:	3307      	adds	r3, #7
 80054b0:	4393      	bics	r3, r2
 80054b2:	3308      	adds	r3, #8
 80054b4:	9307      	str	r3, [sp, #28]
 80054b6:	6963      	ldr	r3, [r4, #20]
 80054b8:	9a04      	ldr	r2, [sp, #16]
 80054ba:	189b      	adds	r3, r3, r2
 80054bc:	6163      	str	r3, [r4, #20]
 80054be:	e764      	b.n	800538a <_svfiprintf_r+0x46>
 80054c0:	4343      	muls	r3, r0
 80054c2:	0035      	movs	r5, r6
 80054c4:	2101      	movs	r1, #1
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	e7a6      	b.n	8005418 <_svfiprintf_r+0xd4>
 80054ca:	2301      	movs	r3, #1
 80054cc:	425b      	negs	r3, r3
 80054ce:	e7d0      	b.n	8005472 <_svfiprintf_r+0x12e>
 80054d0:	2300      	movs	r3, #0
 80054d2:	200a      	movs	r0, #10
 80054d4:	001a      	movs	r2, r3
 80054d6:	3501      	adds	r5, #1
 80054d8:	6063      	str	r3, [r4, #4]
 80054da:	7829      	ldrb	r1, [r5, #0]
 80054dc:	1c6e      	adds	r6, r5, #1
 80054de:	3930      	subs	r1, #48	; 0x30
 80054e0:	2909      	cmp	r1, #9
 80054e2:	d903      	bls.n	80054ec <_svfiprintf_r+0x1a8>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0c5      	beq.n	8005474 <_svfiprintf_r+0x130>
 80054e8:	9209      	str	r2, [sp, #36]	; 0x24
 80054ea:	e7c3      	b.n	8005474 <_svfiprintf_r+0x130>
 80054ec:	4342      	muls	r2, r0
 80054ee:	0035      	movs	r5, r6
 80054f0:	2301      	movs	r3, #1
 80054f2:	1852      	adds	r2, r2, r1
 80054f4:	e7f1      	b.n	80054da <_svfiprintf_r+0x196>
 80054f6:	aa07      	add	r2, sp, #28
 80054f8:	9200      	str	r2, [sp, #0]
 80054fa:	0021      	movs	r1, r4
 80054fc:	003a      	movs	r2, r7
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <_svfiprintf_r+0x1fc>)
 8005500:	9803      	ldr	r0, [sp, #12]
 8005502:	e000      	b.n	8005506 <_svfiprintf_r+0x1c2>
 8005504:	bf00      	nop
 8005506:	9004      	str	r0, [sp, #16]
 8005508:	9b04      	ldr	r3, [sp, #16]
 800550a:	3301      	adds	r3, #1
 800550c:	d1d3      	bne.n	80054b6 <_svfiprintf_r+0x172>
 800550e:	89bb      	ldrh	r3, [r7, #12]
 8005510:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005512:	065b      	lsls	r3, r3, #25
 8005514:	d400      	bmi.n	8005518 <_svfiprintf_r+0x1d4>
 8005516:	e72c      	b.n	8005372 <_svfiprintf_r+0x2e>
 8005518:	2001      	movs	r0, #1
 800551a:	4240      	negs	r0, r0
 800551c:	e729      	b.n	8005372 <_svfiprintf_r+0x2e>
 800551e:	aa07      	add	r2, sp, #28
 8005520:	9200      	str	r2, [sp, #0]
 8005522:	0021      	movs	r1, r4
 8005524:	003a      	movs	r2, r7
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <_svfiprintf_r+0x1fc>)
 8005528:	9803      	ldr	r0, [sp, #12]
 800552a:	f000 f87b 	bl	8005624 <_printf_i>
 800552e:	e7ea      	b.n	8005506 <_svfiprintf_r+0x1c2>
 8005530:	08005a54 	.word	0x08005a54
 8005534:	08005a5a 	.word	0x08005a5a
 8005538:	08005a5e 	.word	0x08005a5e
 800553c:	00000000 	.word	0x00000000
 8005540:	08005281 	.word	0x08005281

08005544 <_printf_common>:
 8005544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005546:	0016      	movs	r6, r2
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	688a      	ldr	r2, [r1, #8]
 800554c:	690b      	ldr	r3, [r1, #16]
 800554e:	000c      	movs	r4, r1
 8005550:	9000      	str	r0, [sp, #0]
 8005552:	4293      	cmp	r3, r2
 8005554:	da00      	bge.n	8005558 <_printf_common+0x14>
 8005556:	0013      	movs	r3, r2
 8005558:	0022      	movs	r2, r4
 800555a:	6033      	str	r3, [r6, #0]
 800555c:	3243      	adds	r2, #67	; 0x43
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	2a00      	cmp	r2, #0
 8005562:	d001      	beq.n	8005568 <_printf_common+0x24>
 8005564:	3301      	adds	r3, #1
 8005566:	6033      	str	r3, [r6, #0]
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	069b      	lsls	r3, r3, #26
 800556c:	d502      	bpl.n	8005574 <_printf_common+0x30>
 800556e:	6833      	ldr	r3, [r6, #0]
 8005570:	3302      	adds	r3, #2
 8005572:	6033      	str	r3, [r6, #0]
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	2306      	movs	r3, #6
 8005578:	0015      	movs	r5, r2
 800557a:	401d      	ands	r5, r3
 800557c:	421a      	tst	r2, r3
 800557e:	d027      	beq.n	80055d0 <_printf_common+0x8c>
 8005580:	0023      	movs	r3, r4
 8005582:	3343      	adds	r3, #67	; 0x43
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	1e5a      	subs	r2, r3, #1
 8005588:	4193      	sbcs	r3, r2
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	0692      	lsls	r2, r2, #26
 800558e:	d430      	bmi.n	80055f2 <_printf_common+0xae>
 8005590:	0022      	movs	r2, r4
 8005592:	9901      	ldr	r1, [sp, #4]
 8005594:	9800      	ldr	r0, [sp, #0]
 8005596:	9d08      	ldr	r5, [sp, #32]
 8005598:	3243      	adds	r2, #67	; 0x43
 800559a:	47a8      	blx	r5
 800559c:	3001      	adds	r0, #1
 800559e:	d025      	beq.n	80055ec <_printf_common+0xa8>
 80055a0:	2206      	movs	r2, #6
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	2500      	movs	r5, #0
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d105      	bne.n	80055b8 <_printf_common+0x74>
 80055ac:	6833      	ldr	r3, [r6, #0]
 80055ae:	68e5      	ldr	r5, [r4, #12]
 80055b0:	1aed      	subs	r5, r5, r3
 80055b2:	43eb      	mvns	r3, r5
 80055b4:	17db      	asrs	r3, r3, #31
 80055b6:	401d      	ands	r5, r3
 80055b8:	68a3      	ldr	r3, [r4, #8]
 80055ba:	6922      	ldr	r2, [r4, #16]
 80055bc:	4293      	cmp	r3, r2
 80055be:	dd01      	ble.n	80055c4 <_printf_common+0x80>
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	18ed      	adds	r5, r5, r3
 80055c4:	2600      	movs	r6, #0
 80055c6:	42b5      	cmp	r5, r6
 80055c8:	d120      	bne.n	800560c <_printf_common+0xc8>
 80055ca:	2000      	movs	r0, #0
 80055cc:	e010      	b.n	80055f0 <_printf_common+0xac>
 80055ce:	3501      	adds	r5, #1
 80055d0:	68e3      	ldr	r3, [r4, #12]
 80055d2:	6832      	ldr	r2, [r6, #0]
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	42ab      	cmp	r3, r5
 80055d8:	ddd2      	ble.n	8005580 <_printf_common+0x3c>
 80055da:	0022      	movs	r2, r4
 80055dc:	2301      	movs	r3, #1
 80055de:	9901      	ldr	r1, [sp, #4]
 80055e0:	9800      	ldr	r0, [sp, #0]
 80055e2:	9f08      	ldr	r7, [sp, #32]
 80055e4:	3219      	adds	r2, #25
 80055e6:	47b8      	blx	r7
 80055e8:	3001      	adds	r0, #1
 80055ea:	d1f0      	bne.n	80055ce <_printf_common+0x8a>
 80055ec:	2001      	movs	r0, #1
 80055ee:	4240      	negs	r0, r0
 80055f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055f2:	2030      	movs	r0, #48	; 0x30
 80055f4:	18e1      	adds	r1, r4, r3
 80055f6:	3143      	adds	r1, #67	; 0x43
 80055f8:	7008      	strb	r0, [r1, #0]
 80055fa:	0021      	movs	r1, r4
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	3145      	adds	r1, #69	; 0x45
 8005600:	7809      	ldrb	r1, [r1, #0]
 8005602:	18a2      	adds	r2, r4, r2
 8005604:	3243      	adds	r2, #67	; 0x43
 8005606:	3302      	adds	r3, #2
 8005608:	7011      	strb	r1, [r2, #0]
 800560a:	e7c1      	b.n	8005590 <_printf_common+0x4c>
 800560c:	0022      	movs	r2, r4
 800560e:	2301      	movs	r3, #1
 8005610:	9901      	ldr	r1, [sp, #4]
 8005612:	9800      	ldr	r0, [sp, #0]
 8005614:	9f08      	ldr	r7, [sp, #32]
 8005616:	321a      	adds	r2, #26
 8005618:	47b8      	blx	r7
 800561a:	3001      	adds	r0, #1
 800561c:	d0e6      	beq.n	80055ec <_printf_common+0xa8>
 800561e:	3601      	adds	r6, #1
 8005620:	e7d1      	b.n	80055c6 <_printf_common+0x82>
	...

08005624 <_printf_i>:
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	b08b      	sub	sp, #44	; 0x2c
 8005628:	9206      	str	r2, [sp, #24]
 800562a:	000a      	movs	r2, r1
 800562c:	3243      	adds	r2, #67	; 0x43
 800562e:	9307      	str	r3, [sp, #28]
 8005630:	9005      	str	r0, [sp, #20]
 8005632:	9204      	str	r2, [sp, #16]
 8005634:	7e0a      	ldrb	r2, [r1, #24]
 8005636:	000c      	movs	r4, r1
 8005638:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800563a:	2a78      	cmp	r2, #120	; 0x78
 800563c:	d809      	bhi.n	8005652 <_printf_i+0x2e>
 800563e:	2a62      	cmp	r2, #98	; 0x62
 8005640:	d80b      	bhi.n	800565a <_printf_i+0x36>
 8005642:	2a00      	cmp	r2, #0
 8005644:	d100      	bne.n	8005648 <_printf_i+0x24>
 8005646:	e0be      	b.n	80057c6 <_printf_i+0x1a2>
 8005648:	497c      	ldr	r1, [pc, #496]	; (800583c <_printf_i+0x218>)
 800564a:	9103      	str	r1, [sp, #12]
 800564c:	2a58      	cmp	r2, #88	; 0x58
 800564e:	d100      	bne.n	8005652 <_printf_i+0x2e>
 8005650:	e093      	b.n	800577a <_printf_i+0x156>
 8005652:	0026      	movs	r6, r4
 8005654:	3642      	adds	r6, #66	; 0x42
 8005656:	7032      	strb	r2, [r6, #0]
 8005658:	e022      	b.n	80056a0 <_printf_i+0x7c>
 800565a:	0010      	movs	r0, r2
 800565c:	3863      	subs	r0, #99	; 0x63
 800565e:	2815      	cmp	r0, #21
 8005660:	d8f7      	bhi.n	8005652 <_printf_i+0x2e>
 8005662:	f7fa fd59 	bl	8000118 <__gnu_thumb1_case_shi>
 8005666:	0016      	.short	0x0016
 8005668:	fff6001f 	.word	0xfff6001f
 800566c:	fff6fff6 	.word	0xfff6fff6
 8005670:	001ffff6 	.word	0x001ffff6
 8005674:	fff6fff6 	.word	0xfff6fff6
 8005678:	fff6fff6 	.word	0xfff6fff6
 800567c:	003600a3 	.word	0x003600a3
 8005680:	fff60083 	.word	0xfff60083
 8005684:	00b4fff6 	.word	0x00b4fff6
 8005688:	0036fff6 	.word	0x0036fff6
 800568c:	fff6fff6 	.word	0xfff6fff6
 8005690:	0087      	.short	0x0087
 8005692:	0026      	movs	r6, r4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	3642      	adds	r6, #66	; 0x42
 8005698:	1d11      	adds	r1, r2, #4
 800569a:	6019      	str	r1, [r3, #0]
 800569c:	6813      	ldr	r3, [r2, #0]
 800569e:	7033      	strb	r3, [r6, #0]
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0a2      	b.n	80057ea <_printf_i+0x1c6>
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	6809      	ldr	r1, [r1, #0]
 80056a8:	1d02      	adds	r2, r0, #4
 80056aa:	060d      	lsls	r5, r1, #24
 80056ac:	d50b      	bpl.n	80056c6 <_printf_i+0xa2>
 80056ae:	6805      	ldr	r5, [r0, #0]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	da03      	bge.n	80056be <_printf_i+0x9a>
 80056b6:	232d      	movs	r3, #45	; 0x2d
 80056b8:	9a04      	ldr	r2, [sp, #16]
 80056ba:	426d      	negs	r5, r5
 80056bc:	7013      	strb	r3, [r2, #0]
 80056be:	4b5f      	ldr	r3, [pc, #380]	; (800583c <_printf_i+0x218>)
 80056c0:	270a      	movs	r7, #10
 80056c2:	9303      	str	r3, [sp, #12]
 80056c4:	e01b      	b.n	80056fe <_printf_i+0xda>
 80056c6:	6805      	ldr	r5, [r0, #0]
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	0649      	lsls	r1, r1, #25
 80056cc:	d5f1      	bpl.n	80056b2 <_printf_i+0x8e>
 80056ce:	b22d      	sxth	r5, r5
 80056d0:	e7ef      	b.n	80056b2 <_printf_i+0x8e>
 80056d2:	680d      	ldr	r5, [r1, #0]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	1d08      	adds	r0, r1, #4
 80056d8:	6018      	str	r0, [r3, #0]
 80056da:	062e      	lsls	r6, r5, #24
 80056dc:	d501      	bpl.n	80056e2 <_printf_i+0xbe>
 80056de:	680d      	ldr	r5, [r1, #0]
 80056e0:	e003      	b.n	80056ea <_printf_i+0xc6>
 80056e2:	066d      	lsls	r5, r5, #25
 80056e4:	d5fb      	bpl.n	80056de <_printf_i+0xba>
 80056e6:	680d      	ldr	r5, [r1, #0]
 80056e8:	b2ad      	uxth	r5, r5
 80056ea:	4b54      	ldr	r3, [pc, #336]	; (800583c <_printf_i+0x218>)
 80056ec:	2708      	movs	r7, #8
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	2a6f      	cmp	r2, #111	; 0x6f
 80056f2:	d000      	beq.n	80056f6 <_printf_i+0xd2>
 80056f4:	3702      	adds	r7, #2
 80056f6:	0023      	movs	r3, r4
 80056f8:	2200      	movs	r2, #0
 80056fa:	3343      	adds	r3, #67	; 0x43
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	6863      	ldr	r3, [r4, #4]
 8005700:	60a3      	str	r3, [r4, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	db03      	blt.n	800570e <_printf_i+0xea>
 8005706:	2104      	movs	r1, #4
 8005708:	6822      	ldr	r2, [r4, #0]
 800570a:	438a      	bics	r2, r1
 800570c:	6022      	str	r2, [r4, #0]
 800570e:	2d00      	cmp	r5, #0
 8005710:	d102      	bne.n	8005718 <_printf_i+0xf4>
 8005712:	9e04      	ldr	r6, [sp, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <_printf_i+0x10e>
 8005718:	9e04      	ldr	r6, [sp, #16]
 800571a:	0028      	movs	r0, r5
 800571c:	0039      	movs	r1, r7
 800571e:	f7fa fd8b 	bl	8000238 <__aeabi_uidivmod>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	3e01      	subs	r6, #1
 8005726:	5c5b      	ldrb	r3, [r3, r1]
 8005728:	7033      	strb	r3, [r6, #0]
 800572a:	002b      	movs	r3, r5
 800572c:	0005      	movs	r5, r0
 800572e:	429f      	cmp	r7, r3
 8005730:	d9f3      	bls.n	800571a <_printf_i+0xf6>
 8005732:	2f08      	cmp	r7, #8
 8005734:	d109      	bne.n	800574a <_printf_i+0x126>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	07db      	lsls	r3, r3, #31
 800573a:	d506      	bpl.n	800574a <_printf_i+0x126>
 800573c:	6862      	ldr	r2, [r4, #4]
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	429a      	cmp	r2, r3
 8005742:	dc02      	bgt.n	800574a <_printf_i+0x126>
 8005744:	2330      	movs	r3, #48	; 0x30
 8005746:	3e01      	subs	r6, #1
 8005748:	7033      	strb	r3, [r6, #0]
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	1b9b      	subs	r3, r3, r6
 800574e:	6123      	str	r3, [r4, #16]
 8005750:	9b07      	ldr	r3, [sp, #28]
 8005752:	0021      	movs	r1, r4
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	9805      	ldr	r0, [sp, #20]
 8005758:	9b06      	ldr	r3, [sp, #24]
 800575a:	aa09      	add	r2, sp, #36	; 0x24
 800575c:	f7ff fef2 	bl	8005544 <_printf_common>
 8005760:	3001      	adds	r0, #1
 8005762:	d147      	bne.n	80057f4 <_printf_i+0x1d0>
 8005764:	2001      	movs	r0, #1
 8005766:	4240      	negs	r0, r0
 8005768:	b00b      	add	sp, #44	; 0x2c
 800576a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576c:	2220      	movs	r2, #32
 800576e:	6809      	ldr	r1, [r1, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	6022      	str	r2, [r4, #0]
 8005774:	2278      	movs	r2, #120	; 0x78
 8005776:	4932      	ldr	r1, [pc, #200]	; (8005840 <_printf_i+0x21c>)
 8005778:	9103      	str	r1, [sp, #12]
 800577a:	0021      	movs	r1, r4
 800577c:	3145      	adds	r1, #69	; 0x45
 800577e:	700a      	strb	r2, [r1, #0]
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	c920      	ldmia	r1!, {r5}
 8005786:	0610      	lsls	r0, r2, #24
 8005788:	d402      	bmi.n	8005790 <_printf_i+0x16c>
 800578a:	0650      	lsls	r0, r2, #25
 800578c:	d500      	bpl.n	8005790 <_printf_i+0x16c>
 800578e:	b2ad      	uxth	r5, r5
 8005790:	6019      	str	r1, [r3, #0]
 8005792:	07d3      	lsls	r3, r2, #31
 8005794:	d502      	bpl.n	800579c <_printf_i+0x178>
 8005796:	2320      	movs	r3, #32
 8005798:	4313      	orrs	r3, r2
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	2710      	movs	r7, #16
 800579e:	2d00      	cmp	r5, #0
 80057a0:	d1a9      	bne.n	80056f6 <_printf_i+0xd2>
 80057a2:	2220      	movs	r2, #32
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	4393      	bics	r3, r2
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	e7a4      	b.n	80056f6 <_printf_i+0xd2>
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	680d      	ldr	r5, [r1, #0]
 80057b0:	1d10      	adds	r0, r2, #4
 80057b2:	6949      	ldr	r1, [r1, #20]
 80057b4:	6018      	str	r0, [r3, #0]
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	062e      	lsls	r6, r5, #24
 80057ba:	d501      	bpl.n	80057c0 <_printf_i+0x19c>
 80057bc:	6019      	str	r1, [r3, #0]
 80057be:	e002      	b.n	80057c6 <_printf_i+0x1a2>
 80057c0:	066d      	lsls	r5, r5, #25
 80057c2:	d5fb      	bpl.n	80057bc <_printf_i+0x198>
 80057c4:	8019      	strh	r1, [r3, #0]
 80057c6:	2300      	movs	r3, #0
 80057c8:	9e04      	ldr	r6, [sp, #16]
 80057ca:	6123      	str	r3, [r4, #16]
 80057cc:	e7c0      	b.n	8005750 <_printf_i+0x12c>
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	1d11      	adds	r1, r2, #4
 80057d2:	6019      	str	r1, [r3, #0]
 80057d4:	6816      	ldr	r6, [r2, #0]
 80057d6:	2100      	movs	r1, #0
 80057d8:	0030      	movs	r0, r6
 80057da:	6862      	ldr	r2, [r4, #4]
 80057dc:	f000 f858 	bl	8005890 <memchr>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d001      	beq.n	80057e8 <_printf_i+0x1c4>
 80057e4:	1b80      	subs	r0, r0, r6
 80057e6:	6060      	str	r0, [r4, #4]
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	2300      	movs	r3, #0
 80057ee:	9a04      	ldr	r2, [sp, #16]
 80057f0:	7013      	strb	r3, [r2, #0]
 80057f2:	e7ad      	b.n	8005750 <_printf_i+0x12c>
 80057f4:	0032      	movs	r2, r6
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	9906      	ldr	r1, [sp, #24]
 80057fa:	9805      	ldr	r0, [sp, #20]
 80057fc:	9d07      	ldr	r5, [sp, #28]
 80057fe:	47a8      	blx	r5
 8005800:	3001      	adds	r0, #1
 8005802:	d0af      	beq.n	8005764 <_printf_i+0x140>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	079b      	lsls	r3, r3, #30
 8005808:	d415      	bmi.n	8005836 <_printf_i+0x212>
 800580a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580c:	68e0      	ldr	r0, [r4, #12]
 800580e:	4298      	cmp	r0, r3
 8005810:	daaa      	bge.n	8005768 <_printf_i+0x144>
 8005812:	0018      	movs	r0, r3
 8005814:	e7a8      	b.n	8005768 <_printf_i+0x144>
 8005816:	0022      	movs	r2, r4
 8005818:	2301      	movs	r3, #1
 800581a:	9906      	ldr	r1, [sp, #24]
 800581c:	9805      	ldr	r0, [sp, #20]
 800581e:	9e07      	ldr	r6, [sp, #28]
 8005820:	3219      	adds	r2, #25
 8005822:	47b0      	blx	r6
 8005824:	3001      	adds	r0, #1
 8005826:	d09d      	beq.n	8005764 <_printf_i+0x140>
 8005828:	3501      	adds	r5, #1
 800582a:	68e3      	ldr	r3, [r4, #12]
 800582c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	42ab      	cmp	r3, r5
 8005832:	dcf0      	bgt.n	8005816 <_printf_i+0x1f2>
 8005834:	e7e9      	b.n	800580a <_printf_i+0x1e6>
 8005836:	2500      	movs	r5, #0
 8005838:	e7f7      	b.n	800582a <_printf_i+0x206>
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	08005a65 	.word	0x08005a65
 8005840:	08005a76 	.word	0x08005a76

08005844 <memmove>:
 8005844:	b510      	push	{r4, lr}
 8005846:	4288      	cmp	r0, r1
 8005848:	d902      	bls.n	8005850 <memmove+0xc>
 800584a:	188b      	adds	r3, r1, r2
 800584c:	4298      	cmp	r0, r3
 800584e:	d303      	bcc.n	8005858 <memmove+0x14>
 8005850:	2300      	movs	r3, #0
 8005852:	e007      	b.n	8005864 <memmove+0x20>
 8005854:	5c8b      	ldrb	r3, [r1, r2]
 8005856:	5483      	strb	r3, [r0, r2]
 8005858:	3a01      	subs	r2, #1
 800585a:	d2fb      	bcs.n	8005854 <memmove+0x10>
 800585c:	bd10      	pop	{r4, pc}
 800585e:	5ccc      	ldrb	r4, [r1, r3]
 8005860:	54c4      	strb	r4, [r0, r3]
 8005862:	3301      	adds	r3, #1
 8005864:	429a      	cmp	r2, r3
 8005866:	d1fa      	bne.n	800585e <memmove+0x1a>
 8005868:	e7f8      	b.n	800585c <memmove+0x18>
	...

0800586c <_sbrk_r>:
 800586c:	2300      	movs	r3, #0
 800586e:	b570      	push	{r4, r5, r6, lr}
 8005870:	4d06      	ldr	r5, [pc, #24]	; (800588c <_sbrk_r+0x20>)
 8005872:	0004      	movs	r4, r0
 8005874:	0008      	movs	r0, r1
 8005876:	602b      	str	r3, [r5, #0]
 8005878:	f7fb ff2c 	bl	80016d4 <_sbrk>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d103      	bne.n	8005888 <_sbrk_r+0x1c>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d000      	beq.n	8005888 <_sbrk_r+0x1c>
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	bd70      	pop	{r4, r5, r6, pc}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	20000794 	.word	0x20000794

08005890 <memchr>:
 8005890:	b2c9      	uxtb	r1, r1
 8005892:	1882      	adds	r2, r0, r2
 8005894:	4290      	cmp	r0, r2
 8005896:	d101      	bne.n	800589c <memchr+0xc>
 8005898:	2000      	movs	r0, #0
 800589a:	4770      	bx	lr
 800589c:	7803      	ldrb	r3, [r0, #0]
 800589e:	428b      	cmp	r3, r1
 80058a0:	d0fb      	beq.n	800589a <memchr+0xa>
 80058a2:	3001      	adds	r0, #1
 80058a4:	e7f6      	b.n	8005894 <memchr+0x4>

080058a6 <_realloc_r>:
 80058a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058a8:	0007      	movs	r7, r0
 80058aa:	000e      	movs	r6, r1
 80058ac:	0014      	movs	r4, r2
 80058ae:	2900      	cmp	r1, #0
 80058b0:	d105      	bne.n	80058be <_realloc_r+0x18>
 80058b2:	0011      	movs	r1, r2
 80058b4:	f7ff fc52 	bl	800515c <_malloc_r>
 80058b8:	0005      	movs	r5, r0
 80058ba:	0028      	movs	r0, r5
 80058bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058be:	2a00      	cmp	r2, #0
 80058c0:	d103      	bne.n	80058ca <_realloc_r+0x24>
 80058c2:	f7ff fbdf 	bl	8005084 <_free_r>
 80058c6:	0025      	movs	r5, r4
 80058c8:	e7f7      	b.n	80058ba <_realloc_r+0x14>
 80058ca:	f000 f81b 	bl	8005904 <_malloc_usable_size_r>
 80058ce:	9001      	str	r0, [sp, #4]
 80058d0:	4284      	cmp	r4, r0
 80058d2:	d803      	bhi.n	80058dc <_realloc_r+0x36>
 80058d4:	0035      	movs	r5, r6
 80058d6:	0843      	lsrs	r3, r0, #1
 80058d8:	42a3      	cmp	r3, r4
 80058da:	d3ee      	bcc.n	80058ba <_realloc_r+0x14>
 80058dc:	0021      	movs	r1, r4
 80058de:	0038      	movs	r0, r7
 80058e0:	f7ff fc3c 	bl	800515c <_malloc_r>
 80058e4:	1e05      	subs	r5, r0, #0
 80058e6:	d0e8      	beq.n	80058ba <_realloc_r+0x14>
 80058e8:	9b01      	ldr	r3, [sp, #4]
 80058ea:	0022      	movs	r2, r4
 80058ec:	429c      	cmp	r4, r3
 80058ee:	d900      	bls.n	80058f2 <_realloc_r+0x4c>
 80058f0:	001a      	movs	r2, r3
 80058f2:	0031      	movs	r1, r6
 80058f4:	0028      	movs	r0, r5
 80058f6:	f7ff fbbb 	bl	8005070 <memcpy>
 80058fa:	0031      	movs	r1, r6
 80058fc:	0038      	movs	r0, r7
 80058fe:	f7ff fbc1 	bl	8005084 <_free_r>
 8005902:	e7da      	b.n	80058ba <_realloc_r+0x14>

08005904 <_malloc_usable_size_r>:
 8005904:	1f0b      	subs	r3, r1, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	1f18      	subs	r0, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	da01      	bge.n	8005912 <_malloc_usable_size_r+0xe>
 800590e:	580b      	ldr	r3, [r1, r0]
 8005910:	18c0      	adds	r0, r0, r3
 8005912:	4770      	bx	lr

08005914 <_init>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591a:	bc08      	pop	{r3}
 800591c:	469e      	mov	lr, r3
 800591e:	4770      	bx	lr

08005920 <_fini>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr
