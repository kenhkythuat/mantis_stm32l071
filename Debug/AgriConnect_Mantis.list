
AgriConnect_Mantis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009654  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f5c  08009714  08009714  00019714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a670  0800a670  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a670  0800a670  0001a670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a678  0800a678  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a678  0800a678  0001a678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a67c  0800a67c  0001a67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800a680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  200000cc  0800a74c  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800a74c  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001164b  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad4  00000000  00000000  00031782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00034258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d51  00000000  00000000  00035320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001562a  00000000  00000000  00036071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001304c  00000000  00000000  0004b69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007d86e  00000000  00000000  0005e6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b78  00000000  00000000  000dbf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e0ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080096fc 	.word	0x080096fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	080096fc 	.word	0x080096fc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	0010      	movs	r0, r2
 8000248:	4662      	mov	r2, ip
 800024a:	468c      	mov	ip, r1
 800024c:	0019      	movs	r1, r3
 800024e:	4663      	mov	r3, ip
 8000250:	e000      	b.n	8000254 <__aeabi_cdcmpeq>
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_cdcmpeq>:
 8000254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000256:	f000 fe91 	bl	8000f7c <__ledf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	d401      	bmi.n	8000262 <__aeabi_cdcmpeq+0xe>
 800025e:	2100      	movs	r1, #0
 8000260:	42c8      	cmn	r0, r1
 8000262:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000264 <__aeabi_dcmpeq>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fde1 	bl	8000e2c <__eqdf2>
 800026a:	4240      	negs	r0, r0
 800026c:	3001      	adds	r0, #1
 800026e:	bd10      	pop	{r4, pc}

08000270 <__aeabi_dcmplt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 fe83 	bl	8000f7c <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	db01      	blt.n	800027e <__aeabi_dcmplt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmple>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 fe79 	bl	8000f7c <__ledf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dd01      	ble.n	8000292 <__aeabi_dcmple+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpgt>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 fe09 	bl	8000eb0 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dc01      	bgt.n	80002a6 <__aeabi_dcmpgt+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_dcmpge>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f000 fdff 	bl	8000eb0 <__gedf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	da01      	bge.n	80002ba <__aeabi_dcmpge+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			; (mov r8, r8)

080002c0 <__aeabi_cfrcmple>:
 80002c0:	4684      	mov	ip, r0
 80002c2:	0008      	movs	r0, r1
 80002c4:	4661      	mov	r1, ip
 80002c6:	e7ff      	b.n	80002c8 <__aeabi_cfcmpeq>

080002c8 <__aeabi_cfcmpeq>:
 80002c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ca:	f000 fb59 	bl	8000980 <__lesf2>
 80002ce:	2800      	cmp	r0, #0
 80002d0:	d401      	bmi.n	80002d6 <__aeabi_cfcmpeq+0xe>
 80002d2:	2100      	movs	r1, #0
 80002d4:	42c8      	cmn	r0, r1
 80002d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002d8 <__aeabi_fcmpeq>:
 80002d8:	b510      	push	{r4, lr}
 80002da:	f000 fae5 	bl	80008a8 <__eqsf2>
 80002de:	4240      	negs	r0, r0
 80002e0:	3001      	adds	r0, #1
 80002e2:	bd10      	pop	{r4, pc}

080002e4 <__aeabi_fcmplt>:
 80002e4:	b510      	push	{r4, lr}
 80002e6:	f000 fb4b 	bl	8000980 <__lesf2>
 80002ea:	2800      	cmp	r0, #0
 80002ec:	db01      	blt.n	80002f2 <__aeabi_fcmplt+0xe>
 80002ee:	2000      	movs	r0, #0
 80002f0:	bd10      	pop	{r4, pc}
 80002f2:	2001      	movs	r0, #1
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_fcmple>:
 80002f8:	b510      	push	{r4, lr}
 80002fa:	f000 fb41 	bl	8000980 <__lesf2>
 80002fe:	2800      	cmp	r0, #0
 8000300:	dd01      	ble.n	8000306 <__aeabi_fcmple+0xe>
 8000302:	2000      	movs	r0, #0
 8000304:	bd10      	pop	{r4, pc}
 8000306:	2001      	movs	r0, #1
 8000308:	bd10      	pop	{r4, pc}
 800030a:	46c0      	nop			; (mov r8, r8)

0800030c <__aeabi_fcmpgt>:
 800030c:	b510      	push	{r4, lr}
 800030e:	f000 faf1 	bl	80008f4 <__gesf2>
 8000312:	2800      	cmp	r0, #0
 8000314:	dc01      	bgt.n	800031a <__aeabi_fcmpgt+0xe>
 8000316:	2000      	movs	r0, #0
 8000318:	bd10      	pop	{r4, pc}
 800031a:	2001      	movs	r0, #1
 800031c:	bd10      	pop	{r4, pc}
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <__aeabi_fcmpge>:
 8000320:	b510      	push	{r4, lr}
 8000322:	f000 fae7 	bl	80008f4 <__gesf2>
 8000326:	2800      	cmp	r0, #0
 8000328:	da01      	bge.n	800032e <__aeabi_fcmpge+0xe>
 800032a:	2000      	movs	r0, #0
 800032c:	bd10      	pop	{r4, pc}
 800032e:	2001      	movs	r0, #1
 8000330:	bd10      	pop	{r4, pc}
 8000332:	46c0      	nop			; (mov r8, r8)

08000334 <__aeabi_uldivmod>:
 8000334:	2b00      	cmp	r3, #0
 8000336:	d111      	bne.n	800035c <__aeabi_uldivmod+0x28>
 8000338:	2a00      	cmp	r2, #0
 800033a:	d10f      	bne.n	800035c <__aeabi_uldivmod+0x28>
 800033c:	2900      	cmp	r1, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_uldivmod+0xe>
 8000340:	2800      	cmp	r0, #0
 8000342:	d002      	beq.n	800034a <__aeabi_uldivmod+0x16>
 8000344:	2100      	movs	r1, #0
 8000346:	43c9      	mvns	r1, r1
 8000348:	0008      	movs	r0, r1
 800034a:	b407      	push	{r0, r1, r2}
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <__aeabi_uldivmod+0x24>)
 800034e:	a102      	add	r1, pc, #8	; (adr r1, 8000358 <__aeabi_uldivmod+0x24>)
 8000350:	1840      	adds	r0, r0, r1
 8000352:	9002      	str	r0, [sp, #8]
 8000354:	bd03      	pop	{r0, r1, pc}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	fffffee9 	.word	0xfffffee9
 800035c:	b403      	push	{r0, r1}
 800035e:	4668      	mov	r0, sp
 8000360:	b501      	push	{r0, lr}
 8000362:	9802      	ldr	r0, [sp, #8]
 8000364:	f000 f834 	bl	80003d0 <__udivmoddi4>
 8000368:	9b01      	ldr	r3, [sp, #4]
 800036a:	469e      	mov	lr, r3
 800036c:	b002      	add	sp, #8
 800036e:	bc0c      	pop	{r2, r3}
 8000370:	4770      	bx	lr
 8000372:	46c0      	nop			; (mov r8, r8)

08000374 <__aeabi_lmul>:
 8000374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000376:	46ce      	mov	lr, r9
 8000378:	4699      	mov	r9, r3
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	469c      	mov	ip, r3
 800037e:	0413      	lsls	r3, r2, #16
 8000380:	4647      	mov	r7, r8
 8000382:	0c1b      	lsrs	r3, r3, #16
 8000384:	001d      	movs	r5, r3
 8000386:	000e      	movs	r6, r1
 8000388:	4661      	mov	r1, ip
 800038a:	0404      	lsls	r4, r0, #16
 800038c:	0c24      	lsrs	r4, r4, #16
 800038e:	b580      	push	{r7, lr}
 8000390:	0007      	movs	r7, r0
 8000392:	0c10      	lsrs	r0, r2, #16
 8000394:	434b      	muls	r3, r1
 8000396:	4365      	muls	r5, r4
 8000398:	4341      	muls	r1, r0
 800039a:	4360      	muls	r0, r4
 800039c:	0c2c      	lsrs	r4, r5, #16
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	1820      	adds	r0, r4, r0
 80003a2:	468c      	mov	ip, r1
 80003a4:	4283      	cmp	r3, r0
 80003a6:	d903      	bls.n	80003b0 <__aeabi_lmul+0x3c>
 80003a8:	2380      	movs	r3, #128	; 0x80
 80003aa:	025b      	lsls	r3, r3, #9
 80003ac:	4698      	mov	r8, r3
 80003ae:	44c4      	add	ip, r8
 80003b0:	4649      	mov	r1, r9
 80003b2:	4379      	muls	r1, r7
 80003b4:	4356      	muls	r6, r2
 80003b6:	0c03      	lsrs	r3, r0, #16
 80003b8:	042d      	lsls	r5, r5, #16
 80003ba:	0c2d      	lsrs	r5, r5, #16
 80003bc:	1989      	adds	r1, r1, r6
 80003be:	4463      	add	r3, ip
 80003c0:	0400      	lsls	r0, r0, #16
 80003c2:	1940      	adds	r0, r0, r5
 80003c4:	18c9      	adds	r1, r1, r3
 80003c6:	bcc0      	pop	{r6, r7}
 80003c8:	46b9      	mov	r9, r7
 80003ca:	46b0      	mov	r8, r6
 80003cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)

080003d0 <__udivmoddi4>:
 80003d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003d2:	4657      	mov	r7, sl
 80003d4:	464e      	mov	r6, r9
 80003d6:	4645      	mov	r5, r8
 80003d8:	46de      	mov	lr, fp
 80003da:	b5e0      	push	{r5, r6, r7, lr}
 80003dc:	0004      	movs	r4, r0
 80003de:	000d      	movs	r5, r1
 80003e0:	4692      	mov	sl, r2
 80003e2:	4699      	mov	r9, r3
 80003e4:	b083      	sub	sp, #12
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d830      	bhi.n	800044c <__udivmoddi4+0x7c>
 80003ea:	d02d      	beq.n	8000448 <__udivmoddi4+0x78>
 80003ec:	4649      	mov	r1, r9
 80003ee:	4650      	mov	r0, sl
 80003f0:	f001 fd0e 	bl	8001e10 <__clzdi2>
 80003f4:	0029      	movs	r1, r5
 80003f6:	0006      	movs	r6, r0
 80003f8:	0020      	movs	r0, r4
 80003fa:	f001 fd09 	bl	8001e10 <__clzdi2>
 80003fe:	1a33      	subs	r3, r6, r0
 8000400:	4698      	mov	r8, r3
 8000402:	3b20      	subs	r3, #32
 8000404:	d434      	bmi.n	8000470 <__udivmoddi4+0xa0>
 8000406:	469b      	mov	fp, r3
 8000408:	4653      	mov	r3, sl
 800040a:	465a      	mov	r2, fp
 800040c:	4093      	lsls	r3, r2
 800040e:	4642      	mov	r2, r8
 8000410:	001f      	movs	r7, r3
 8000412:	4653      	mov	r3, sl
 8000414:	4093      	lsls	r3, r2
 8000416:	001e      	movs	r6, r3
 8000418:	42af      	cmp	r7, r5
 800041a:	d83b      	bhi.n	8000494 <__udivmoddi4+0xc4>
 800041c:	42af      	cmp	r7, r5
 800041e:	d100      	bne.n	8000422 <__udivmoddi4+0x52>
 8000420:	e079      	b.n	8000516 <__udivmoddi4+0x146>
 8000422:	465b      	mov	r3, fp
 8000424:	1ba4      	subs	r4, r4, r6
 8000426:	41bd      	sbcs	r5, r7
 8000428:	2b00      	cmp	r3, #0
 800042a:	da00      	bge.n	800042e <__udivmoddi4+0x5e>
 800042c:	e076      	b.n	800051c <__udivmoddi4+0x14c>
 800042e:	2200      	movs	r2, #0
 8000430:	2300      	movs	r3, #0
 8000432:	9200      	str	r2, [sp, #0]
 8000434:	9301      	str	r3, [sp, #4]
 8000436:	2301      	movs	r3, #1
 8000438:	465a      	mov	r2, fp
 800043a:	4093      	lsls	r3, r2
 800043c:	9301      	str	r3, [sp, #4]
 800043e:	2301      	movs	r3, #1
 8000440:	4642      	mov	r2, r8
 8000442:	4093      	lsls	r3, r2
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	e029      	b.n	800049c <__udivmoddi4+0xcc>
 8000448:	4282      	cmp	r2, r0
 800044a:	d9cf      	bls.n	80003ec <__udivmoddi4+0x1c>
 800044c:	2200      	movs	r2, #0
 800044e:	2300      	movs	r3, #0
 8000450:	9200      	str	r2, [sp, #0]
 8000452:	9301      	str	r3, [sp, #4]
 8000454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <__udivmoddi4+0x8e>
 800045a:	601c      	str	r4, [r3, #0]
 800045c:	605d      	str	r5, [r3, #4]
 800045e:	9800      	ldr	r0, [sp, #0]
 8000460:	9901      	ldr	r1, [sp, #4]
 8000462:	b003      	add	sp, #12
 8000464:	bcf0      	pop	{r4, r5, r6, r7}
 8000466:	46bb      	mov	fp, r7
 8000468:	46b2      	mov	sl, r6
 800046a:	46a9      	mov	r9, r5
 800046c:	46a0      	mov	r8, r4
 800046e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000470:	4642      	mov	r2, r8
 8000472:	469b      	mov	fp, r3
 8000474:	2320      	movs	r3, #32
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	4652      	mov	r2, sl
 800047a:	40da      	lsrs	r2, r3
 800047c:	4641      	mov	r1, r8
 800047e:	0013      	movs	r3, r2
 8000480:	464a      	mov	r2, r9
 8000482:	408a      	lsls	r2, r1
 8000484:	0017      	movs	r7, r2
 8000486:	4642      	mov	r2, r8
 8000488:	431f      	orrs	r7, r3
 800048a:	4653      	mov	r3, sl
 800048c:	4093      	lsls	r3, r2
 800048e:	001e      	movs	r6, r3
 8000490:	42af      	cmp	r7, r5
 8000492:	d9c3      	bls.n	800041c <__udivmoddi4+0x4c>
 8000494:	2200      	movs	r2, #0
 8000496:	2300      	movs	r3, #0
 8000498:	9200      	str	r2, [sp, #0]
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	4643      	mov	r3, r8
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0d8      	beq.n	8000454 <__udivmoddi4+0x84>
 80004a2:	07fb      	lsls	r3, r7, #31
 80004a4:	0872      	lsrs	r2, r6, #1
 80004a6:	431a      	orrs	r2, r3
 80004a8:	4646      	mov	r6, r8
 80004aa:	087b      	lsrs	r3, r7, #1
 80004ac:	e00e      	b.n	80004cc <__udivmoddi4+0xfc>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d101      	bne.n	80004b6 <__udivmoddi4+0xe6>
 80004b2:	42a2      	cmp	r2, r4
 80004b4:	d80c      	bhi.n	80004d0 <__udivmoddi4+0x100>
 80004b6:	1aa4      	subs	r4, r4, r2
 80004b8:	419d      	sbcs	r5, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	1924      	adds	r4, r4, r4
 80004be:	416d      	adcs	r5, r5
 80004c0:	2100      	movs	r1, #0
 80004c2:	3e01      	subs	r6, #1
 80004c4:	1824      	adds	r4, r4, r0
 80004c6:	414d      	adcs	r5, r1
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d006      	beq.n	80004da <__udivmoddi4+0x10a>
 80004cc:	42ab      	cmp	r3, r5
 80004ce:	d9ee      	bls.n	80004ae <__udivmoddi4+0xde>
 80004d0:	3e01      	subs	r6, #1
 80004d2:	1924      	adds	r4, r4, r4
 80004d4:	416d      	adcs	r5, r5
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d1f8      	bne.n	80004cc <__udivmoddi4+0xfc>
 80004da:	9800      	ldr	r0, [sp, #0]
 80004dc:	9901      	ldr	r1, [sp, #4]
 80004de:	465b      	mov	r3, fp
 80004e0:	1900      	adds	r0, r0, r4
 80004e2:	4169      	adcs	r1, r5
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	db24      	blt.n	8000532 <__udivmoddi4+0x162>
 80004e8:	002b      	movs	r3, r5
 80004ea:	465a      	mov	r2, fp
 80004ec:	4644      	mov	r4, r8
 80004ee:	40d3      	lsrs	r3, r2
 80004f0:	002a      	movs	r2, r5
 80004f2:	40e2      	lsrs	r2, r4
 80004f4:	001c      	movs	r4, r3
 80004f6:	465b      	mov	r3, fp
 80004f8:	0015      	movs	r5, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db2a      	blt.n	8000554 <__udivmoddi4+0x184>
 80004fe:	0026      	movs	r6, r4
 8000500:	409e      	lsls	r6, r3
 8000502:	0033      	movs	r3, r6
 8000504:	0026      	movs	r6, r4
 8000506:	4647      	mov	r7, r8
 8000508:	40be      	lsls	r6, r7
 800050a:	0032      	movs	r2, r6
 800050c:	1a80      	subs	r0, r0, r2
 800050e:	4199      	sbcs	r1, r3
 8000510:	9000      	str	r0, [sp, #0]
 8000512:	9101      	str	r1, [sp, #4]
 8000514:	e79e      	b.n	8000454 <__udivmoddi4+0x84>
 8000516:	42a3      	cmp	r3, r4
 8000518:	d8bc      	bhi.n	8000494 <__udivmoddi4+0xc4>
 800051a:	e782      	b.n	8000422 <__udivmoddi4+0x52>
 800051c:	4642      	mov	r2, r8
 800051e:	2320      	movs	r3, #32
 8000520:	2100      	movs	r1, #0
 8000522:	1a9b      	subs	r3, r3, r2
 8000524:	2200      	movs	r2, #0
 8000526:	9100      	str	r1, [sp, #0]
 8000528:	9201      	str	r2, [sp, #4]
 800052a:	2201      	movs	r2, #1
 800052c:	40da      	lsrs	r2, r3
 800052e:	9201      	str	r2, [sp, #4]
 8000530:	e785      	b.n	800043e <__udivmoddi4+0x6e>
 8000532:	4642      	mov	r2, r8
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	002a      	movs	r2, r5
 800053a:	4646      	mov	r6, r8
 800053c:	409a      	lsls	r2, r3
 800053e:	0023      	movs	r3, r4
 8000540:	40f3      	lsrs	r3, r6
 8000542:	4644      	mov	r4, r8
 8000544:	4313      	orrs	r3, r2
 8000546:	002a      	movs	r2, r5
 8000548:	40e2      	lsrs	r2, r4
 800054a:	001c      	movs	r4, r3
 800054c:	465b      	mov	r3, fp
 800054e:	0015      	movs	r5, r2
 8000550:	2b00      	cmp	r3, #0
 8000552:	dad4      	bge.n	80004fe <__udivmoddi4+0x12e>
 8000554:	4642      	mov	r2, r8
 8000556:	002f      	movs	r7, r5
 8000558:	2320      	movs	r3, #32
 800055a:	0026      	movs	r6, r4
 800055c:	4097      	lsls	r7, r2
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	40de      	lsrs	r6, r3
 8000562:	003b      	movs	r3, r7
 8000564:	4333      	orrs	r3, r6
 8000566:	e7cd      	b.n	8000504 <__udivmoddi4+0x134>

08000568 <__aeabi_fadd>:
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	4647      	mov	r7, r8
 800056c:	46ce      	mov	lr, r9
 800056e:	024a      	lsls	r2, r1, #9
 8000570:	0243      	lsls	r3, r0, #9
 8000572:	0045      	lsls	r5, r0, #1
 8000574:	0fc4      	lsrs	r4, r0, #31
 8000576:	0a50      	lsrs	r0, r2, #9
 8000578:	4680      	mov	r8, r0
 800057a:	0048      	lsls	r0, r1, #1
 800057c:	0a5b      	lsrs	r3, r3, #9
 800057e:	0e00      	lsrs	r0, r0, #24
 8000580:	0992      	lsrs	r2, r2, #6
 8000582:	4694      	mov	ip, r2
 8000584:	b580      	push	{r7, lr}
 8000586:	001e      	movs	r6, r3
 8000588:	4681      	mov	r9, r0
 800058a:	0002      	movs	r2, r0
 800058c:	0e2d      	lsrs	r5, r5, #24
 800058e:	00df      	lsls	r7, r3, #3
 8000590:	0fc9      	lsrs	r1, r1, #31
 8000592:	428c      	cmp	r4, r1
 8000594:	d024      	beq.n	80005e0 <__aeabi_fadd+0x78>
 8000596:	1a28      	subs	r0, r5, r0
 8000598:	2800      	cmp	r0, #0
 800059a:	dd0e      	ble.n	80005ba <__aeabi_fadd+0x52>
 800059c:	2a00      	cmp	r2, #0
 800059e:	d13e      	bne.n	800061e <__aeabi_fadd+0xb6>
 80005a0:	4662      	mov	r2, ip
 80005a2:	2a00      	cmp	r2, #0
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fadd+0x40>
 80005a6:	e0fd      	b.n	80007a4 <__aeabi_fadd+0x23c>
 80005a8:	1e42      	subs	r2, r0, #1
 80005aa:	2801      	cmp	r0, #1
 80005ac:	d100      	bne.n	80005b0 <__aeabi_fadd+0x48>
 80005ae:	e137      	b.n	8000820 <__aeabi_fadd+0x2b8>
 80005b0:	28ff      	cmp	r0, #255	; 0xff
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0x4e>
 80005b4:	e0a9      	b.n	800070a <__aeabi_fadd+0x1a2>
 80005b6:	0010      	movs	r0, r2
 80005b8:	e039      	b.n	800062e <__aeabi_fadd+0xc6>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d063      	beq.n	8000686 <__aeabi_fadd+0x11e>
 80005be:	464b      	mov	r3, r9
 80005c0:	1b52      	subs	r2, r2, r5
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d000      	beq.n	80005c8 <__aeabi_fadd+0x60>
 80005c6:	e0e0      	b.n	800078a <__aeabi_fadd+0x222>
 80005c8:	2f00      	cmp	r7, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x66>
 80005cc:	e0ce      	b.n	800076c <__aeabi_fadd+0x204>
 80005ce:	1e53      	subs	r3, r2, #1
 80005d0:	2a01      	cmp	r2, #1
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x6e>
 80005d4:	e155      	b.n	8000882 <__aeabi_fadd+0x31a>
 80005d6:	2aff      	cmp	r2, #255	; 0xff
 80005d8:	d100      	bne.n	80005dc <__aeabi_fadd+0x74>
 80005da:	e094      	b.n	8000706 <__aeabi_fadd+0x19e>
 80005dc:	001a      	movs	r2, r3
 80005de:	e0d9      	b.n	8000794 <__aeabi_fadd+0x22c>
 80005e0:	1a2a      	subs	r2, r5, r0
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	dc00      	bgt.n	80005e8 <__aeabi_fadd+0x80>
 80005e6:	e099      	b.n	800071c <__aeabi_fadd+0x1b4>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d062      	beq.n	80006b2 <__aeabi_fadd+0x14a>
 80005ec:	2dff      	cmp	r5, #255	; 0xff
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x8a>
 80005f0:	e08b      	b.n	800070a <__aeabi_fadd+0x1a2>
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	4661      	mov	r1, ip
 80005f6:	04db      	lsls	r3, r3, #19
 80005f8:	4319      	orrs	r1, r3
 80005fa:	468c      	mov	ip, r1
 80005fc:	2a1b      	cmp	r2, #27
 80005fe:	dc00      	bgt.n	8000602 <__aeabi_fadd+0x9a>
 8000600:	e0d2      	b.n	80007a8 <__aeabi_fadd+0x240>
 8000602:	2301      	movs	r3, #1
 8000604:	19db      	adds	r3, r3, r7
 8000606:	015a      	lsls	r2, r3, #5
 8000608:	d56a      	bpl.n	80006e0 <__aeabi_fadd+0x178>
 800060a:	3501      	adds	r5, #1
 800060c:	2dff      	cmp	r5, #255	; 0xff
 800060e:	d05b      	beq.n	80006c8 <__aeabi_fadd+0x160>
 8000610:	2201      	movs	r2, #1
 8000612:	49a3      	ldr	r1, [pc, #652]	; (80008a0 <__aeabi_fadd+0x338>)
 8000614:	401a      	ands	r2, r3
 8000616:	085b      	lsrs	r3, r3, #1
 8000618:	400b      	ands	r3, r1
 800061a:	4313      	orrs	r3, r2
 800061c:	e01c      	b.n	8000658 <__aeabi_fadd+0xf0>
 800061e:	2dff      	cmp	r5, #255	; 0xff
 8000620:	d100      	bne.n	8000624 <__aeabi_fadd+0xbc>
 8000622:	e072      	b.n	800070a <__aeabi_fadd+0x1a2>
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	4662      	mov	r2, ip
 8000628:	04db      	lsls	r3, r3, #19
 800062a:	431a      	orrs	r2, r3
 800062c:	4694      	mov	ip, r2
 800062e:	281b      	cmp	r0, #27
 8000630:	dc00      	bgt.n	8000634 <__aeabi_fadd+0xcc>
 8000632:	e090      	b.n	8000756 <__aeabi_fadd+0x1ee>
 8000634:	2301      	movs	r3, #1
 8000636:	1afb      	subs	r3, r7, r3
 8000638:	015a      	lsls	r2, r3, #5
 800063a:	d551      	bpl.n	80006e0 <__aeabi_fadd+0x178>
 800063c:	019b      	lsls	r3, r3, #6
 800063e:	099e      	lsrs	r6, r3, #6
 8000640:	0030      	movs	r0, r6
 8000642:	f001 fbc7 	bl	8001dd4 <__clzsi2>
 8000646:	0033      	movs	r3, r6
 8000648:	3805      	subs	r0, #5
 800064a:	4083      	lsls	r3, r0
 800064c:	4285      	cmp	r5, r0
 800064e:	dc00      	bgt.n	8000652 <__aeabi_fadd+0xea>
 8000650:	e075      	b.n	800073e <__aeabi_fadd+0x1d6>
 8000652:	4a94      	ldr	r2, [pc, #592]	; (80008a4 <__aeabi_fadd+0x33c>)
 8000654:	1a2d      	subs	r5, r5, r0
 8000656:	4013      	ands	r3, r2
 8000658:	075a      	lsls	r2, r3, #29
 800065a:	d004      	beq.n	8000666 <__aeabi_fadd+0xfe>
 800065c:	220f      	movs	r2, #15
 800065e:	401a      	ands	r2, r3
 8000660:	2a04      	cmp	r2, #4
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0xfe>
 8000664:	3304      	adds	r3, #4
 8000666:	015a      	lsls	r2, r3, #5
 8000668:	d53c      	bpl.n	80006e4 <__aeabi_fadd+0x17c>
 800066a:	1c68      	adds	r0, r5, #1
 800066c:	2dfe      	cmp	r5, #254	; 0xfe
 800066e:	d02b      	beq.n	80006c8 <__aeabi_fadd+0x160>
 8000670:	019b      	lsls	r3, r3, #6
 8000672:	0a5e      	lsrs	r6, r3, #9
 8000674:	b2c0      	uxtb	r0, r0
 8000676:	05c0      	lsls	r0, r0, #23
 8000678:	4330      	orrs	r0, r6
 800067a:	07e4      	lsls	r4, r4, #31
 800067c:	4320      	orrs	r0, r4
 800067e:	bcc0      	pop	{r6, r7}
 8000680:	46b9      	mov	r9, r7
 8000682:	46b0      	mov	r8, r6
 8000684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000686:	20fe      	movs	r0, #254	; 0xfe
 8000688:	1c6a      	adds	r2, r5, #1
 800068a:	4210      	tst	r0, r2
 800068c:	d172      	bne.n	8000774 <__aeabi_fadd+0x20c>
 800068e:	2d00      	cmp	r5, #0
 8000690:	d000      	beq.n	8000694 <__aeabi_fadd+0x12c>
 8000692:	e0ae      	b.n	80007f2 <__aeabi_fadd+0x28a>
 8000694:	2f00      	cmp	r7, #0
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x132>
 8000698:	e0ec      	b.n	8000874 <__aeabi_fadd+0x30c>
 800069a:	4663      	mov	r3, ip
 800069c:	2000      	movs	r0, #0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0e9      	beq.n	8000676 <__aeabi_fadd+0x10e>
 80006a2:	1afb      	subs	r3, r7, r3
 80006a4:	015a      	lsls	r2, r3, #5
 80006a6:	d400      	bmi.n	80006aa <__aeabi_fadd+0x142>
 80006a8:	e0f3      	b.n	8000892 <__aeabi_fadd+0x32a>
 80006aa:	4663      	mov	r3, ip
 80006ac:	000c      	movs	r4, r1
 80006ae:	1bdb      	subs	r3, r3, r7
 80006b0:	e7d2      	b.n	8000658 <__aeabi_fadd+0xf0>
 80006b2:	4661      	mov	r1, ip
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d05b      	beq.n	8000770 <__aeabi_fadd+0x208>
 80006b8:	1e51      	subs	r1, r2, #1
 80006ba:	2a01      	cmp	r2, #1
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fadd+0x158>
 80006be:	e0a7      	b.n	8000810 <__aeabi_fadd+0x2a8>
 80006c0:	2aff      	cmp	r2, #255	; 0xff
 80006c2:	d022      	beq.n	800070a <__aeabi_fadd+0x1a2>
 80006c4:	000a      	movs	r2, r1
 80006c6:	e799      	b.n	80005fc <__aeabi_fadd+0x94>
 80006c8:	20ff      	movs	r0, #255	; 0xff
 80006ca:	2600      	movs	r6, #0
 80006cc:	e7d3      	b.n	8000676 <__aeabi_fadd+0x10e>
 80006ce:	21fe      	movs	r1, #254	; 0xfe
 80006d0:	1c6a      	adds	r2, r5, #1
 80006d2:	4211      	tst	r1, r2
 80006d4:	d073      	beq.n	80007be <__aeabi_fadd+0x256>
 80006d6:	2aff      	cmp	r2, #255	; 0xff
 80006d8:	d0f6      	beq.n	80006c8 <__aeabi_fadd+0x160>
 80006da:	0015      	movs	r5, r2
 80006dc:	4467      	add	r7, ip
 80006de:	087b      	lsrs	r3, r7, #1
 80006e0:	075a      	lsls	r2, r3, #29
 80006e2:	d1bb      	bne.n	800065c <__aeabi_fadd+0xf4>
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	2dff      	cmp	r5, #255	; 0xff
 80006e8:	d00f      	beq.n	800070a <__aeabi_fadd+0x1a2>
 80006ea:	025b      	lsls	r3, r3, #9
 80006ec:	0a5e      	lsrs	r6, r3, #9
 80006ee:	b2e8      	uxtb	r0, r5
 80006f0:	e7c1      	b.n	8000676 <__aeabi_fadd+0x10e>
 80006f2:	4662      	mov	r2, ip
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	d008      	beq.n	800070a <__aeabi_fadd+0x1a2>
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	03d2      	lsls	r2, r2, #15
 80006fc:	4213      	tst	r3, r2
 80006fe:	d004      	beq.n	800070a <__aeabi_fadd+0x1a2>
 8000700:	4640      	mov	r0, r8
 8000702:	4210      	tst	r0, r2
 8000704:	d101      	bne.n	800070a <__aeabi_fadd+0x1a2>
 8000706:	000c      	movs	r4, r1
 8000708:	4643      	mov	r3, r8
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0dc      	beq.n	80006c8 <__aeabi_fadd+0x160>
 800070e:	2680      	movs	r6, #128	; 0x80
 8000710:	03f6      	lsls	r6, r6, #15
 8000712:	431e      	orrs	r6, r3
 8000714:	0276      	lsls	r6, r6, #9
 8000716:	20ff      	movs	r0, #255	; 0xff
 8000718:	0a76      	lsrs	r6, r6, #9
 800071a:	e7ac      	b.n	8000676 <__aeabi_fadd+0x10e>
 800071c:	2a00      	cmp	r2, #0
 800071e:	d0d6      	beq.n	80006ce <__aeabi_fadd+0x166>
 8000720:	1b42      	subs	r2, r0, r5
 8000722:	2d00      	cmp	r5, #0
 8000724:	d05c      	beq.n	80007e0 <__aeabi_fadd+0x278>
 8000726:	28ff      	cmp	r0, #255	; 0xff
 8000728:	d0ee      	beq.n	8000708 <__aeabi_fadd+0x1a0>
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	04db      	lsls	r3, r3, #19
 800072e:	431f      	orrs	r7, r3
 8000730:	2a1b      	cmp	r2, #27
 8000732:	dc00      	bgt.n	8000736 <__aeabi_fadd+0x1ce>
 8000734:	e082      	b.n	800083c <__aeabi_fadd+0x2d4>
 8000736:	2301      	movs	r3, #1
 8000738:	464d      	mov	r5, r9
 800073a:	4463      	add	r3, ip
 800073c:	e763      	b.n	8000606 <__aeabi_fadd+0x9e>
 800073e:	2220      	movs	r2, #32
 8000740:	1b40      	subs	r0, r0, r5
 8000742:	3001      	adds	r0, #1
 8000744:	1a12      	subs	r2, r2, r0
 8000746:	0019      	movs	r1, r3
 8000748:	4093      	lsls	r3, r2
 800074a:	40c1      	lsrs	r1, r0
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	4193      	sbcs	r3, r2
 8000750:	2500      	movs	r5, #0
 8000752:	430b      	orrs	r3, r1
 8000754:	e780      	b.n	8000658 <__aeabi_fadd+0xf0>
 8000756:	2320      	movs	r3, #32
 8000758:	4661      	mov	r1, ip
 800075a:	1a1b      	subs	r3, r3, r0
 800075c:	4099      	lsls	r1, r3
 800075e:	4662      	mov	r2, ip
 8000760:	000b      	movs	r3, r1
 8000762:	40c2      	lsrs	r2, r0
 8000764:	1e59      	subs	r1, r3, #1
 8000766:	418b      	sbcs	r3, r1
 8000768:	4313      	orrs	r3, r2
 800076a:	e764      	b.n	8000636 <__aeabi_fadd+0xce>
 800076c:	000c      	movs	r4, r1
 800076e:	4643      	mov	r3, r8
 8000770:	0015      	movs	r5, r2
 8000772:	e7b8      	b.n	80006e6 <__aeabi_fadd+0x17e>
 8000774:	4663      	mov	r3, ip
 8000776:	1afe      	subs	r6, r7, r3
 8000778:	0173      	lsls	r3, r6, #5
 800077a:	d445      	bmi.n	8000808 <__aeabi_fadd+0x2a0>
 800077c:	2e00      	cmp	r6, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x21a>
 8000780:	e75e      	b.n	8000640 <__aeabi_fadd+0xd8>
 8000782:	2400      	movs	r4, #0
 8000784:	2000      	movs	r0, #0
 8000786:	2600      	movs	r6, #0
 8000788:	e775      	b.n	8000676 <__aeabi_fadd+0x10e>
 800078a:	2bff      	cmp	r3, #255	; 0xff
 800078c:	d0bb      	beq.n	8000706 <__aeabi_fadd+0x19e>
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	04db      	lsls	r3, r3, #19
 8000792:	431f      	orrs	r7, r3
 8000794:	2a1b      	cmp	r2, #27
 8000796:	dd47      	ble.n	8000828 <__aeabi_fadd+0x2c0>
 8000798:	2301      	movs	r3, #1
 800079a:	4662      	mov	r2, ip
 800079c:	000c      	movs	r4, r1
 800079e:	464d      	mov	r5, r9
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	e749      	b.n	8000638 <__aeabi_fadd+0xd0>
 80007a4:	0005      	movs	r5, r0
 80007a6:	e79e      	b.n	80006e6 <__aeabi_fadd+0x17e>
 80007a8:	4661      	mov	r1, ip
 80007aa:	2320      	movs	r3, #32
 80007ac:	40d1      	lsrs	r1, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	4662      	mov	r2, ip
 80007b2:	409a      	lsls	r2, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	1e5a      	subs	r2, r3, #1
 80007b8:	4193      	sbcs	r3, r2
 80007ba:	430b      	orrs	r3, r1
 80007bc:	e722      	b.n	8000604 <__aeabi_fadd+0x9c>
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d146      	bne.n	8000850 <__aeabi_fadd+0x2e8>
 80007c2:	2f00      	cmp	r7, #0
 80007c4:	d062      	beq.n	800088c <__aeabi_fadd+0x324>
 80007c6:	4663      	mov	r3, ip
 80007c8:	2000      	movs	r0, #0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x268>
 80007ce:	e752      	b.n	8000676 <__aeabi_fadd+0x10e>
 80007d0:	003b      	movs	r3, r7
 80007d2:	4463      	add	r3, ip
 80007d4:	015a      	lsls	r2, r3, #5
 80007d6:	d583      	bpl.n	80006e0 <__aeabi_fadd+0x178>
 80007d8:	4a32      	ldr	r2, [pc, #200]	; (80008a4 <__aeabi_fadd+0x33c>)
 80007da:	3501      	adds	r5, #1
 80007dc:	4013      	ands	r3, r2
 80007de:	e77f      	b.n	80006e0 <__aeabi_fadd+0x178>
 80007e0:	2f00      	cmp	r7, #0
 80007e2:	d0c4      	beq.n	800076e <__aeabi_fadd+0x206>
 80007e4:	1e53      	subs	r3, r2, #1
 80007e6:	2a01      	cmp	r2, #1
 80007e8:	d012      	beq.n	8000810 <__aeabi_fadd+0x2a8>
 80007ea:	2aff      	cmp	r2, #255	; 0xff
 80007ec:	d08c      	beq.n	8000708 <__aeabi_fadd+0x1a0>
 80007ee:	001a      	movs	r2, r3
 80007f0:	e79e      	b.n	8000730 <__aeabi_fadd+0x1c8>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fadd+0x290>
 80007f6:	e77c      	b.n	80006f2 <__aeabi_fadd+0x18a>
 80007f8:	4663      	mov	r3, ip
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d183      	bne.n	8000706 <__aeabi_fadd+0x19e>
 80007fe:	2680      	movs	r6, #128	; 0x80
 8000800:	2400      	movs	r4, #0
 8000802:	20ff      	movs	r0, #255	; 0xff
 8000804:	03f6      	lsls	r6, r6, #15
 8000806:	e736      	b.n	8000676 <__aeabi_fadd+0x10e>
 8000808:	4663      	mov	r3, ip
 800080a:	000c      	movs	r4, r1
 800080c:	1bde      	subs	r6, r3, r7
 800080e:	e717      	b.n	8000640 <__aeabi_fadd+0xd8>
 8000810:	003b      	movs	r3, r7
 8000812:	4463      	add	r3, ip
 8000814:	2501      	movs	r5, #1
 8000816:	015a      	lsls	r2, r3, #5
 8000818:	d400      	bmi.n	800081c <__aeabi_fadd+0x2b4>
 800081a:	e761      	b.n	80006e0 <__aeabi_fadd+0x178>
 800081c:	2502      	movs	r5, #2
 800081e:	e6f7      	b.n	8000610 <__aeabi_fadd+0xa8>
 8000820:	4663      	mov	r3, ip
 8000822:	2501      	movs	r5, #1
 8000824:	1afb      	subs	r3, r7, r3
 8000826:	e707      	b.n	8000638 <__aeabi_fadd+0xd0>
 8000828:	2320      	movs	r3, #32
 800082a:	1a9b      	subs	r3, r3, r2
 800082c:	0038      	movs	r0, r7
 800082e:	409f      	lsls	r7, r3
 8000830:	003b      	movs	r3, r7
 8000832:	40d0      	lsrs	r0, r2
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	4193      	sbcs	r3, r2
 8000838:	4303      	orrs	r3, r0
 800083a:	e7ae      	b.n	800079a <__aeabi_fadd+0x232>
 800083c:	2320      	movs	r3, #32
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	0039      	movs	r1, r7
 8000842:	409f      	lsls	r7, r3
 8000844:	003b      	movs	r3, r7
 8000846:	40d1      	lsrs	r1, r2
 8000848:	1e5a      	subs	r2, r3, #1
 800084a:	4193      	sbcs	r3, r2
 800084c:	430b      	orrs	r3, r1
 800084e:	e773      	b.n	8000738 <__aeabi_fadd+0x1d0>
 8000850:	2f00      	cmp	r7, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x2ee>
 8000854:	e758      	b.n	8000708 <__aeabi_fadd+0x1a0>
 8000856:	4662      	mov	r2, ip
 8000858:	2a00      	cmp	r2, #0
 800085a:	d100      	bne.n	800085e <__aeabi_fadd+0x2f6>
 800085c:	e755      	b.n	800070a <__aeabi_fadd+0x1a2>
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	03d2      	lsls	r2, r2, #15
 8000862:	4213      	tst	r3, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_fadd+0x300>
 8000866:	e750      	b.n	800070a <__aeabi_fadd+0x1a2>
 8000868:	4641      	mov	r1, r8
 800086a:	4211      	tst	r1, r2
 800086c:	d000      	beq.n	8000870 <__aeabi_fadd+0x308>
 800086e:	e74c      	b.n	800070a <__aeabi_fadd+0x1a2>
 8000870:	4643      	mov	r3, r8
 8000872:	e74a      	b.n	800070a <__aeabi_fadd+0x1a2>
 8000874:	4663      	mov	r3, ip
 8000876:	2b00      	cmp	r3, #0
 8000878:	d083      	beq.n	8000782 <__aeabi_fadd+0x21a>
 800087a:	000c      	movs	r4, r1
 800087c:	4646      	mov	r6, r8
 800087e:	2000      	movs	r0, #0
 8000880:	e6f9      	b.n	8000676 <__aeabi_fadd+0x10e>
 8000882:	4663      	mov	r3, ip
 8000884:	000c      	movs	r4, r1
 8000886:	1bdb      	subs	r3, r3, r7
 8000888:	3501      	adds	r5, #1
 800088a:	e6d5      	b.n	8000638 <__aeabi_fadd+0xd0>
 800088c:	4646      	mov	r6, r8
 800088e:	2000      	movs	r0, #0
 8000890:	e6f1      	b.n	8000676 <__aeabi_fadd+0x10e>
 8000892:	2b00      	cmp	r3, #0
 8000894:	d000      	beq.n	8000898 <__aeabi_fadd+0x330>
 8000896:	e723      	b.n	80006e0 <__aeabi_fadd+0x178>
 8000898:	2400      	movs	r4, #0
 800089a:	2600      	movs	r6, #0
 800089c:	e6eb      	b.n	8000676 <__aeabi_fadd+0x10e>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	7dffffff 	.word	0x7dffffff
 80008a4:	fbffffff 	.word	0xfbffffff

080008a8 <__eqsf2>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	0042      	lsls	r2, r0, #1
 80008ac:	0245      	lsls	r5, r0, #9
 80008ae:	024e      	lsls	r6, r1, #9
 80008b0:	004c      	lsls	r4, r1, #1
 80008b2:	0fc3      	lsrs	r3, r0, #31
 80008b4:	0a6d      	lsrs	r5, r5, #9
 80008b6:	2001      	movs	r0, #1
 80008b8:	0e12      	lsrs	r2, r2, #24
 80008ba:	0a76      	lsrs	r6, r6, #9
 80008bc:	0e24      	lsrs	r4, r4, #24
 80008be:	0fc9      	lsrs	r1, r1, #31
 80008c0:	2aff      	cmp	r2, #255	; 0xff
 80008c2:	d006      	beq.n	80008d2 <__eqsf2+0x2a>
 80008c4:	2cff      	cmp	r4, #255	; 0xff
 80008c6:	d003      	beq.n	80008d0 <__eqsf2+0x28>
 80008c8:	42a2      	cmp	r2, r4
 80008ca:	d101      	bne.n	80008d0 <__eqsf2+0x28>
 80008cc:	42b5      	cmp	r5, r6
 80008ce:	d006      	beq.n	80008de <__eqsf2+0x36>
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d1fc      	bne.n	80008d0 <__eqsf2+0x28>
 80008d6:	2cff      	cmp	r4, #255	; 0xff
 80008d8:	d1fa      	bne.n	80008d0 <__eqsf2+0x28>
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d1f8      	bne.n	80008d0 <__eqsf2+0x28>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d006      	beq.n	80008f0 <__eqsf2+0x48>
 80008e2:	2001      	movs	r0, #1
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	d1f3      	bne.n	80008d0 <__eqsf2+0x28>
 80008e8:	0028      	movs	r0, r5
 80008ea:	1e43      	subs	r3, r0, #1
 80008ec:	4198      	sbcs	r0, r3
 80008ee:	e7ef      	b.n	80008d0 <__eqsf2+0x28>
 80008f0:	2000      	movs	r0, #0
 80008f2:	e7ed      	b.n	80008d0 <__eqsf2+0x28>

080008f4 <__gesf2>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	0042      	lsls	r2, r0, #1
 80008f8:	0245      	lsls	r5, r0, #9
 80008fa:	024e      	lsls	r6, r1, #9
 80008fc:	004c      	lsls	r4, r1, #1
 80008fe:	0fc3      	lsrs	r3, r0, #31
 8000900:	0a6d      	lsrs	r5, r5, #9
 8000902:	0e12      	lsrs	r2, r2, #24
 8000904:	0a76      	lsrs	r6, r6, #9
 8000906:	0e24      	lsrs	r4, r4, #24
 8000908:	0fc8      	lsrs	r0, r1, #31
 800090a:	2aff      	cmp	r2, #255	; 0xff
 800090c:	d01b      	beq.n	8000946 <__gesf2+0x52>
 800090e:	2cff      	cmp	r4, #255	; 0xff
 8000910:	d00e      	beq.n	8000930 <__gesf2+0x3c>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d11b      	bne.n	800094e <__gesf2+0x5a>
 8000916:	2c00      	cmp	r4, #0
 8000918:	d101      	bne.n	800091e <__gesf2+0x2a>
 800091a:	2e00      	cmp	r6, #0
 800091c:	d01c      	beq.n	8000958 <__gesf2+0x64>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d00c      	beq.n	800093c <__gesf2+0x48>
 8000922:	4283      	cmp	r3, r0
 8000924:	d01c      	beq.n	8000960 <__gesf2+0x6c>
 8000926:	2102      	movs	r1, #2
 8000928:	1e58      	subs	r0, r3, #1
 800092a:	4008      	ands	r0, r1
 800092c:	3801      	subs	r0, #1
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	2e00      	cmp	r6, #0
 8000932:	d122      	bne.n	800097a <__gesf2+0x86>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d1f4      	bne.n	8000922 <__gesf2+0x2e>
 8000938:	2d00      	cmp	r5, #0
 800093a:	d1f2      	bne.n	8000922 <__gesf2+0x2e>
 800093c:	2800      	cmp	r0, #0
 800093e:	d1f6      	bne.n	800092e <__gesf2+0x3a>
 8000940:	2001      	movs	r0, #1
 8000942:	4240      	negs	r0, r0
 8000944:	e7f3      	b.n	800092e <__gesf2+0x3a>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d117      	bne.n	800097a <__gesf2+0x86>
 800094a:	2cff      	cmp	r4, #255	; 0xff
 800094c:	d0f0      	beq.n	8000930 <__gesf2+0x3c>
 800094e:	2c00      	cmp	r4, #0
 8000950:	d1e7      	bne.n	8000922 <__gesf2+0x2e>
 8000952:	2e00      	cmp	r6, #0
 8000954:	d1e5      	bne.n	8000922 <__gesf2+0x2e>
 8000956:	e7e6      	b.n	8000926 <__gesf2+0x32>
 8000958:	2000      	movs	r0, #0
 800095a:	2d00      	cmp	r5, #0
 800095c:	d0e7      	beq.n	800092e <__gesf2+0x3a>
 800095e:	e7e2      	b.n	8000926 <__gesf2+0x32>
 8000960:	42a2      	cmp	r2, r4
 8000962:	dc05      	bgt.n	8000970 <__gesf2+0x7c>
 8000964:	dbea      	blt.n	800093c <__gesf2+0x48>
 8000966:	42b5      	cmp	r5, r6
 8000968:	d802      	bhi.n	8000970 <__gesf2+0x7c>
 800096a:	d3e7      	bcc.n	800093c <__gesf2+0x48>
 800096c:	2000      	movs	r0, #0
 800096e:	e7de      	b.n	800092e <__gesf2+0x3a>
 8000970:	4243      	negs	r3, r0
 8000972:	4158      	adcs	r0, r3
 8000974:	0040      	lsls	r0, r0, #1
 8000976:	3801      	subs	r0, #1
 8000978:	e7d9      	b.n	800092e <__gesf2+0x3a>
 800097a:	2002      	movs	r0, #2
 800097c:	4240      	negs	r0, r0
 800097e:	e7d6      	b.n	800092e <__gesf2+0x3a>

08000980 <__lesf2>:
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	0042      	lsls	r2, r0, #1
 8000984:	0245      	lsls	r5, r0, #9
 8000986:	024e      	lsls	r6, r1, #9
 8000988:	004c      	lsls	r4, r1, #1
 800098a:	0fc3      	lsrs	r3, r0, #31
 800098c:	0a6d      	lsrs	r5, r5, #9
 800098e:	0e12      	lsrs	r2, r2, #24
 8000990:	0a76      	lsrs	r6, r6, #9
 8000992:	0e24      	lsrs	r4, r4, #24
 8000994:	0fc8      	lsrs	r0, r1, #31
 8000996:	2aff      	cmp	r2, #255	; 0xff
 8000998:	d00b      	beq.n	80009b2 <__lesf2+0x32>
 800099a:	2cff      	cmp	r4, #255	; 0xff
 800099c:	d00d      	beq.n	80009ba <__lesf2+0x3a>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d11f      	bne.n	80009e2 <__lesf2+0x62>
 80009a2:	2c00      	cmp	r4, #0
 80009a4:	d116      	bne.n	80009d4 <__lesf2+0x54>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	d114      	bne.n	80009d4 <__lesf2+0x54>
 80009aa:	2000      	movs	r0, #0
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d010      	beq.n	80009d2 <__lesf2+0x52>
 80009b0:	e009      	b.n	80009c6 <__lesf2+0x46>
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d10c      	bne.n	80009d0 <__lesf2+0x50>
 80009b6:	2cff      	cmp	r4, #255	; 0xff
 80009b8:	d113      	bne.n	80009e2 <__lesf2+0x62>
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	d108      	bne.n	80009d0 <__lesf2+0x50>
 80009be:	2a00      	cmp	r2, #0
 80009c0:	d008      	beq.n	80009d4 <__lesf2+0x54>
 80009c2:	4283      	cmp	r3, r0
 80009c4:	d012      	beq.n	80009ec <__lesf2+0x6c>
 80009c6:	2102      	movs	r1, #2
 80009c8:	1e58      	subs	r0, r3, #1
 80009ca:	4008      	ands	r0, r1
 80009cc:	3801      	subs	r0, #1
 80009ce:	e000      	b.n	80009d2 <__lesf2+0x52>
 80009d0:	2002      	movs	r0, #2
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d1f4      	bne.n	80009c2 <__lesf2+0x42>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d1fa      	bne.n	80009d2 <__lesf2+0x52>
 80009dc:	2001      	movs	r0, #1
 80009de:	4240      	negs	r0, r0
 80009e0:	e7f7      	b.n	80009d2 <__lesf2+0x52>
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	d1ed      	bne.n	80009c2 <__lesf2+0x42>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d1eb      	bne.n	80009c2 <__lesf2+0x42>
 80009ea:	e7ec      	b.n	80009c6 <__lesf2+0x46>
 80009ec:	42a2      	cmp	r2, r4
 80009ee:	dc05      	bgt.n	80009fc <__lesf2+0x7c>
 80009f0:	dbf2      	blt.n	80009d8 <__lesf2+0x58>
 80009f2:	42b5      	cmp	r5, r6
 80009f4:	d802      	bhi.n	80009fc <__lesf2+0x7c>
 80009f6:	d3ef      	bcc.n	80009d8 <__lesf2+0x58>
 80009f8:	2000      	movs	r0, #0
 80009fa:	e7ea      	b.n	80009d2 <__lesf2+0x52>
 80009fc:	4243      	negs	r3, r0
 80009fe:	4158      	adcs	r0, r3
 8000a00:	0040      	lsls	r0, r0, #1
 8000a02:	3801      	subs	r0, #1
 8000a04:	e7e5      	b.n	80009d2 <__lesf2+0x52>
 8000a06:	46c0      	nop			; (mov r8, r8)

08000a08 <__aeabi_fsub>:
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	46c6      	mov	lr, r8
 8000a0c:	0243      	lsls	r3, r0, #9
 8000a0e:	0a5b      	lsrs	r3, r3, #9
 8000a10:	0045      	lsls	r5, r0, #1
 8000a12:	00da      	lsls	r2, r3, #3
 8000a14:	0fc4      	lsrs	r4, r0, #31
 8000a16:	0248      	lsls	r0, r1, #9
 8000a18:	004f      	lsls	r7, r1, #1
 8000a1a:	4694      	mov	ip, r2
 8000a1c:	0a42      	lsrs	r2, r0, #9
 8000a1e:	001e      	movs	r6, r3
 8000a20:	4690      	mov	r8, r2
 8000a22:	b500      	push	{lr}
 8000a24:	0e2d      	lsrs	r5, r5, #24
 8000a26:	0e3f      	lsrs	r7, r7, #24
 8000a28:	0fc9      	lsrs	r1, r1, #31
 8000a2a:	0980      	lsrs	r0, r0, #6
 8000a2c:	2fff      	cmp	r7, #255	; 0xff
 8000a2e:	d059      	beq.n	8000ae4 <__aeabi_fsub+0xdc>
 8000a30:	2201      	movs	r2, #1
 8000a32:	4051      	eors	r1, r2
 8000a34:	428c      	cmp	r4, r1
 8000a36:	d039      	beq.n	8000aac <__aeabi_fsub+0xa4>
 8000a38:	1bea      	subs	r2, r5, r7
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	dd58      	ble.n	8000af0 <__aeabi_fsub+0xe8>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d068      	beq.n	8000b14 <__aeabi_fsub+0x10c>
 8000a42:	2dff      	cmp	r5, #255	; 0xff
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0x40>
 8000a46:	e0d1      	b.n	8000bec <__aeabi_fsub+0x1e4>
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	04db      	lsls	r3, r3, #19
 8000a4c:	4318      	orrs	r0, r3
 8000a4e:	2a1b      	cmp	r2, #27
 8000a50:	dc00      	bgt.n	8000a54 <__aeabi_fsub+0x4c>
 8000a52:	e0e3      	b.n	8000c1c <__aeabi_fsub+0x214>
 8000a54:	2301      	movs	r3, #1
 8000a56:	4662      	mov	r2, ip
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	015a      	lsls	r2, r3, #5
 8000a5c:	d400      	bmi.n	8000a60 <__aeabi_fsub+0x58>
 8000a5e:	e0ac      	b.n	8000bba <__aeabi_fsub+0x1b2>
 8000a60:	019b      	lsls	r3, r3, #6
 8000a62:	099e      	lsrs	r6, r3, #6
 8000a64:	0030      	movs	r0, r6
 8000a66:	f001 f9b5 	bl	8001dd4 <__clzsi2>
 8000a6a:	0033      	movs	r3, r6
 8000a6c:	3805      	subs	r0, #5
 8000a6e:	4083      	lsls	r3, r0
 8000a70:	4285      	cmp	r5, r0
 8000a72:	dc00      	bgt.n	8000a76 <__aeabi_fsub+0x6e>
 8000a74:	e0c6      	b.n	8000c04 <__aeabi_fsub+0x1fc>
 8000a76:	4ab2      	ldr	r2, [pc, #712]	; (8000d40 <__aeabi_fsub+0x338>)
 8000a78:	1a2d      	subs	r5, r5, r0
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	075a      	lsls	r2, r3, #29
 8000a7e:	d004      	beq.n	8000a8a <__aeabi_fsub+0x82>
 8000a80:	220f      	movs	r2, #15
 8000a82:	401a      	ands	r2, r3
 8000a84:	2a04      	cmp	r2, #4
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0x82>
 8000a88:	3304      	adds	r3, #4
 8000a8a:	015a      	lsls	r2, r3, #5
 8000a8c:	d400      	bmi.n	8000a90 <__aeabi_fsub+0x88>
 8000a8e:	e097      	b.n	8000bc0 <__aeabi_fsub+0x1b8>
 8000a90:	1c6a      	adds	r2, r5, #1
 8000a92:	2dfe      	cmp	r5, #254	; 0xfe
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fsub+0x90>
 8000a96:	e084      	b.n	8000ba2 <__aeabi_fsub+0x19a>
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	0a5e      	lsrs	r6, r3, #9
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	05d0      	lsls	r0, r2, #23
 8000aa0:	4330      	orrs	r0, r6
 8000aa2:	07e4      	lsls	r4, r4, #31
 8000aa4:	4320      	orrs	r0, r4
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	46b8      	mov	r8, r7
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aac:	1bea      	subs	r2, r5, r7
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	dd41      	ble.n	8000b36 <__aeabi_fsub+0x12e>
 8000ab2:	2f00      	cmp	r7, #0
 8000ab4:	d06b      	beq.n	8000b8e <__aeabi_fsub+0x186>
 8000ab6:	2dff      	cmp	r5, #255	; 0xff
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fsub+0xb4>
 8000aba:	e097      	b.n	8000bec <__aeabi_fsub+0x1e4>
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	04db      	lsls	r3, r3, #19
 8000ac0:	4318      	orrs	r0, r3
 8000ac2:	2a1b      	cmp	r2, #27
 8000ac4:	dc00      	bgt.n	8000ac8 <__aeabi_fsub+0xc0>
 8000ac6:	e0cc      	b.n	8000c62 <__aeabi_fsub+0x25a>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	4463      	add	r3, ip
 8000acc:	015a      	lsls	r2, r3, #5
 8000ace:	d574      	bpl.n	8000bba <__aeabi_fsub+0x1b2>
 8000ad0:	3501      	adds	r5, #1
 8000ad2:	2dff      	cmp	r5, #255	; 0xff
 8000ad4:	d065      	beq.n	8000ba2 <__aeabi_fsub+0x19a>
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	499a      	ldr	r1, [pc, #616]	; (8000d44 <__aeabi_fsub+0x33c>)
 8000ada:	401a      	ands	r2, r3
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	400b      	ands	r3, r1
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	e7cb      	b.n	8000a7c <__aeabi_fsub+0x74>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d01f      	beq.n	8000b28 <__aeabi_fsub+0x120>
 8000ae8:	428c      	cmp	r4, r1
 8000aea:	d022      	beq.n	8000b32 <__aeabi_fsub+0x12a>
 8000aec:	002a      	movs	r2, r5
 8000aee:	3aff      	subs	r2, #255	; 0xff
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d035      	beq.n	8000b60 <__aeabi_fsub+0x158>
 8000af4:	1b7a      	subs	r2, r7, r5
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d000      	beq.n	8000afc <__aeabi_fsub+0xf4>
 8000afa:	e099      	b.n	8000c30 <__aeabi_fsub+0x228>
 8000afc:	4663      	mov	r3, ip
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d100      	bne.n	8000b04 <__aeabi_fsub+0xfc>
 8000b02:	e0dd      	b.n	8000cc0 <__aeabi_fsub+0x2b8>
 8000b04:	1e53      	subs	r3, r2, #1
 8000b06:	2a01      	cmp	r2, #1
 8000b08:	d100      	bne.n	8000b0c <__aeabi_fsub+0x104>
 8000b0a:	e105      	b.n	8000d18 <__aeabi_fsub+0x310>
 8000b0c:	2aff      	cmp	r2, #255	; 0xff
 8000b0e:	d06b      	beq.n	8000be8 <__aeabi_fsub+0x1e0>
 8000b10:	001a      	movs	r2, r3
 8000b12:	e094      	b.n	8000c3e <__aeabi_fsub+0x236>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d073      	beq.n	8000c00 <__aeabi_fsub+0x1f8>
 8000b18:	1e51      	subs	r1, r2, #1
 8000b1a:	2a01      	cmp	r2, #1
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x118>
 8000b1e:	e0df      	b.n	8000ce0 <__aeabi_fsub+0x2d8>
 8000b20:	2aff      	cmp	r2, #255	; 0xff
 8000b22:	d063      	beq.n	8000bec <__aeabi_fsub+0x1e4>
 8000b24:	000a      	movs	r2, r1
 8000b26:	e792      	b.n	8000a4e <__aeabi_fsub+0x46>
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4051      	eors	r1, r2
 8000b2c:	42a1      	cmp	r1, r4
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_fsub+0x12a>
 8000b30:	e782      	b.n	8000a38 <__aeabi_fsub+0x30>
 8000b32:	002a      	movs	r2, r5
 8000b34:	3aff      	subs	r2, #255	; 0xff
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	d036      	beq.n	8000ba8 <__aeabi_fsub+0x1a0>
 8000b3a:	1b7a      	subs	r2, r7, r5
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_fsub+0x13a>
 8000b40:	e0aa      	b.n	8000c98 <__aeabi_fsub+0x290>
 8000b42:	2fff      	cmp	r7, #255	; 0xff
 8000b44:	d100      	bne.n	8000b48 <__aeabi_fsub+0x140>
 8000b46:	e0da      	b.n	8000cfe <__aeabi_fsub+0x2f6>
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	4661      	mov	r1, ip
 8000b4c:	04db      	lsls	r3, r3, #19
 8000b4e:	4319      	orrs	r1, r3
 8000b50:	468c      	mov	ip, r1
 8000b52:	2a1b      	cmp	r2, #27
 8000b54:	dc00      	bgt.n	8000b58 <__aeabi_fsub+0x150>
 8000b56:	e0d4      	b.n	8000d02 <__aeabi_fsub+0x2fa>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	003d      	movs	r5, r7
 8000b5c:	181b      	adds	r3, r3, r0
 8000b5e:	e7b5      	b.n	8000acc <__aeabi_fsub+0xc4>
 8000b60:	27fe      	movs	r7, #254	; 0xfe
 8000b62:	1c6a      	adds	r2, r5, #1
 8000b64:	4217      	tst	r7, r2
 8000b66:	d171      	bne.n	8000c4c <__aeabi_fsub+0x244>
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_fsub+0x166>
 8000b6c:	e09e      	b.n	8000cac <__aeabi_fsub+0x2a4>
 8000b6e:	4663      	mov	r3, ip
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_fsub+0x16e>
 8000b74:	e0d5      	b.n	8000d22 <__aeabi_fsub+0x31a>
 8000b76:	2200      	movs	r2, #0
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_fsub+0x176>
 8000b7c:	e78f      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000b7e:	1a1b      	subs	r3, r3, r0
 8000b80:	015e      	lsls	r6, r3, #5
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_fsub+0x17e>
 8000b84:	e0d6      	b.n	8000d34 <__aeabi_fsub+0x32c>
 8000b86:	4663      	mov	r3, ip
 8000b88:	000c      	movs	r4, r1
 8000b8a:	1ac3      	subs	r3, r0, r3
 8000b8c:	e776      	b.n	8000a7c <__aeabi_fsub+0x74>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d036      	beq.n	8000c00 <__aeabi_fsub+0x1f8>
 8000b92:	1e51      	subs	r1, r2, #1
 8000b94:	2a01      	cmp	r2, #1
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fsub+0x192>
 8000b98:	e09a      	b.n	8000cd0 <__aeabi_fsub+0x2c8>
 8000b9a:	2aff      	cmp	r2, #255	; 0xff
 8000b9c:	d026      	beq.n	8000bec <__aeabi_fsub+0x1e4>
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	e78f      	b.n	8000ac2 <__aeabi_fsub+0xba>
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	e77a      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000ba8:	27fe      	movs	r7, #254	; 0xfe
 8000baa:	1c6a      	adds	r2, r5, #1
 8000bac:	4217      	tst	r7, r2
 8000bae:	d062      	beq.n	8000c76 <__aeabi_fsub+0x26e>
 8000bb0:	2aff      	cmp	r2, #255	; 0xff
 8000bb2:	d0f6      	beq.n	8000ba2 <__aeabi_fsub+0x19a>
 8000bb4:	0015      	movs	r5, r2
 8000bb6:	4460      	add	r0, ip
 8000bb8:	0843      	lsrs	r3, r0, #1
 8000bba:	075a      	lsls	r2, r3, #29
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_fsub+0x1b8>
 8000bbe:	e75f      	b.n	8000a80 <__aeabi_fsub+0x78>
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	2dff      	cmp	r5, #255	; 0xff
 8000bc4:	d012      	beq.n	8000bec <__aeabi_fsub+0x1e4>
 8000bc6:	025b      	lsls	r3, r3, #9
 8000bc8:	0a5e      	lsrs	r6, r3, #9
 8000bca:	b2ea      	uxtb	r2, r5
 8000bcc:	e767      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000bce:	4662      	mov	r2, ip
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x1ce>
 8000bd4:	e093      	b.n	8000cfe <__aeabi_fsub+0x2f6>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d008      	beq.n	8000bec <__aeabi_fsub+0x1e4>
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	03d2      	lsls	r2, r2, #15
 8000bde:	4213      	tst	r3, r2
 8000be0:	d004      	beq.n	8000bec <__aeabi_fsub+0x1e4>
 8000be2:	4640      	mov	r0, r8
 8000be4:	4210      	tst	r0, r2
 8000be6:	d101      	bne.n	8000bec <__aeabi_fsub+0x1e4>
 8000be8:	000c      	movs	r4, r1
 8000bea:	4643      	mov	r3, r8
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0d8      	beq.n	8000ba2 <__aeabi_fsub+0x19a>
 8000bf0:	2680      	movs	r6, #128	; 0x80
 8000bf2:	03f6      	lsls	r6, r6, #15
 8000bf4:	431e      	orrs	r6, r3
 8000bf6:	0276      	lsls	r6, r6, #9
 8000bf8:	22ff      	movs	r2, #255	; 0xff
 8000bfa:	0a76      	lsrs	r6, r6, #9
 8000bfc:	e74f      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	0015      	movs	r5, r2
 8000c02:	e7de      	b.n	8000bc2 <__aeabi_fsub+0x1ba>
 8000c04:	2220      	movs	r2, #32
 8000c06:	1b40      	subs	r0, r0, r5
 8000c08:	3001      	adds	r0, #1
 8000c0a:	1a12      	subs	r2, r2, r0
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	40c1      	lsrs	r1, r0
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	4193      	sbcs	r3, r2
 8000c16:	2500      	movs	r5, #0
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	e72f      	b.n	8000a7c <__aeabi_fsub+0x74>
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	0001      	movs	r1, r0
 8000c22:	4098      	lsls	r0, r3
 8000c24:	0003      	movs	r3, r0
 8000c26:	40d1      	lsrs	r1, r2
 8000c28:	1e5a      	subs	r2, r3, #1
 8000c2a:	4193      	sbcs	r3, r2
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	e712      	b.n	8000a56 <__aeabi_fsub+0x4e>
 8000c30:	2fff      	cmp	r7, #255	; 0xff
 8000c32:	d0d9      	beq.n	8000be8 <__aeabi_fsub+0x1e0>
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	4664      	mov	r4, ip
 8000c38:	04db      	lsls	r3, r3, #19
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	46a4      	mov	ip, r4
 8000c3e:	2a1b      	cmp	r2, #27
 8000c40:	dd52      	ble.n	8000ce8 <__aeabi_fsub+0x2e0>
 8000c42:	2301      	movs	r3, #1
 8000c44:	000c      	movs	r4, r1
 8000c46:	003d      	movs	r5, r7
 8000c48:	1ac3      	subs	r3, r0, r3
 8000c4a:	e706      	b.n	8000a5a <__aeabi_fsub+0x52>
 8000c4c:	4663      	mov	r3, ip
 8000c4e:	1a1e      	subs	r6, r3, r0
 8000c50:	0173      	lsls	r3, r6, #5
 8000c52:	d439      	bmi.n	8000cc8 <__aeabi_fsub+0x2c0>
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fsub+0x252>
 8000c58:	e704      	b.n	8000a64 <__aeabi_fsub+0x5c>
 8000c5a:	2400      	movs	r4, #0
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2600      	movs	r6, #0
 8000c60:	e71d      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000c62:	2320      	movs	r3, #32
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	0001      	movs	r1, r0
 8000c68:	4098      	lsls	r0, r3
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	40d1      	lsrs	r1, r2
 8000c6e:	1e5a      	subs	r2, r3, #1
 8000c70:	4193      	sbcs	r3, r2
 8000c72:	430b      	orrs	r3, r1
 8000c74:	e729      	b.n	8000aca <__aeabi_fsub+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d1a9      	bne.n	8000bce <__aeabi_fsub+0x1c6>
 8000c7a:	4663      	mov	r3, ip
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d056      	beq.n	8000d2e <__aeabi_fsub+0x326>
 8000c80:	2200      	movs	r2, #0
 8000c82:	2800      	cmp	r0, #0
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x280>
 8000c86:	e70a      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	4463      	add	r3, ip
 8000c8c:	015a      	lsls	r2, r3, #5
 8000c8e:	d594      	bpl.n	8000bba <__aeabi_fsub+0x1b2>
 8000c90:	4a2b      	ldr	r2, [pc, #172]	; (8000d40 <__aeabi_fsub+0x338>)
 8000c92:	3501      	adds	r5, #1
 8000c94:	4013      	ands	r3, r2
 8000c96:	e790      	b.n	8000bba <__aeabi_fsub+0x1b2>
 8000c98:	4663      	mov	r3, ip
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0af      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000c9e:	1e53      	subs	r3, r2, #1
 8000ca0:	2a01      	cmp	r2, #1
 8000ca2:	d015      	beq.n	8000cd0 <__aeabi_fsub+0x2c8>
 8000ca4:	2aff      	cmp	r2, #255	; 0xff
 8000ca6:	d02a      	beq.n	8000cfe <__aeabi_fsub+0x2f6>
 8000ca8:	001a      	movs	r2, r3
 8000caa:	e752      	b.n	8000b52 <__aeabi_fsub+0x14a>
 8000cac:	4662      	mov	r2, ip
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d191      	bne.n	8000bd6 <__aeabi_fsub+0x1ce>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d198      	bne.n	8000be8 <__aeabi_fsub+0x1e0>
 8000cb6:	2680      	movs	r6, #128	; 0x80
 8000cb8:	2400      	movs	r4, #0
 8000cba:	22ff      	movs	r2, #255	; 0xff
 8000cbc:	03f6      	lsls	r6, r6, #15
 8000cbe:	e6ee      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000cc0:	000c      	movs	r4, r1
 8000cc2:	4643      	mov	r3, r8
 8000cc4:	0015      	movs	r5, r2
 8000cc6:	e77c      	b.n	8000bc2 <__aeabi_fsub+0x1ba>
 8000cc8:	4663      	mov	r3, ip
 8000cca:	000c      	movs	r4, r1
 8000ccc:	1ac6      	subs	r6, r0, r3
 8000cce:	e6c9      	b.n	8000a64 <__aeabi_fsub+0x5c>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	4463      	add	r3, ip
 8000cd4:	2501      	movs	r5, #1
 8000cd6:	015a      	lsls	r2, r3, #5
 8000cd8:	d400      	bmi.n	8000cdc <__aeabi_fsub+0x2d4>
 8000cda:	e76e      	b.n	8000bba <__aeabi_fsub+0x1b2>
 8000cdc:	2502      	movs	r5, #2
 8000cde:	e6fa      	b.n	8000ad6 <__aeabi_fsub+0xce>
 8000ce0:	4663      	mov	r3, ip
 8000ce2:	2501      	movs	r5, #1
 8000ce4:	1a1b      	subs	r3, r3, r0
 8000ce6:	e6b8      	b.n	8000a5a <__aeabi_fsub+0x52>
 8000ce8:	4664      	mov	r4, ip
 8000cea:	2320      	movs	r3, #32
 8000cec:	40d4      	lsrs	r4, r2
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	4662      	mov	r2, ip
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	4193      	sbcs	r3, r2
 8000cfa:	4323      	orrs	r3, r4
 8000cfc:	e7a2      	b.n	8000c44 <__aeabi_fsub+0x23c>
 8000cfe:	4643      	mov	r3, r8
 8000d00:	e774      	b.n	8000bec <__aeabi_fsub+0x1e4>
 8000d02:	4661      	mov	r1, ip
 8000d04:	2320      	movs	r3, #32
 8000d06:	40d1      	lsrs	r1, r2
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	4662      	mov	r2, ip
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	0013      	movs	r3, r2
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	4193      	sbcs	r3, r2
 8000d14:	430b      	orrs	r3, r1
 8000d16:	e720      	b.n	8000b5a <__aeabi_fsub+0x152>
 8000d18:	4663      	mov	r3, ip
 8000d1a:	000c      	movs	r4, r1
 8000d1c:	2501      	movs	r5, #1
 8000d1e:	1ac3      	subs	r3, r0, r3
 8000d20:	e69b      	b.n	8000a5a <__aeabi_fsub+0x52>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d099      	beq.n	8000c5a <__aeabi_fsub+0x252>
 8000d26:	000c      	movs	r4, r1
 8000d28:	4646      	mov	r6, r8
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	e6b7      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000d2e:	4646      	mov	r6, r8
 8000d30:	2200      	movs	r2, #0
 8000d32:	e6b4      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d000      	beq.n	8000d3a <__aeabi_fsub+0x332>
 8000d38:	e73f      	b.n	8000bba <__aeabi_fsub+0x1b2>
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e6ae      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000d40:	fbffffff 	.word	0xfbffffff
 8000d44:	7dffffff 	.word	0x7dffffff

08000d48 <__aeabi_f2iz>:
 8000d48:	0241      	lsls	r1, r0, #9
 8000d4a:	0042      	lsls	r2, r0, #1
 8000d4c:	0fc3      	lsrs	r3, r0, #31
 8000d4e:	0a49      	lsrs	r1, r1, #9
 8000d50:	2000      	movs	r0, #0
 8000d52:	0e12      	lsrs	r2, r2, #24
 8000d54:	2a7e      	cmp	r2, #126	; 0x7e
 8000d56:	dd03      	ble.n	8000d60 <__aeabi_f2iz+0x18>
 8000d58:	2a9d      	cmp	r2, #157	; 0x9d
 8000d5a:	dd02      	ble.n	8000d62 <__aeabi_f2iz+0x1a>
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <__aeabi_f2iz+0x3c>)
 8000d5e:	1898      	adds	r0, r3, r2
 8000d60:	4770      	bx	lr
 8000d62:	2080      	movs	r0, #128	; 0x80
 8000d64:	0400      	lsls	r0, r0, #16
 8000d66:	4301      	orrs	r1, r0
 8000d68:	2a95      	cmp	r2, #149	; 0x95
 8000d6a:	dc07      	bgt.n	8000d7c <__aeabi_f2iz+0x34>
 8000d6c:	2096      	movs	r0, #150	; 0x96
 8000d6e:	1a82      	subs	r2, r0, r2
 8000d70:	40d1      	lsrs	r1, r2
 8000d72:	4248      	negs	r0, r1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f3      	bne.n	8000d60 <__aeabi_f2iz+0x18>
 8000d78:	0008      	movs	r0, r1
 8000d7a:	e7f1      	b.n	8000d60 <__aeabi_f2iz+0x18>
 8000d7c:	3a96      	subs	r2, #150	; 0x96
 8000d7e:	4091      	lsls	r1, r2
 8000d80:	e7f7      	b.n	8000d72 <__aeabi_f2iz+0x2a>
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	7fffffff 	.word	0x7fffffff

08000d88 <__aeabi_i2f>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	d013      	beq.n	8000db6 <__aeabi_i2f+0x2e>
 8000d8e:	17c3      	asrs	r3, r0, #31
 8000d90:	18c5      	adds	r5, r0, r3
 8000d92:	405d      	eors	r5, r3
 8000d94:	0fc4      	lsrs	r4, r0, #31
 8000d96:	0028      	movs	r0, r5
 8000d98:	f001 f81c 	bl	8001dd4 <__clzsi2>
 8000d9c:	239e      	movs	r3, #158	; 0x9e
 8000d9e:	0001      	movs	r1, r0
 8000da0:	1a1b      	subs	r3, r3, r0
 8000da2:	2b96      	cmp	r3, #150	; 0x96
 8000da4:	dc0f      	bgt.n	8000dc6 <__aeabi_i2f+0x3e>
 8000da6:	2808      	cmp	r0, #8
 8000da8:	d031      	beq.n	8000e0e <__aeabi_i2f+0x86>
 8000daa:	3908      	subs	r1, #8
 8000dac:	408d      	lsls	r5, r1
 8000dae:	026d      	lsls	r5, r5, #9
 8000db0:	0a6d      	lsrs	r5, r5, #9
 8000db2:	b2d8      	uxtb	r0, r3
 8000db4:	e002      	b.n	8000dbc <__aeabi_i2f+0x34>
 8000db6:	2400      	movs	r4, #0
 8000db8:	2000      	movs	r0, #0
 8000dba:	2500      	movs	r5, #0
 8000dbc:	05c0      	lsls	r0, r0, #23
 8000dbe:	4328      	orrs	r0, r5
 8000dc0:	07e4      	lsls	r4, r4, #31
 8000dc2:	4320      	orrs	r0, r4
 8000dc4:	bd70      	pop	{r4, r5, r6, pc}
 8000dc6:	2b99      	cmp	r3, #153	; 0x99
 8000dc8:	dd0c      	ble.n	8000de4 <__aeabi_i2f+0x5c>
 8000dca:	2205      	movs	r2, #5
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	0028      	movs	r0, r5
 8000dd0:	40d0      	lsrs	r0, r2
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	0008      	movs	r0, r1
 8000dd6:	301b      	adds	r0, #27
 8000dd8:	4085      	lsls	r5, r0
 8000dda:	0028      	movs	r0, r5
 8000ddc:	1e45      	subs	r5, r0, #1
 8000dde:	41a8      	sbcs	r0, r5
 8000de0:	4302      	orrs	r2, r0
 8000de2:	0015      	movs	r5, r2
 8000de4:	2905      	cmp	r1, #5
 8000de6:	dc16      	bgt.n	8000e16 <__aeabi_i2f+0x8e>
 8000de8:	002a      	movs	r2, r5
 8000dea:	480f      	ldr	r0, [pc, #60]	; (8000e28 <__aeabi_i2f+0xa0>)
 8000dec:	4002      	ands	r2, r0
 8000dee:	076e      	lsls	r6, r5, #29
 8000df0:	d009      	beq.n	8000e06 <__aeabi_i2f+0x7e>
 8000df2:	260f      	movs	r6, #15
 8000df4:	4035      	ands	r5, r6
 8000df6:	2d04      	cmp	r5, #4
 8000df8:	d005      	beq.n	8000e06 <__aeabi_i2f+0x7e>
 8000dfa:	3204      	adds	r2, #4
 8000dfc:	0155      	lsls	r5, r2, #5
 8000dfe:	d502      	bpl.n	8000e06 <__aeabi_i2f+0x7e>
 8000e00:	239f      	movs	r3, #159	; 0x9f
 8000e02:	4002      	ands	r2, r0
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	0192      	lsls	r2, r2, #6
 8000e08:	0a55      	lsrs	r5, r2, #9
 8000e0a:	b2d8      	uxtb	r0, r3
 8000e0c:	e7d6      	b.n	8000dbc <__aeabi_i2f+0x34>
 8000e0e:	026d      	lsls	r5, r5, #9
 8000e10:	2096      	movs	r0, #150	; 0x96
 8000e12:	0a6d      	lsrs	r5, r5, #9
 8000e14:	e7d2      	b.n	8000dbc <__aeabi_i2f+0x34>
 8000e16:	1f4a      	subs	r2, r1, #5
 8000e18:	4095      	lsls	r5, r2
 8000e1a:	002a      	movs	r2, r5
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <__aeabi_i2f+0xa0>)
 8000e1e:	4002      	ands	r2, r0
 8000e20:	076e      	lsls	r6, r5, #29
 8000e22:	d0f0      	beq.n	8000e06 <__aeabi_i2f+0x7e>
 8000e24:	e7e5      	b.n	8000df2 <__aeabi_i2f+0x6a>
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	fbffffff 	.word	0xfbffffff

08000e2c <__eqdf2>:
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	464e      	mov	r6, r9
 8000e30:	4645      	mov	r5, r8
 8000e32:	46de      	mov	lr, fp
 8000e34:	4657      	mov	r7, sl
 8000e36:	4690      	mov	r8, r2
 8000e38:	b5e0      	push	{r5, r6, r7, lr}
 8000e3a:	0017      	movs	r7, r2
 8000e3c:	031a      	lsls	r2, r3, #12
 8000e3e:	0b12      	lsrs	r2, r2, #12
 8000e40:	0005      	movs	r5, r0
 8000e42:	4684      	mov	ip, r0
 8000e44:	4819      	ldr	r0, [pc, #100]	; (8000eac <__eqdf2+0x80>)
 8000e46:	030e      	lsls	r6, r1, #12
 8000e48:	004c      	lsls	r4, r1, #1
 8000e4a:	4691      	mov	r9, r2
 8000e4c:	005a      	lsls	r2, r3, #1
 8000e4e:	0fdb      	lsrs	r3, r3, #31
 8000e50:	469b      	mov	fp, r3
 8000e52:	0b36      	lsrs	r6, r6, #12
 8000e54:	0d64      	lsrs	r4, r4, #21
 8000e56:	0fc9      	lsrs	r1, r1, #31
 8000e58:	0d52      	lsrs	r2, r2, #21
 8000e5a:	4284      	cmp	r4, r0
 8000e5c:	d019      	beq.n	8000e92 <__eqdf2+0x66>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	d010      	beq.n	8000e84 <__eqdf2+0x58>
 8000e62:	2001      	movs	r0, #1
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d10e      	bne.n	8000e86 <__eqdf2+0x5a>
 8000e68:	454e      	cmp	r6, r9
 8000e6a:	d10c      	bne.n	8000e86 <__eqdf2+0x5a>
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	45c4      	cmp	ip, r8
 8000e70:	d109      	bne.n	8000e86 <__eqdf2+0x5a>
 8000e72:	4559      	cmp	r1, fp
 8000e74:	d017      	beq.n	8000ea6 <__eqdf2+0x7a>
 8000e76:	2c00      	cmp	r4, #0
 8000e78:	d105      	bne.n	8000e86 <__eqdf2+0x5a>
 8000e7a:	0030      	movs	r0, r6
 8000e7c:	4328      	orrs	r0, r5
 8000e7e:	1e43      	subs	r3, r0, #1
 8000e80:	4198      	sbcs	r0, r3
 8000e82:	e000      	b.n	8000e86 <__eqdf2+0x5a>
 8000e84:	2001      	movs	r0, #1
 8000e86:	bcf0      	pop	{r4, r5, r6, r7}
 8000e88:	46bb      	mov	fp, r7
 8000e8a:	46b2      	mov	sl, r6
 8000e8c:	46a9      	mov	r9, r5
 8000e8e:	46a0      	mov	r8, r4
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e92:	0033      	movs	r3, r6
 8000e94:	2001      	movs	r0, #1
 8000e96:	432b      	orrs	r3, r5
 8000e98:	d1f5      	bne.n	8000e86 <__eqdf2+0x5a>
 8000e9a:	42a2      	cmp	r2, r4
 8000e9c:	d1f3      	bne.n	8000e86 <__eqdf2+0x5a>
 8000e9e:	464b      	mov	r3, r9
 8000ea0:	433b      	orrs	r3, r7
 8000ea2:	d1f0      	bne.n	8000e86 <__eqdf2+0x5a>
 8000ea4:	e7e2      	b.n	8000e6c <__eqdf2+0x40>
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	e7ed      	b.n	8000e86 <__eqdf2+0x5a>
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	000007ff 	.word	0x000007ff

08000eb0 <__gedf2>:
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	4647      	mov	r7, r8
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	0004      	movs	r4, r0
 8000eb8:	0018      	movs	r0, r3
 8000eba:	0016      	movs	r6, r2
 8000ebc:	031b      	lsls	r3, r3, #12
 8000ebe:	0b1b      	lsrs	r3, r3, #12
 8000ec0:	4d2d      	ldr	r5, [pc, #180]	; (8000f78 <__gedf2+0xc8>)
 8000ec2:	004a      	lsls	r2, r1, #1
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	0043      	lsls	r3, r0, #1
 8000eca:	030f      	lsls	r7, r1, #12
 8000ecc:	46a4      	mov	ip, r4
 8000ece:	46b0      	mov	r8, r6
 8000ed0:	0b3f      	lsrs	r7, r7, #12
 8000ed2:	0d52      	lsrs	r2, r2, #21
 8000ed4:	0fc9      	lsrs	r1, r1, #31
 8000ed6:	0d5b      	lsrs	r3, r3, #21
 8000ed8:	0fc0      	lsrs	r0, r0, #31
 8000eda:	42aa      	cmp	r2, r5
 8000edc:	d021      	beq.n	8000f22 <__gedf2+0x72>
 8000ede:	42ab      	cmp	r3, r5
 8000ee0:	d013      	beq.n	8000f0a <__gedf2+0x5a>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d122      	bne.n	8000f2c <__gedf2+0x7c>
 8000ee6:	433c      	orrs	r4, r7
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <__gedf2+0x42>
 8000eec:	464d      	mov	r5, r9
 8000eee:	432e      	orrs	r6, r5
 8000ef0:	d022      	beq.n	8000f38 <__gedf2+0x88>
 8000ef2:	2c00      	cmp	r4, #0
 8000ef4:	d010      	beq.n	8000f18 <__gedf2+0x68>
 8000ef6:	4281      	cmp	r1, r0
 8000ef8:	d022      	beq.n	8000f40 <__gedf2+0x90>
 8000efa:	2002      	movs	r0, #2
 8000efc:	3901      	subs	r1, #1
 8000efe:	4008      	ands	r0, r1
 8000f00:	3801      	subs	r0, #1
 8000f02:	bcc0      	pop	{r6, r7}
 8000f04:	46b9      	mov	r9, r7
 8000f06:	46b0      	mov	r8, r6
 8000f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0a:	464d      	mov	r5, r9
 8000f0c:	432e      	orrs	r6, r5
 8000f0e:	d129      	bne.n	8000f64 <__gedf2+0xb4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d1f0      	bne.n	8000ef6 <__gedf2+0x46>
 8000f14:	433c      	orrs	r4, r7
 8000f16:	d1ee      	bne.n	8000ef6 <__gedf2+0x46>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d1f2      	bne.n	8000f02 <__gedf2+0x52>
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	4240      	negs	r0, r0
 8000f20:	e7ef      	b.n	8000f02 <__gedf2+0x52>
 8000f22:	003d      	movs	r5, r7
 8000f24:	4325      	orrs	r5, r4
 8000f26:	d11d      	bne.n	8000f64 <__gedf2+0xb4>
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d0ee      	beq.n	8000f0a <__gedf2+0x5a>
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1e2      	bne.n	8000ef6 <__gedf2+0x46>
 8000f30:	464c      	mov	r4, r9
 8000f32:	4326      	orrs	r6, r4
 8000f34:	d1df      	bne.n	8000ef6 <__gedf2+0x46>
 8000f36:	e7e0      	b.n	8000efa <__gedf2+0x4a>
 8000f38:	2000      	movs	r0, #0
 8000f3a:	2c00      	cmp	r4, #0
 8000f3c:	d0e1      	beq.n	8000f02 <__gedf2+0x52>
 8000f3e:	e7dc      	b.n	8000efa <__gedf2+0x4a>
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dc0a      	bgt.n	8000f5a <__gedf2+0xaa>
 8000f44:	dbe8      	blt.n	8000f18 <__gedf2+0x68>
 8000f46:	454f      	cmp	r7, r9
 8000f48:	d8d7      	bhi.n	8000efa <__gedf2+0x4a>
 8000f4a:	d00e      	beq.n	8000f6a <__gedf2+0xba>
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	d2d7      	bcs.n	8000f02 <__gedf2+0x52>
 8000f52:	2900      	cmp	r1, #0
 8000f54:	d0e2      	beq.n	8000f1c <__gedf2+0x6c>
 8000f56:	0008      	movs	r0, r1
 8000f58:	e7d3      	b.n	8000f02 <__gedf2+0x52>
 8000f5a:	4243      	negs	r3, r0
 8000f5c:	4158      	adcs	r0, r3
 8000f5e:	0040      	lsls	r0, r0, #1
 8000f60:	3801      	subs	r0, #1
 8000f62:	e7ce      	b.n	8000f02 <__gedf2+0x52>
 8000f64:	2002      	movs	r0, #2
 8000f66:	4240      	negs	r0, r0
 8000f68:	e7cb      	b.n	8000f02 <__gedf2+0x52>
 8000f6a:	45c4      	cmp	ip, r8
 8000f6c:	d8c5      	bhi.n	8000efa <__gedf2+0x4a>
 8000f6e:	2000      	movs	r0, #0
 8000f70:	45c4      	cmp	ip, r8
 8000f72:	d2c6      	bcs.n	8000f02 <__gedf2+0x52>
 8000f74:	e7ed      	b.n	8000f52 <__gedf2+0xa2>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff

08000f7c <__ledf2>:
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7e:	4647      	mov	r7, r8
 8000f80:	46ce      	mov	lr, r9
 8000f82:	0004      	movs	r4, r0
 8000f84:	0018      	movs	r0, r3
 8000f86:	0016      	movs	r6, r2
 8000f88:	031b      	lsls	r3, r3, #12
 8000f8a:	0b1b      	lsrs	r3, r3, #12
 8000f8c:	4d2c      	ldr	r5, [pc, #176]	; (8001040 <__ledf2+0xc4>)
 8000f8e:	004a      	lsls	r2, r1, #1
 8000f90:	4699      	mov	r9, r3
 8000f92:	b580      	push	{r7, lr}
 8000f94:	0043      	lsls	r3, r0, #1
 8000f96:	030f      	lsls	r7, r1, #12
 8000f98:	46a4      	mov	ip, r4
 8000f9a:	46b0      	mov	r8, r6
 8000f9c:	0b3f      	lsrs	r7, r7, #12
 8000f9e:	0d52      	lsrs	r2, r2, #21
 8000fa0:	0fc9      	lsrs	r1, r1, #31
 8000fa2:	0d5b      	lsrs	r3, r3, #21
 8000fa4:	0fc0      	lsrs	r0, r0, #31
 8000fa6:	42aa      	cmp	r2, r5
 8000fa8:	d00d      	beq.n	8000fc6 <__ledf2+0x4a>
 8000faa:	42ab      	cmp	r3, r5
 8000fac:	d010      	beq.n	8000fd0 <__ledf2+0x54>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d127      	bne.n	8001002 <__ledf2+0x86>
 8000fb2:	433c      	orrs	r4, r7
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d111      	bne.n	8000fdc <__ledf2+0x60>
 8000fb8:	464d      	mov	r5, r9
 8000fba:	432e      	orrs	r6, r5
 8000fbc:	d10e      	bne.n	8000fdc <__ledf2+0x60>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d015      	beq.n	8000ff0 <__ledf2+0x74>
 8000fc4:	e00e      	b.n	8000fe4 <__ledf2+0x68>
 8000fc6:	003d      	movs	r5, r7
 8000fc8:	4325      	orrs	r5, r4
 8000fca:	d110      	bne.n	8000fee <__ledf2+0x72>
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d118      	bne.n	8001002 <__ledf2+0x86>
 8000fd0:	464d      	mov	r5, r9
 8000fd2:	432e      	orrs	r6, r5
 8000fd4:	d10b      	bne.n	8000fee <__ledf2+0x72>
 8000fd6:	2a00      	cmp	r2, #0
 8000fd8:	d102      	bne.n	8000fe0 <__ledf2+0x64>
 8000fda:	433c      	orrs	r4, r7
 8000fdc:	2c00      	cmp	r4, #0
 8000fde:	d00b      	beq.n	8000ff8 <__ledf2+0x7c>
 8000fe0:	4281      	cmp	r1, r0
 8000fe2:	d014      	beq.n	800100e <__ledf2+0x92>
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	3901      	subs	r1, #1
 8000fe8:	4008      	ands	r0, r1
 8000fea:	3801      	subs	r0, #1
 8000fec:	e000      	b.n	8000ff0 <__ledf2+0x74>
 8000fee:	2002      	movs	r0, #2
 8000ff0:	bcc0      	pop	{r6, r7}
 8000ff2:	46b9      	mov	r9, r7
 8000ff4:	46b0      	mov	r8, r6
 8000ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d1f9      	bne.n	8000ff0 <__ledf2+0x74>
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	4240      	negs	r0, r0
 8001000:	e7f6      	b.n	8000ff0 <__ledf2+0x74>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1ec      	bne.n	8000fe0 <__ledf2+0x64>
 8001006:	464c      	mov	r4, r9
 8001008:	4326      	orrs	r6, r4
 800100a:	d1e9      	bne.n	8000fe0 <__ledf2+0x64>
 800100c:	e7ea      	b.n	8000fe4 <__ledf2+0x68>
 800100e:	429a      	cmp	r2, r3
 8001010:	dd04      	ble.n	800101c <__ledf2+0xa0>
 8001012:	4243      	negs	r3, r0
 8001014:	4158      	adcs	r0, r3
 8001016:	0040      	lsls	r0, r0, #1
 8001018:	3801      	subs	r0, #1
 800101a:	e7e9      	b.n	8000ff0 <__ledf2+0x74>
 800101c:	429a      	cmp	r2, r3
 800101e:	dbeb      	blt.n	8000ff8 <__ledf2+0x7c>
 8001020:	454f      	cmp	r7, r9
 8001022:	d8df      	bhi.n	8000fe4 <__ledf2+0x68>
 8001024:	d006      	beq.n	8001034 <__ledf2+0xb8>
 8001026:	2000      	movs	r0, #0
 8001028:	454f      	cmp	r7, r9
 800102a:	d2e1      	bcs.n	8000ff0 <__ledf2+0x74>
 800102c:	2900      	cmp	r1, #0
 800102e:	d0e5      	beq.n	8000ffc <__ledf2+0x80>
 8001030:	0008      	movs	r0, r1
 8001032:	e7dd      	b.n	8000ff0 <__ledf2+0x74>
 8001034:	45c4      	cmp	ip, r8
 8001036:	d8d5      	bhi.n	8000fe4 <__ledf2+0x68>
 8001038:	2000      	movs	r0, #0
 800103a:	45c4      	cmp	ip, r8
 800103c:	d2d8      	bcs.n	8000ff0 <__ledf2+0x74>
 800103e:	e7f5      	b.n	800102c <__ledf2+0xb0>
 8001040:	000007ff 	.word	0x000007ff

08001044 <__aeabi_dmul>:
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	4645      	mov	r5, r8
 8001048:	46de      	mov	lr, fp
 800104a:	4657      	mov	r7, sl
 800104c:	464e      	mov	r6, r9
 800104e:	b5e0      	push	{r5, r6, r7, lr}
 8001050:	001f      	movs	r7, r3
 8001052:	030b      	lsls	r3, r1, #12
 8001054:	0b1b      	lsrs	r3, r3, #12
 8001056:	469b      	mov	fp, r3
 8001058:	004d      	lsls	r5, r1, #1
 800105a:	0fcb      	lsrs	r3, r1, #31
 800105c:	0004      	movs	r4, r0
 800105e:	4691      	mov	r9, r2
 8001060:	4698      	mov	r8, r3
 8001062:	b087      	sub	sp, #28
 8001064:	0d6d      	lsrs	r5, r5, #21
 8001066:	d100      	bne.n	800106a <__aeabi_dmul+0x26>
 8001068:	e1cd      	b.n	8001406 <__aeabi_dmul+0x3c2>
 800106a:	4bce      	ldr	r3, [pc, #824]	; (80013a4 <__aeabi_dmul+0x360>)
 800106c:	429d      	cmp	r5, r3
 800106e:	d100      	bne.n	8001072 <__aeabi_dmul+0x2e>
 8001070:	e1e9      	b.n	8001446 <__aeabi_dmul+0x402>
 8001072:	465a      	mov	r2, fp
 8001074:	0f43      	lsrs	r3, r0, #29
 8001076:	00d2      	lsls	r2, r2, #3
 8001078:	4313      	orrs	r3, r2
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	0412      	lsls	r2, r2, #16
 800107e:	431a      	orrs	r2, r3
 8001080:	00c3      	lsls	r3, r0, #3
 8001082:	469a      	mov	sl, r3
 8001084:	4bc8      	ldr	r3, [pc, #800]	; (80013a8 <__aeabi_dmul+0x364>)
 8001086:	4693      	mov	fp, r2
 8001088:	469c      	mov	ip, r3
 800108a:	2300      	movs	r3, #0
 800108c:	2600      	movs	r6, #0
 800108e:	4465      	add	r5, ip
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	033c      	lsls	r4, r7, #12
 8001094:	007b      	lsls	r3, r7, #1
 8001096:	4648      	mov	r0, r9
 8001098:	0b24      	lsrs	r4, r4, #12
 800109a:	0d5b      	lsrs	r3, r3, #21
 800109c:	0fff      	lsrs	r7, r7, #31
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dmul+0x60>
 80010a2:	e189      	b.n	80013b8 <__aeabi_dmul+0x374>
 80010a4:	4abf      	ldr	r2, [pc, #764]	; (80013a4 <__aeabi_dmul+0x360>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <__aeabi_dmul+0x9a>
 80010aa:	0f42      	lsrs	r2, r0, #29
 80010ac:	00e4      	lsls	r4, r4, #3
 80010ae:	4322      	orrs	r2, r4
 80010b0:	2480      	movs	r4, #128	; 0x80
 80010b2:	0424      	lsls	r4, r4, #16
 80010b4:	4314      	orrs	r4, r2
 80010b6:	4abc      	ldr	r2, [pc, #752]	; (80013a8 <__aeabi_dmul+0x364>)
 80010b8:	2100      	movs	r1, #0
 80010ba:	4694      	mov	ip, r2
 80010bc:	4642      	mov	r2, r8
 80010be:	4463      	add	r3, ip
 80010c0:	195b      	adds	r3, r3, r5
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
 80010c6:	407a      	eors	r2, r7
 80010c8:	3301      	adds	r3, #1
 80010ca:	00c0      	lsls	r0, r0, #3
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2e0a      	cmp	r6, #10
 80010d2:	dd1c      	ble.n	800110e <__aeabi_dmul+0xca>
 80010d4:	003a      	movs	r2, r7
 80010d6:	2e0b      	cmp	r6, #11
 80010d8:	d05e      	beq.n	8001198 <__aeabi_dmul+0x154>
 80010da:	4647      	mov	r7, r8
 80010dc:	e056      	b.n	800118c <__aeabi_dmul+0x148>
 80010de:	4649      	mov	r1, r9
 80010e0:	4bb0      	ldr	r3, [pc, #704]	; (80013a4 <__aeabi_dmul+0x360>)
 80010e2:	4321      	orrs	r1, r4
 80010e4:	18eb      	adds	r3, r5, r3
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	2900      	cmp	r1, #0
 80010ea:	d12a      	bne.n	8001142 <__aeabi_dmul+0xfe>
 80010ec:	2080      	movs	r0, #128	; 0x80
 80010ee:	2202      	movs	r2, #2
 80010f0:	0100      	lsls	r0, r0, #4
 80010f2:	002b      	movs	r3, r5
 80010f4:	4684      	mov	ip, r0
 80010f6:	4316      	orrs	r6, r2
 80010f8:	4642      	mov	r2, r8
 80010fa:	4463      	add	r3, ip
 80010fc:	407a      	eors	r2, r7
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	2e0a      	cmp	r6, #10
 8001104:	dd00      	ble.n	8001108 <__aeabi_dmul+0xc4>
 8001106:	e231      	b.n	800156c <__aeabi_dmul+0x528>
 8001108:	2000      	movs	r0, #0
 800110a:	2400      	movs	r4, #0
 800110c:	2102      	movs	r1, #2
 800110e:	2e02      	cmp	r6, #2
 8001110:	dc26      	bgt.n	8001160 <__aeabi_dmul+0x11c>
 8001112:	3e01      	subs	r6, #1
 8001114:	2e01      	cmp	r6, #1
 8001116:	d852      	bhi.n	80011be <__aeabi_dmul+0x17a>
 8001118:	2902      	cmp	r1, #2
 800111a:	d04c      	beq.n	80011b6 <__aeabi_dmul+0x172>
 800111c:	2901      	cmp	r1, #1
 800111e:	d000      	beq.n	8001122 <__aeabi_dmul+0xde>
 8001120:	e118      	b.n	8001354 <__aeabi_dmul+0x310>
 8001122:	2300      	movs	r3, #0
 8001124:	2400      	movs	r4, #0
 8001126:	2500      	movs	r5, #0
 8001128:	051b      	lsls	r3, r3, #20
 800112a:	4323      	orrs	r3, r4
 800112c:	07d2      	lsls	r2, r2, #31
 800112e:	4313      	orrs	r3, r2
 8001130:	0028      	movs	r0, r5
 8001132:	0019      	movs	r1, r3
 8001134:	b007      	add	sp, #28
 8001136:	bcf0      	pop	{r4, r5, r6, r7}
 8001138:	46bb      	mov	fp, r7
 800113a:	46b2      	mov	sl, r6
 800113c:	46a9      	mov	r9, r5
 800113e:	46a0      	mov	r8, r4
 8001140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	2203      	movs	r2, #3
 8001146:	0109      	lsls	r1, r1, #4
 8001148:	002b      	movs	r3, r5
 800114a:	468c      	mov	ip, r1
 800114c:	4316      	orrs	r6, r2
 800114e:	4642      	mov	r2, r8
 8001150:	4463      	add	r3, ip
 8001152:	407a      	eors	r2, r7
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2e0a      	cmp	r6, #10
 800115a:	dd00      	ble.n	800115e <__aeabi_dmul+0x11a>
 800115c:	e228      	b.n	80015b0 <__aeabi_dmul+0x56c>
 800115e:	2103      	movs	r1, #3
 8001160:	2501      	movs	r5, #1
 8001162:	40b5      	lsls	r5, r6
 8001164:	46ac      	mov	ip, r5
 8001166:	26a6      	movs	r6, #166	; 0xa6
 8001168:	4663      	mov	r3, ip
 800116a:	00f6      	lsls	r6, r6, #3
 800116c:	4035      	ands	r5, r6
 800116e:	4233      	tst	r3, r6
 8001170:	d10b      	bne.n	800118a <__aeabi_dmul+0x146>
 8001172:	2690      	movs	r6, #144	; 0x90
 8001174:	00b6      	lsls	r6, r6, #2
 8001176:	4233      	tst	r3, r6
 8001178:	d118      	bne.n	80011ac <__aeabi_dmul+0x168>
 800117a:	3eb9      	subs	r6, #185	; 0xb9
 800117c:	3eff      	subs	r6, #255	; 0xff
 800117e:	421e      	tst	r6, r3
 8001180:	d01d      	beq.n	80011be <__aeabi_dmul+0x17a>
 8001182:	46a3      	mov	fp, r4
 8001184:	4682      	mov	sl, r0
 8001186:	9100      	str	r1, [sp, #0]
 8001188:	e000      	b.n	800118c <__aeabi_dmul+0x148>
 800118a:	0017      	movs	r7, r2
 800118c:	9900      	ldr	r1, [sp, #0]
 800118e:	003a      	movs	r2, r7
 8001190:	2902      	cmp	r1, #2
 8001192:	d010      	beq.n	80011b6 <__aeabi_dmul+0x172>
 8001194:	465c      	mov	r4, fp
 8001196:	4650      	mov	r0, sl
 8001198:	2903      	cmp	r1, #3
 800119a:	d1bf      	bne.n	800111c <__aeabi_dmul+0xd8>
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	031b      	lsls	r3, r3, #12
 80011a0:	431c      	orrs	r4, r3
 80011a2:	0324      	lsls	r4, r4, #12
 80011a4:	0005      	movs	r5, r0
 80011a6:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <__aeabi_dmul+0x360>)
 80011a8:	0b24      	lsrs	r4, r4, #12
 80011aa:	e7bd      	b.n	8001128 <__aeabi_dmul+0xe4>
 80011ac:	2480      	movs	r4, #128	; 0x80
 80011ae:	2200      	movs	r2, #0
 80011b0:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <__aeabi_dmul+0x360>)
 80011b2:	0324      	lsls	r4, r4, #12
 80011b4:	e7b8      	b.n	8001128 <__aeabi_dmul+0xe4>
 80011b6:	2400      	movs	r4, #0
 80011b8:	2500      	movs	r5, #0
 80011ba:	4b7a      	ldr	r3, [pc, #488]	; (80013a4 <__aeabi_dmul+0x360>)
 80011bc:	e7b4      	b.n	8001128 <__aeabi_dmul+0xe4>
 80011be:	4653      	mov	r3, sl
 80011c0:	041e      	lsls	r6, r3, #16
 80011c2:	0c36      	lsrs	r6, r6, #16
 80011c4:	0c1f      	lsrs	r7, r3, #16
 80011c6:	0033      	movs	r3, r6
 80011c8:	0c01      	lsrs	r1, r0, #16
 80011ca:	0400      	lsls	r0, r0, #16
 80011cc:	0c00      	lsrs	r0, r0, #16
 80011ce:	4343      	muls	r3, r0
 80011d0:	4698      	mov	r8, r3
 80011d2:	0003      	movs	r3, r0
 80011d4:	437b      	muls	r3, r7
 80011d6:	4699      	mov	r9, r3
 80011d8:	0033      	movs	r3, r6
 80011da:	434b      	muls	r3, r1
 80011dc:	469c      	mov	ip, r3
 80011de:	4643      	mov	r3, r8
 80011e0:	000d      	movs	r5, r1
 80011e2:	0c1b      	lsrs	r3, r3, #16
 80011e4:	469a      	mov	sl, r3
 80011e6:	437d      	muls	r5, r7
 80011e8:	44cc      	add	ip, r9
 80011ea:	44d4      	add	ip, sl
 80011ec:	9500      	str	r5, [sp, #0]
 80011ee:	45e1      	cmp	r9, ip
 80011f0:	d904      	bls.n	80011fc <__aeabi_dmul+0x1b8>
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	4699      	mov	r9, r3
 80011f8:	444d      	add	r5, r9
 80011fa:	9500      	str	r5, [sp, #0]
 80011fc:	4663      	mov	r3, ip
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	001d      	movs	r5, r3
 8001202:	4663      	mov	r3, ip
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	469c      	mov	ip, r3
 8001208:	4643      	mov	r3, r8
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	0c1b      	lsrs	r3, r3, #16
 800120e:	4698      	mov	r8, r3
 8001210:	4663      	mov	r3, ip
 8001212:	4443      	add	r3, r8
 8001214:	9303      	str	r3, [sp, #12]
 8001216:	0c23      	lsrs	r3, r4, #16
 8001218:	4698      	mov	r8, r3
 800121a:	0033      	movs	r3, r6
 800121c:	0424      	lsls	r4, r4, #16
 800121e:	0c24      	lsrs	r4, r4, #16
 8001220:	4363      	muls	r3, r4
 8001222:	469c      	mov	ip, r3
 8001224:	0023      	movs	r3, r4
 8001226:	437b      	muls	r3, r7
 8001228:	4699      	mov	r9, r3
 800122a:	4643      	mov	r3, r8
 800122c:	435e      	muls	r6, r3
 800122e:	435f      	muls	r7, r3
 8001230:	444e      	add	r6, r9
 8001232:	4663      	mov	r3, ip
 8001234:	46b2      	mov	sl, r6
 8001236:	0c1e      	lsrs	r6, r3, #16
 8001238:	4456      	add	r6, sl
 800123a:	45b1      	cmp	r9, r6
 800123c:	d903      	bls.n	8001246 <__aeabi_dmul+0x202>
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	4699      	mov	r9, r3
 8001244:	444f      	add	r7, r9
 8001246:	0c33      	lsrs	r3, r6, #16
 8001248:	4699      	mov	r9, r3
 800124a:	003b      	movs	r3, r7
 800124c:	444b      	add	r3, r9
 800124e:	9305      	str	r3, [sp, #20]
 8001250:	4663      	mov	r3, ip
 8001252:	46ac      	mov	ip, r5
 8001254:	041f      	lsls	r7, r3, #16
 8001256:	0c3f      	lsrs	r7, r7, #16
 8001258:	0436      	lsls	r6, r6, #16
 800125a:	19f6      	adds	r6, r6, r7
 800125c:	44b4      	add	ip, r6
 800125e:	4663      	mov	r3, ip
 8001260:	9304      	str	r3, [sp, #16]
 8001262:	465b      	mov	r3, fp
 8001264:	0c1b      	lsrs	r3, r3, #16
 8001266:	469c      	mov	ip, r3
 8001268:	465b      	mov	r3, fp
 800126a:	041f      	lsls	r7, r3, #16
 800126c:	0c3f      	lsrs	r7, r7, #16
 800126e:	003b      	movs	r3, r7
 8001270:	4343      	muls	r3, r0
 8001272:	4699      	mov	r9, r3
 8001274:	4663      	mov	r3, ip
 8001276:	4343      	muls	r3, r0
 8001278:	469a      	mov	sl, r3
 800127a:	464b      	mov	r3, r9
 800127c:	4660      	mov	r0, ip
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	469b      	mov	fp, r3
 8001282:	4348      	muls	r0, r1
 8001284:	4379      	muls	r1, r7
 8001286:	4451      	add	r1, sl
 8001288:	4459      	add	r1, fp
 800128a:	458a      	cmp	sl, r1
 800128c:	d903      	bls.n	8001296 <__aeabi_dmul+0x252>
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	025b      	lsls	r3, r3, #9
 8001292:	469a      	mov	sl, r3
 8001294:	4450      	add	r0, sl
 8001296:	0c0b      	lsrs	r3, r1, #16
 8001298:	469a      	mov	sl, r3
 800129a:	464b      	mov	r3, r9
 800129c:	041b      	lsls	r3, r3, #16
 800129e:	0c1b      	lsrs	r3, r3, #16
 80012a0:	4699      	mov	r9, r3
 80012a2:	003b      	movs	r3, r7
 80012a4:	4363      	muls	r3, r4
 80012a6:	0409      	lsls	r1, r1, #16
 80012a8:	4645      	mov	r5, r8
 80012aa:	4449      	add	r1, r9
 80012ac:	4699      	mov	r9, r3
 80012ae:	4663      	mov	r3, ip
 80012b0:	435c      	muls	r4, r3
 80012b2:	436b      	muls	r3, r5
 80012b4:	469c      	mov	ip, r3
 80012b6:	464b      	mov	r3, r9
 80012b8:	0c1b      	lsrs	r3, r3, #16
 80012ba:	4698      	mov	r8, r3
 80012bc:	436f      	muls	r7, r5
 80012be:	193f      	adds	r7, r7, r4
 80012c0:	4447      	add	r7, r8
 80012c2:	4450      	add	r0, sl
 80012c4:	42bc      	cmp	r4, r7
 80012c6:	d903      	bls.n	80012d0 <__aeabi_dmul+0x28c>
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	4698      	mov	r8, r3
 80012ce:	44c4      	add	ip, r8
 80012d0:	9b04      	ldr	r3, [sp, #16]
 80012d2:	9d00      	ldr	r5, [sp, #0]
 80012d4:	4698      	mov	r8, r3
 80012d6:	4445      	add	r5, r8
 80012d8:	42b5      	cmp	r5, r6
 80012da:	41b6      	sbcs	r6, r6
 80012dc:	4273      	negs	r3, r6
 80012de:	4698      	mov	r8, r3
 80012e0:	464b      	mov	r3, r9
 80012e2:	041e      	lsls	r6, r3, #16
 80012e4:	9b05      	ldr	r3, [sp, #20]
 80012e6:	043c      	lsls	r4, r7, #16
 80012e8:	4699      	mov	r9, r3
 80012ea:	0c36      	lsrs	r6, r6, #16
 80012ec:	19a4      	adds	r4, r4, r6
 80012ee:	444c      	add	r4, r9
 80012f0:	46a1      	mov	r9, r4
 80012f2:	4683      	mov	fp, r0
 80012f4:	186e      	adds	r6, r5, r1
 80012f6:	44c1      	add	r9, r8
 80012f8:	428e      	cmp	r6, r1
 80012fa:	4189      	sbcs	r1, r1
 80012fc:	44cb      	add	fp, r9
 80012fe:	465d      	mov	r5, fp
 8001300:	4249      	negs	r1, r1
 8001302:	186d      	adds	r5, r5, r1
 8001304:	429c      	cmp	r4, r3
 8001306:	41a4      	sbcs	r4, r4
 8001308:	45c1      	cmp	r9, r8
 800130a:	419b      	sbcs	r3, r3
 800130c:	4583      	cmp	fp, r0
 800130e:	4180      	sbcs	r0, r0
 8001310:	428d      	cmp	r5, r1
 8001312:	4189      	sbcs	r1, r1
 8001314:	425b      	negs	r3, r3
 8001316:	4264      	negs	r4, r4
 8001318:	431c      	orrs	r4, r3
 800131a:	4240      	negs	r0, r0
 800131c:	9b03      	ldr	r3, [sp, #12]
 800131e:	4249      	negs	r1, r1
 8001320:	4301      	orrs	r1, r0
 8001322:	0270      	lsls	r0, r6, #9
 8001324:	0c3f      	lsrs	r7, r7, #16
 8001326:	4318      	orrs	r0, r3
 8001328:	19e4      	adds	r4, r4, r7
 800132a:	1e47      	subs	r7, r0, #1
 800132c:	41b8      	sbcs	r0, r7
 800132e:	1864      	adds	r4, r4, r1
 8001330:	4464      	add	r4, ip
 8001332:	0df6      	lsrs	r6, r6, #23
 8001334:	0261      	lsls	r1, r4, #9
 8001336:	4330      	orrs	r0, r6
 8001338:	0dec      	lsrs	r4, r5, #23
 800133a:	026e      	lsls	r6, r5, #9
 800133c:	430c      	orrs	r4, r1
 800133e:	4330      	orrs	r0, r6
 8001340:	01c9      	lsls	r1, r1, #7
 8001342:	d400      	bmi.n	8001346 <__aeabi_dmul+0x302>
 8001344:	e0f1      	b.n	800152a <__aeabi_dmul+0x4e6>
 8001346:	2101      	movs	r1, #1
 8001348:	0843      	lsrs	r3, r0, #1
 800134a:	4001      	ands	r1, r0
 800134c:	430b      	orrs	r3, r1
 800134e:	07e0      	lsls	r0, r4, #31
 8001350:	4318      	orrs	r0, r3
 8001352:	0864      	lsrs	r4, r4, #1
 8001354:	4915      	ldr	r1, [pc, #84]	; (80013ac <__aeabi_dmul+0x368>)
 8001356:	9b02      	ldr	r3, [sp, #8]
 8001358:	468c      	mov	ip, r1
 800135a:	4463      	add	r3, ip
 800135c:	2b00      	cmp	r3, #0
 800135e:	dc00      	bgt.n	8001362 <__aeabi_dmul+0x31e>
 8001360:	e097      	b.n	8001492 <__aeabi_dmul+0x44e>
 8001362:	0741      	lsls	r1, r0, #29
 8001364:	d009      	beq.n	800137a <__aeabi_dmul+0x336>
 8001366:	210f      	movs	r1, #15
 8001368:	4001      	ands	r1, r0
 800136a:	2904      	cmp	r1, #4
 800136c:	d005      	beq.n	800137a <__aeabi_dmul+0x336>
 800136e:	1d01      	adds	r1, r0, #4
 8001370:	4281      	cmp	r1, r0
 8001372:	4180      	sbcs	r0, r0
 8001374:	4240      	negs	r0, r0
 8001376:	1824      	adds	r4, r4, r0
 8001378:	0008      	movs	r0, r1
 800137a:	01e1      	lsls	r1, r4, #7
 800137c:	d506      	bpl.n	800138c <__aeabi_dmul+0x348>
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	00c9      	lsls	r1, r1, #3
 8001382:	468c      	mov	ip, r1
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <__aeabi_dmul+0x36c>)
 8001386:	401c      	ands	r4, r3
 8001388:	9b02      	ldr	r3, [sp, #8]
 800138a:	4463      	add	r3, ip
 800138c:	4909      	ldr	r1, [pc, #36]	; (80013b4 <__aeabi_dmul+0x370>)
 800138e:	428b      	cmp	r3, r1
 8001390:	dd00      	ble.n	8001394 <__aeabi_dmul+0x350>
 8001392:	e710      	b.n	80011b6 <__aeabi_dmul+0x172>
 8001394:	0761      	lsls	r1, r4, #29
 8001396:	08c5      	lsrs	r5, r0, #3
 8001398:	0264      	lsls	r4, r4, #9
 800139a:	055b      	lsls	r3, r3, #21
 800139c:	430d      	orrs	r5, r1
 800139e:	0b24      	lsrs	r4, r4, #12
 80013a0:	0d5b      	lsrs	r3, r3, #21
 80013a2:	e6c1      	b.n	8001128 <__aeabi_dmul+0xe4>
 80013a4:	000007ff 	.word	0x000007ff
 80013a8:	fffffc01 	.word	0xfffffc01
 80013ac:	000003ff 	.word	0x000003ff
 80013b0:	feffffff 	.word	0xfeffffff
 80013b4:	000007fe 	.word	0x000007fe
 80013b8:	464b      	mov	r3, r9
 80013ba:	4323      	orrs	r3, r4
 80013bc:	d059      	beq.n	8001472 <__aeabi_dmul+0x42e>
 80013be:	2c00      	cmp	r4, #0
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dmul+0x380>
 80013c2:	e0a3      	b.n	800150c <__aeabi_dmul+0x4c8>
 80013c4:	0020      	movs	r0, r4
 80013c6:	f000 fd05 	bl	8001dd4 <__clzsi2>
 80013ca:	0001      	movs	r1, r0
 80013cc:	0003      	movs	r3, r0
 80013ce:	390b      	subs	r1, #11
 80013d0:	221d      	movs	r2, #29
 80013d2:	1a52      	subs	r2, r2, r1
 80013d4:	4649      	mov	r1, r9
 80013d6:	0018      	movs	r0, r3
 80013d8:	40d1      	lsrs	r1, r2
 80013da:	464a      	mov	r2, r9
 80013dc:	3808      	subs	r0, #8
 80013de:	4082      	lsls	r2, r0
 80013e0:	4084      	lsls	r4, r0
 80013e2:	0010      	movs	r0, r2
 80013e4:	430c      	orrs	r4, r1
 80013e6:	4a74      	ldr	r2, [pc, #464]	; (80015b8 <__aeabi_dmul+0x574>)
 80013e8:	1aeb      	subs	r3, r5, r3
 80013ea:	4694      	mov	ip, r2
 80013ec:	4642      	mov	r2, r8
 80013ee:	4463      	add	r3, ip
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	9b01      	ldr	r3, [sp, #4]
 80013f4:	407a      	eors	r2, r7
 80013f6:	3301      	adds	r3, #1
 80013f8:	2100      	movs	r1, #0
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	2e0a      	cmp	r6, #10
 8001400:	dd00      	ble.n	8001404 <__aeabi_dmul+0x3c0>
 8001402:	e667      	b.n	80010d4 <__aeabi_dmul+0x90>
 8001404:	e683      	b.n	800110e <__aeabi_dmul+0xca>
 8001406:	465b      	mov	r3, fp
 8001408:	4303      	orrs	r3, r0
 800140a:	469a      	mov	sl, r3
 800140c:	d02a      	beq.n	8001464 <__aeabi_dmul+0x420>
 800140e:	465b      	mov	r3, fp
 8001410:	2b00      	cmp	r3, #0
 8001412:	d06d      	beq.n	80014f0 <__aeabi_dmul+0x4ac>
 8001414:	4658      	mov	r0, fp
 8001416:	f000 fcdd 	bl	8001dd4 <__clzsi2>
 800141a:	0001      	movs	r1, r0
 800141c:	0003      	movs	r3, r0
 800141e:	390b      	subs	r1, #11
 8001420:	221d      	movs	r2, #29
 8001422:	1a52      	subs	r2, r2, r1
 8001424:	0021      	movs	r1, r4
 8001426:	0018      	movs	r0, r3
 8001428:	465d      	mov	r5, fp
 800142a:	40d1      	lsrs	r1, r2
 800142c:	3808      	subs	r0, #8
 800142e:	4085      	lsls	r5, r0
 8001430:	000a      	movs	r2, r1
 8001432:	4084      	lsls	r4, r0
 8001434:	432a      	orrs	r2, r5
 8001436:	4693      	mov	fp, r2
 8001438:	46a2      	mov	sl, r4
 800143a:	4d5f      	ldr	r5, [pc, #380]	; (80015b8 <__aeabi_dmul+0x574>)
 800143c:	2600      	movs	r6, #0
 800143e:	1aed      	subs	r5, r5, r3
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	e625      	b.n	8001092 <__aeabi_dmul+0x4e>
 8001446:	465b      	mov	r3, fp
 8001448:	4303      	orrs	r3, r0
 800144a:	469a      	mov	sl, r3
 800144c:	d105      	bne.n	800145a <__aeabi_dmul+0x416>
 800144e:	2300      	movs	r3, #0
 8001450:	469b      	mov	fp, r3
 8001452:	3302      	adds	r3, #2
 8001454:	2608      	movs	r6, #8
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	e61b      	b.n	8001092 <__aeabi_dmul+0x4e>
 800145a:	2303      	movs	r3, #3
 800145c:	4682      	mov	sl, r0
 800145e:	260c      	movs	r6, #12
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	e616      	b.n	8001092 <__aeabi_dmul+0x4e>
 8001464:	2300      	movs	r3, #0
 8001466:	469b      	mov	fp, r3
 8001468:	3301      	adds	r3, #1
 800146a:	2604      	movs	r6, #4
 800146c:	2500      	movs	r5, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	e60f      	b.n	8001092 <__aeabi_dmul+0x4e>
 8001472:	4642      	mov	r2, r8
 8001474:	3301      	adds	r3, #1
 8001476:	9501      	str	r5, [sp, #4]
 8001478:	431e      	orrs	r6, r3
 800147a:	9b01      	ldr	r3, [sp, #4]
 800147c:	407a      	eors	r2, r7
 800147e:	3301      	adds	r3, #1
 8001480:	2400      	movs	r4, #0
 8001482:	2000      	movs	r0, #0
 8001484:	2101      	movs	r1, #1
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2e0a      	cmp	r6, #10
 800148c:	dd00      	ble.n	8001490 <__aeabi_dmul+0x44c>
 800148e:	e621      	b.n	80010d4 <__aeabi_dmul+0x90>
 8001490:	e63d      	b.n	800110e <__aeabi_dmul+0xca>
 8001492:	2101      	movs	r1, #1
 8001494:	1ac9      	subs	r1, r1, r3
 8001496:	2938      	cmp	r1, #56	; 0x38
 8001498:	dd00      	ble.n	800149c <__aeabi_dmul+0x458>
 800149a:	e642      	b.n	8001122 <__aeabi_dmul+0xde>
 800149c:	291f      	cmp	r1, #31
 800149e:	dd47      	ble.n	8001530 <__aeabi_dmul+0x4ec>
 80014a0:	261f      	movs	r6, #31
 80014a2:	0025      	movs	r5, r4
 80014a4:	4276      	negs	r6, r6
 80014a6:	1af3      	subs	r3, r6, r3
 80014a8:	40dd      	lsrs	r5, r3
 80014aa:	002b      	movs	r3, r5
 80014ac:	2920      	cmp	r1, #32
 80014ae:	d005      	beq.n	80014bc <__aeabi_dmul+0x478>
 80014b0:	4942      	ldr	r1, [pc, #264]	; (80015bc <__aeabi_dmul+0x578>)
 80014b2:	9d02      	ldr	r5, [sp, #8]
 80014b4:	468c      	mov	ip, r1
 80014b6:	4465      	add	r5, ip
 80014b8:	40ac      	lsls	r4, r5
 80014ba:	4320      	orrs	r0, r4
 80014bc:	1e41      	subs	r1, r0, #1
 80014be:	4188      	sbcs	r0, r1
 80014c0:	4318      	orrs	r0, r3
 80014c2:	2307      	movs	r3, #7
 80014c4:	001d      	movs	r5, r3
 80014c6:	2400      	movs	r4, #0
 80014c8:	4005      	ands	r5, r0
 80014ca:	4203      	tst	r3, r0
 80014cc:	d04a      	beq.n	8001564 <__aeabi_dmul+0x520>
 80014ce:	230f      	movs	r3, #15
 80014d0:	2400      	movs	r4, #0
 80014d2:	4003      	ands	r3, r0
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d042      	beq.n	800155e <__aeabi_dmul+0x51a>
 80014d8:	1d03      	adds	r3, r0, #4
 80014da:	4283      	cmp	r3, r0
 80014dc:	4180      	sbcs	r0, r0
 80014de:	4240      	negs	r0, r0
 80014e0:	1824      	adds	r4, r4, r0
 80014e2:	0018      	movs	r0, r3
 80014e4:	0223      	lsls	r3, r4, #8
 80014e6:	d53a      	bpl.n	800155e <__aeabi_dmul+0x51a>
 80014e8:	2301      	movs	r3, #1
 80014ea:	2400      	movs	r4, #0
 80014ec:	2500      	movs	r5, #0
 80014ee:	e61b      	b.n	8001128 <__aeabi_dmul+0xe4>
 80014f0:	f000 fc70 	bl	8001dd4 <__clzsi2>
 80014f4:	0001      	movs	r1, r0
 80014f6:	0003      	movs	r3, r0
 80014f8:	3115      	adds	r1, #21
 80014fa:	3320      	adds	r3, #32
 80014fc:	291c      	cmp	r1, #28
 80014fe:	dd8f      	ble.n	8001420 <__aeabi_dmul+0x3dc>
 8001500:	3808      	subs	r0, #8
 8001502:	2200      	movs	r2, #0
 8001504:	4084      	lsls	r4, r0
 8001506:	4692      	mov	sl, r2
 8001508:	46a3      	mov	fp, r4
 800150a:	e796      	b.n	800143a <__aeabi_dmul+0x3f6>
 800150c:	f000 fc62 	bl	8001dd4 <__clzsi2>
 8001510:	0001      	movs	r1, r0
 8001512:	0003      	movs	r3, r0
 8001514:	3115      	adds	r1, #21
 8001516:	3320      	adds	r3, #32
 8001518:	291c      	cmp	r1, #28
 800151a:	dc00      	bgt.n	800151e <__aeabi_dmul+0x4da>
 800151c:	e758      	b.n	80013d0 <__aeabi_dmul+0x38c>
 800151e:	0002      	movs	r2, r0
 8001520:	464c      	mov	r4, r9
 8001522:	3a08      	subs	r2, #8
 8001524:	2000      	movs	r0, #0
 8001526:	4094      	lsls	r4, r2
 8001528:	e75d      	b.n	80013e6 <__aeabi_dmul+0x3a2>
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	e711      	b.n	8001354 <__aeabi_dmul+0x310>
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <__aeabi_dmul+0x57c>)
 8001532:	0026      	movs	r6, r4
 8001534:	469c      	mov	ip, r3
 8001536:	0003      	movs	r3, r0
 8001538:	9d02      	ldr	r5, [sp, #8]
 800153a:	40cb      	lsrs	r3, r1
 800153c:	4465      	add	r5, ip
 800153e:	40ae      	lsls	r6, r5
 8001540:	431e      	orrs	r6, r3
 8001542:	0003      	movs	r3, r0
 8001544:	40ab      	lsls	r3, r5
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	4183      	sbcs	r3, r0
 800154a:	0030      	movs	r0, r6
 800154c:	4318      	orrs	r0, r3
 800154e:	40cc      	lsrs	r4, r1
 8001550:	0743      	lsls	r3, r0, #29
 8001552:	d0c7      	beq.n	80014e4 <__aeabi_dmul+0x4a0>
 8001554:	230f      	movs	r3, #15
 8001556:	4003      	ands	r3, r0
 8001558:	2b04      	cmp	r3, #4
 800155a:	d1bd      	bne.n	80014d8 <__aeabi_dmul+0x494>
 800155c:	e7c2      	b.n	80014e4 <__aeabi_dmul+0x4a0>
 800155e:	0765      	lsls	r5, r4, #29
 8001560:	0264      	lsls	r4, r4, #9
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	08c0      	lsrs	r0, r0, #3
 8001566:	2300      	movs	r3, #0
 8001568:	4305      	orrs	r5, r0
 800156a:	e5dd      	b.n	8001128 <__aeabi_dmul+0xe4>
 800156c:	2500      	movs	r5, #0
 800156e:	2302      	movs	r3, #2
 8001570:	2e0f      	cmp	r6, #15
 8001572:	d10c      	bne.n	800158e <__aeabi_dmul+0x54a>
 8001574:	2480      	movs	r4, #128	; 0x80
 8001576:	465b      	mov	r3, fp
 8001578:	0324      	lsls	r4, r4, #12
 800157a:	4223      	tst	r3, r4
 800157c:	d00e      	beq.n	800159c <__aeabi_dmul+0x558>
 800157e:	4221      	tst	r1, r4
 8001580:	d10c      	bne.n	800159c <__aeabi_dmul+0x558>
 8001582:	430c      	orrs	r4, r1
 8001584:	0324      	lsls	r4, r4, #12
 8001586:	003a      	movs	r2, r7
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <__aeabi_dmul+0x580>)
 800158a:	0b24      	lsrs	r4, r4, #12
 800158c:	e5cc      	b.n	8001128 <__aeabi_dmul+0xe4>
 800158e:	2e0b      	cmp	r6, #11
 8001590:	d000      	beq.n	8001594 <__aeabi_dmul+0x550>
 8001592:	e5a2      	b.n	80010da <__aeabi_dmul+0x96>
 8001594:	468b      	mov	fp, r1
 8001596:	46aa      	mov	sl, r5
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	e5f7      	b.n	800118c <__aeabi_dmul+0x148>
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	465b      	mov	r3, fp
 80015a0:	0324      	lsls	r4, r4, #12
 80015a2:	431c      	orrs	r4, r3
 80015a4:	0324      	lsls	r4, r4, #12
 80015a6:	4642      	mov	r2, r8
 80015a8:	4655      	mov	r5, sl
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <__aeabi_dmul+0x580>)
 80015ac:	0b24      	lsrs	r4, r4, #12
 80015ae:	e5bb      	b.n	8001128 <__aeabi_dmul+0xe4>
 80015b0:	464d      	mov	r5, r9
 80015b2:	0021      	movs	r1, r4
 80015b4:	2303      	movs	r3, #3
 80015b6:	e7db      	b.n	8001570 <__aeabi_dmul+0x52c>
 80015b8:	fffffc0d 	.word	0xfffffc0d
 80015bc:	0000043e 	.word	0x0000043e
 80015c0:	0000041e 	.word	0x0000041e
 80015c4:	000007ff 	.word	0x000007ff

080015c8 <__aeabi_dsub>:
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	4657      	mov	r7, sl
 80015cc:	464e      	mov	r6, r9
 80015ce:	4645      	mov	r5, r8
 80015d0:	46de      	mov	lr, fp
 80015d2:	b5e0      	push	{r5, r6, r7, lr}
 80015d4:	000d      	movs	r5, r1
 80015d6:	0004      	movs	r4, r0
 80015d8:	0019      	movs	r1, r3
 80015da:	0010      	movs	r0, r2
 80015dc:	032b      	lsls	r3, r5, #12
 80015de:	0a5b      	lsrs	r3, r3, #9
 80015e0:	0f62      	lsrs	r2, r4, #29
 80015e2:	431a      	orrs	r2, r3
 80015e4:	00e3      	lsls	r3, r4, #3
 80015e6:	030c      	lsls	r4, r1, #12
 80015e8:	0a64      	lsrs	r4, r4, #9
 80015ea:	0f47      	lsrs	r7, r0, #29
 80015ec:	4327      	orrs	r7, r4
 80015ee:	4cd0      	ldr	r4, [pc, #832]	; (8001930 <__aeabi_dsub+0x368>)
 80015f0:	006e      	lsls	r6, r5, #1
 80015f2:	4691      	mov	r9, r2
 80015f4:	b083      	sub	sp, #12
 80015f6:	004a      	lsls	r2, r1, #1
 80015f8:	00c0      	lsls	r0, r0, #3
 80015fa:	4698      	mov	r8, r3
 80015fc:	46a2      	mov	sl, r4
 80015fe:	0d76      	lsrs	r6, r6, #21
 8001600:	0fed      	lsrs	r5, r5, #31
 8001602:	0d52      	lsrs	r2, r2, #21
 8001604:	0fc9      	lsrs	r1, r1, #31
 8001606:	9001      	str	r0, [sp, #4]
 8001608:	42a2      	cmp	r2, r4
 800160a:	d100      	bne.n	800160e <__aeabi_dsub+0x46>
 800160c:	e0b9      	b.n	8001782 <__aeabi_dsub+0x1ba>
 800160e:	2401      	movs	r4, #1
 8001610:	4061      	eors	r1, r4
 8001612:	468b      	mov	fp, r1
 8001614:	428d      	cmp	r5, r1
 8001616:	d100      	bne.n	800161a <__aeabi_dsub+0x52>
 8001618:	e08d      	b.n	8001736 <__aeabi_dsub+0x16e>
 800161a:	1ab4      	subs	r4, r6, r2
 800161c:	46a4      	mov	ip, r4
 800161e:	2c00      	cmp	r4, #0
 8001620:	dc00      	bgt.n	8001624 <__aeabi_dsub+0x5c>
 8001622:	e0b7      	b.n	8001794 <__aeabi_dsub+0x1cc>
 8001624:	2a00      	cmp	r2, #0
 8001626:	d100      	bne.n	800162a <__aeabi_dsub+0x62>
 8001628:	e0cb      	b.n	80017c2 <__aeabi_dsub+0x1fa>
 800162a:	4ac1      	ldr	r2, [pc, #772]	; (8001930 <__aeabi_dsub+0x368>)
 800162c:	4296      	cmp	r6, r2
 800162e:	d100      	bne.n	8001632 <__aeabi_dsub+0x6a>
 8001630:	e186      	b.n	8001940 <__aeabi_dsub+0x378>
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	0412      	lsls	r2, r2, #16
 8001636:	4317      	orrs	r7, r2
 8001638:	4662      	mov	r2, ip
 800163a:	2a38      	cmp	r2, #56	; 0x38
 800163c:	dd00      	ble.n	8001640 <__aeabi_dsub+0x78>
 800163e:	e1a4      	b.n	800198a <__aeabi_dsub+0x3c2>
 8001640:	2a1f      	cmp	r2, #31
 8001642:	dd00      	ble.n	8001646 <__aeabi_dsub+0x7e>
 8001644:	e21d      	b.n	8001a82 <__aeabi_dsub+0x4ba>
 8001646:	4661      	mov	r1, ip
 8001648:	2220      	movs	r2, #32
 800164a:	003c      	movs	r4, r7
 800164c:	1a52      	subs	r2, r2, r1
 800164e:	0001      	movs	r1, r0
 8001650:	4090      	lsls	r0, r2
 8001652:	4094      	lsls	r4, r2
 8001654:	1e42      	subs	r2, r0, #1
 8001656:	4190      	sbcs	r0, r2
 8001658:	4662      	mov	r2, ip
 800165a:	46a0      	mov	r8, r4
 800165c:	4664      	mov	r4, ip
 800165e:	40d7      	lsrs	r7, r2
 8001660:	464a      	mov	r2, r9
 8001662:	40e1      	lsrs	r1, r4
 8001664:	4644      	mov	r4, r8
 8001666:	1bd2      	subs	r2, r2, r7
 8001668:	4691      	mov	r9, r2
 800166a:	430c      	orrs	r4, r1
 800166c:	4304      	orrs	r4, r0
 800166e:	1b1c      	subs	r4, r3, r4
 8001670:	42a3      	cmp	r3, r4
 8001672:	4192      	sbcs	r2, r2
 8001674:	464b      	mov	r3, r9
 8001676:	4252      	negs	r2, r2
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	469a      	mov	sl, r3
 800167c:	4653      	mov	r3, sl
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	d400      	bmi.n	8001684 <__aeabi_dsub+0xbc>
 8001682:	e12b      	b.n	80018dc <__aeabi_dsub+0x314>
 8001684:	4653      	mov	r3, sl
 8001686:	025a      	lsls	r2, r3, #9
 8001688:	0a53      	lsrs	r3, r2, #9
 800168a:	469a      	mov	sl, r3
 800168c:	4653      	mov	r3, sl
 800168e:	2b00      	cmp	r3, #0
 8001690:	d100      	bne.n	8001694 <__aeabi_dsub+0xcc>
 8001692:	e166      	b.n	8001962 <__aeabi_dsub+0x39a>
 8001694:	4650      	mov	r0, sl
 8001696:	f000 fb9d 	bl	8001dd4 <__clzsi2>
 800169a:	0003      	movs	r3, r0
 800169c:	3b08      	subs	r3, #8
 800169e:	2220      	movs	r2, #32
 80016a0:	0020      	movs	r0, r4
 80016a2:	1ad2      	subs	r2, r2, r3
 80016a4:	4651      	mov	r1, sl
 80016a6:	40d0      	lsrs	r0, r2
 80016a8:	4099      	lsls	r1, r3
 80016aa:	0002      	movs	r2, r0
 80016ac:	409c      	lsls	r4, r3
 80016ae:	430a      	orrs	r2, r1
 80016b0:	429e      	cmp	r6, r3
 80016b2:	dd00      	ble.n	80016b6 <__aeabi_dsub+0xee>
 80016b4:	e164      	b.n	8001980 <__aeabi_dsub+0x3b8>
 80016b6:	1b9b      	subs	r3, r3, r6
 80016b8:	1c59      	adds	r1, r3, #1
 80016ba:	291f      	cmp	r1, #31
 80016bc:	dd00      	ble.n	80016c0 <__aeabi_dsub+0xf8>
 80016be:	e0fe      	b.n	80018be <__aeabi_dsub+0x2f6>
 80016c0:	2320      	movs	r3, #32
 80016c2:	0010      	movs	r0, r2
 80016c4:	0026      	movs	r6, r4
 80016c6:	1a5b      	subs	r3, r3, r1
 80016c8:	409c      	lsls	r4, r3
 80016ca:	4098      	lsls	r0, r3
 80016cc:	40ce      	lsrs	r6, r1
 80016ce:	40ca      	lsrs	r2, r1
 80016d0:	1e63      	subs	r3, r4, #1
 80016d2:	419c      	sbcs	r4, r3
 80016d4:	4330      	orrs	r0, r6
 80016d6:	4692      	mov	sl, r2
 80016d8:	2600      	movs	r6, #0
 80016da:	4304      	orrs	r4, r0
 80016dc:	0763      	lsls	r3, r4, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dsub+0x12c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	4023      	ands	r3, r4
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dsub+0x12c>
 80016e8:	1d23      	adds	r3, r4, #4
 80016ea:	42a3      	cmp	r3, r4
 80016ec:	41a4      	sbcs	r4, r4
 80016ee:	4264      	negs	r4, r4
 80016f0:	44a2      	add	sl, r4
 80016f2:	001c      	movs	r4, r3
 80016f4:	4653      	mov	r3, sl
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	d400      	bmi.n	80016fc <__aeabi_dsub+0x134>
 80016fa:	e0f2      	b.n	80018e2 <__aeabi_dsub+0x31a>
 80016fc:	4b8c      	ldr	r3, [pc, #560]	; (8001930 <__aeabi_dsub+0x368>)
 80016fe:	3601      	adds	r6, #1
 8001700:	429e      	cmp	r6, r3
 8001702:	d100      	bne.n	8001706 <__aeabi_dsub+0x13e>
 8001704:	e10f      	b.n	8001926 <__aeabi_dsub+0x35e>
 8001706:	4653      	mov	r3, sl
 8001708:	498a      	ldr	r1, [pc, #552]	; (8001934 <__aeabi_dsub+0x36c>)
 800170a:	08e4      	lsrs	r4, r4, #3
 800170c:	400b      	ands	r3, r1
 800170e:	0019      	movs	r1, r3
 8001710:	075b      	lsls	r3, r3, #29
 8001712:	4323      	orrs	r3, r4
 8001714:	0572      	lsls	r2, r6, #21
 8001716:	024c      	lsls	r4, r1, #9
 8001718:	0b24      	lsrs	r4, r4, #12
 800171a:	0d52      	lsrs	r2, r2, #21
 800171c:	0512      	lsls	r2, r2, #20
 800171e:	4322      	orrs	r2, r4
 8001720:	07ed      	lsls	r5, r5, #31
 8001722:	432a      	orrs	r2, r5
 8001724:	0018      	movs	r0, r3
 8001726:	0011      	movs	r1, r2
 8001728:	b003      	add	sp, #12
 800172a:	bcf0      	pop	{r4, r5, r6, r7}
 800172c:	46bb      	mov	fp, r7
 800172e:	46b2      	mov	sl, r6
 8001730:	46a9      	mov	r9, r5
 8001732:	46a0      	mov	r8, r4
 8001734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001736:	1ab4      	subs	r4, r6, r2
 8001738:	46a4      	mov	ip, r4
 800173a:	2c00      	cmp	r4, #0
 800173c:	dd59      	ble.n	80017f2 <__aeabi_dsub+0x22a>
 800173e:	2a00      	cmp	r2, #0
 8001740:	d100      	bne.n	8001744 <__aeabi_dsub+0x17c>
 8001742:	e0b0      	b.n	80018a6 <__aeabi_dsub+0x2de>
 8001744:	4556      	cmp	r6, sl
 8001746:	d100      	bne.n	800174a <__aeabi_dsub+0x182>
 8001748:	e0fa      	b.n	8001940 <__aeabi_dsub+0x378>
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	0412      	lsls	r2, r2, #16
 800174e:	4317      	orrs	r7, r2
 8001750:	4662      	mov	r2, ip
 8001752:	2a38      	cmp	r2, #56	; 0x38
 8001754:	dd00      	ble.n	8001758 <__aeabi_dsub+0x190>
 8001756:	e0d4      	b.n	8001902 <__aeabi_dsub+0x33a>
 8001758:	2a1f      	cmp	r2, #31
 800175a:	dc00      	bgt.n	800175e <__aeabi_dsub+0x196>
 800175c:	e1c0      	b.n	8001ae0 <__aeabi_dsub+0x518>
 800175e:	0039      	movs	r1, r7
 8001760:	3a20      	subs	r2, #32
 8001762:	40d1      	lsrs	r1, r2
 8001764:	4662      	mov	r2, ip
 8001766:	2a20      	cmp	r2, #32
 8001768:	d006      	beq.n	8001778 <__aeabi_dsub+0x1b0>
 800176a:	4664      	mov	r4, ip
 800176c:	2240      	movs	r2, #64	; 0x40
 800176e:	1b12      	subs	r2, r2, r4
 8001770:	003c      	movs	r4, r7
 8001772:	4094      	lsls	r4, r2
 8001774:	4304      	orrs	r4, r0
 8001776:	9401      	str	r4, [sp, #4]
 8001778:	9c01      	ldr	r4, [sp, #4]
 800177a:	1e62      	subs	r2, r4, #1
 800177c:	4194      	sbcs	r4, r2
 800177e:	430c      	orrs	r4, r1
 8001780:	e0c3      	b.n	800190a <__aeabi_dsub+0x342>
 8001782:	003c      	movs	r4, r7
 8001784:	4304      	orrs	r4, r0
 8001786:	d02b      	beq.n	80017e0 <__aeabi_dsub+0x218>
 8001788:	468b      	mov	fp, r1
 800178a:	428d      	cmp	r5, r1
 800178c:	d02e      	beq.n	80017ec <__aeabi_dsub+0x224>
 800178e:	4c6a      	ldr	r4, [pc, #424]	; (8001938 <__aeabi_dsub+0x370>)
 8001790:	46a4      	mov	ip, r4
 8001792:	44b4      	add	ip, r6
 8001794:	4664      	mov	r4, ip
 8001796:	2c00      	cmp	r4, #0
 8001798:	d05f      	beq.n	800185a <__aeabi_dsub+0x292>
 800179a:	1b94      	subs	r4, r2, r6
 800179c:	46a4      	mov	ip, r4
 800179e:	2e00      	cmp	r6, #0
 80017a0:	d000      	beq.n	80017a4 <__aeabi_dsub+0x1dc>
 80017a2:	e120      	b.n	80019e6 <__aeabi_dsub+0x41e>
 80017a4:	464c      	mov	r4, r9
 80017a6:	431c      	orrs	r4, r3
 80017a8:	d100      	bne.n	80017ac <__aeabi_dsub+0x1e4>
 80017aa:	e1c7      	b.n	8001b3c <__aeabi_dsub+0x574>
 80017ac:	4661      	mov	r1, ip
 80017ae:	1e4c      	subs	r4, r1, #1
 80017b0:	2901      	cmp	r1, #1
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dsub+0x1ee>
 80017b4:	e223      	b.n	8001bfe <__aeabi_dsub+0x636>
 80017b6:	4d5e      	ldr	r5, [pc, #376]	; (8001930 <__aeabi_dsub+0x368>)
 80017b8:	45ac      	cmp	ip, r5
 80017ba:	d100      	bne.n	80017be <__aeabi_dsub+0x1f6>
 80017bc:	e1d8      	b.n	8001b70 <__aeabi_dsub+0x5a8>
 80017be:	46a4      	mov	ip, r4
 80017c0:	e11a      	b.n	80019f8 <__aeabi_dsub+0x430>
 80017c2:	003a      	movs	r2, r7
 80017c4:	4302      	orrs	r2, r0
 80017c6:	d100      	bne.n	80017ca <__aeabi_dsub+0x202>
 80017c8:	e0e4      	b.n	8001994 <__aeabi_dsub+0x3cc>
 80017ca:	0022      	movs	r2, r4
 80017cc:	3a01      	subs	r2, #1
 80017ce:	2c01      	cmp	r4, #1
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dsub+0x20c>
 80017d2:	e1c3      	b.n	8001b5c <__aeabi_dsub+0x594>
 80017d4:	4956      	ldr	r1, [pc, #344]	; (8001930 <__aeabi_dsub+0x368>)
 80017d6:	428c      	cmp	r4, r1
 80017d8:	d100      	bne.n	80017dc <__aeabi_dsub+0x214>
 80017da:	e0b1      	b.n	8001940 <__aeabi_dsub+0x378>
 80017dc:	4694      	mov	ip, r2
 80017de:	e72b      	b.n	8001638 <__aeabi_dsub+0x70>
 80017e0:	2401      	movs	r4, #1
 80017e2:	4061      	eors	r1, r4
 80017e4:	468b      	mov	fp, r1
 80017e6:	428d      	cmp	r5, r1
 80017e8:	d000      	beq.n	80017ec <__aeabi_dsub+0x224>
 80017ea:	e716      	b.n	800161a <__aeabi_dsub+0x52>
 80017ec:	4952      	ldr	r1, [pc, #328]	; (8001938 <__aeabi_dsub+0x370>)
 80017ee:	468c      	mov	ip, r1
 80017f0:	44b4      	add	ip, r6
 80017f2:	4664      	mov	r4, ip
 80017f4:	2c00      	cmp	r4, #0
 80017f6:	d100      	bne.n	80017fa <__aeabi_dsub+0x232>
 80017f8:	e0d3      	b.n	80019a2 <__aeabi_dsub+0x3da>
 80017fa:	1b91      	subs	r1, r2, r6
 80017fc:	468c      	mov	ip, r1
 80017fe:	2e00      	cmp	r6, #0
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x23c>
 8001802:	e15e      	b.n	8001ac2 <__aeabi_dsub+0x4fa>
 8001804:	494a      	ldr	r1, [pc, #296]	; (8001930 <__aeabi_dsub+0x368>)
 8001806:	428a      	cmp	r2, r1
 8001808:	d100      	bne.n	800180c <__aeabi_dsub+0x244>
 800180a:	e1be      	b.n	8001b8a <__aeabi_dsub+0x5c2>
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	464c      	mov	r4, r9
 8001810:	0409      	lsls	r1, r1, #16
 8001812:	430c      	orrs	r4, r1
 8001814:	46a1      	mov	r9, r4
 8001816:	4661      	mov	r1, ip
 8001818:	2938      	cmp	r1, #56	; 0x38
 800181a:	dd00      	ble.n	800181e <__aeabi_dsub+0x256>
 800181c:	e1ba      	b.n	8001b94 <__aeabi_dsub+0x5cc>
 800181e:	291f      	cmp	r1, #31
 8001820:	dd00      	ble.n	8001824 <__aeabi_dsub+0x25c>
 8001822:	e227      	b.n	8001c74 <__aeabi_dsub+0x6ac>
 8001824:	2420      	movs	r4, #32
 8001826:	1a64      	subs	r4, r4, r1
 8001828:	4649      	mov	r1, r9
 800182a:	40a1      	lsls	r1, r4
 800182c:	001e      	movs	r6, r3
 800182e:	4688      	mov	r8, r1
 8001830:	4661      	mov	r1, ip
 8001832:	40a3      	lsls	r3, r4
 8001834:	40ce      	lsrs	r6, r1
 8001836:	4641      	mov	r1, r8
 8001838:	1e5c      	subs	r4, r3, #1
 800183a:	41a3      	sbcs	r3, r4
 800183c:	4331      	orrs	r1, r6
 800183e:	4319      	orrs	r1, r3
 8001840:	000c      	movs	r4, r1
 8001842:	4663      	mov	r3, ip
 8001844:	4649      	mov	r1, r9
 8001846:	40d9      	lsrs	r1, r3
 8001848:	187f      	adds	r7, r7, r1
 800184a:	1824      	adds	r4, r4, r0
 800184c:	4284      	cmp	r4, r0
 800184e:	419b      	sbcs	r3, r3
 8001850:	425b      	negs	r3, r3
 8001852:	469a      	mov	sl, r3
 8001854:	0016      	movs	r6, r2
 8001856:	44ba      	add	sl, r7
 8001858:	e05d      	b.n	8001916 <__aeabi_dsub+0x34e>
 800185a:	4c38      	ldr	r4, [pc, #224]	; (800193c <__aeabi_dsub+0x374>)
 800185c:	1c72      	adds	r2, r6, #1
 800185e:	4222      	tst	r2, r4
 8001860:	d000      	beq.n	8001864 <__aeabi_dsub+0x29c>
 8001862:	e0df      	b.n	8001a24 <__aeabi_dsub+0x45c>
 8001864:	464a      	mov	r2, r9
 8001866:	431a      	orrs	r2, r3
 8001868:	2e00      	cmp	r6, #0
 800186a:	d000      	beq.n	800186e <__aeabi_dsub+0x2a6>
 800186c:	e15c      	b.n	8001b28 <__aeabi_dsub+0x560>
 800186e:	2a00      	cmp	r2, #0
 8001870:	d100      	bne.n	8001874 <__aeabi_dsub+0x2ac>
 8001872:	e1cf      	b.n	8001c14 <__aeabi_dsub+0x64c>
 8001874:	003a      	movs	r2, r7
 8001876:	4302      	orrs	r2, r0
 8001878:	d100      	bne.n	800187c <__aeabi_dsub+0x2b4>
 800187a:	e17f      	b.n	8001b7c <__aeabi_dsub+0x5b4>
 800187c:	1a1c      	subs	r4, r3, r0
 800187e:	464a      	mov	r2, r9
 8001880:	42a3      	cmp	r3, r4
 8001882:	4189      	sbcs	r1, r1
 8001884:	1bd2      	subs	r2, r2, r7
 8001886:	4249      	negs	r1, r1
 8001888:	1a52      	subs	r2, r2, r1
 800188a:	4692      	mov	sl, r2
 800188c:	0212      	lsls	r2, r2, #8
 800188e:	d400      	bmi.n	8001892 <__aeabi_dsub+0x2ca>
 8001890:	e20a      	b.n	8001ca8 <__aeabi_dsub+0x6e0>
 8001892:	1ac4      	subs	r4, r0, r3
 8001894:	42a0      	cmp	r0, r4
 8001896:	4180      	sbcs	r0, r0
 8001898:	464b      	mov	r3, r9
 800189a:	4240      	negs	r0, r0
 800189c:	1aff      	subs	r7, r7, r3
 800189e:	1a3b      	subs	r3, r7, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	465d      	mov	r5, fp
 80018a4:	e71a      	b.n	80016dc <__aeabi_dsub+0x114>
 80018a6:	003a      	movs	r2, r7
 80018a8:	4302      	orrs	r2, r0
 80018aa:	d073      	beq.n	8001994 <__aeabi_dsub+0x3cc>
 80018ac:	0022      	movs	r2, r4
 80018ae:	3a01      	subs	r2, #1
 80018b0:	2c01      	cmp	r4, #1
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0x2ee>
 80018b4:	e0cb      	b.n	8001a4e <__aeabi_dsub+0x486>
 80018b6:	4554      	cmp	r4, sl
 80018b8:	d042      	beq.n	8001940 <__aeabi_dsub+0x378>
 80018ba:	4694      	mov	ip, r2
 80018bc:	e748      	b.n	8001750 <__aeabi_dsub+0x188>
 80018be:	0010      	movs	r0, r2
 80018c0:	3b1f      	subs	r3, #31
 80018c2:	40d8      	lsrs	r0, r3
 80018c4:	2920      	cmp	r1, #32
 80018c6:	d003      	beq.n	80018d0 <__aeabi_dsub+0x308>
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	1a5b      	subs	r3, r3, r1
 80018cc:	409a      	lsls	r2, r3
 80018ce:	4314      	orrs	r4, r2
 80018d0:	1e63      	subs	r3, r4, #1
 80018d2:	419c      	sbcs	r4, r3
 80018d4:	2300      	movs	r3, #0
 80018d6:	2600      	movs	r6, #0
 80018d8:	469a      	mov	sl, r3
 80018da:	4304      	orrs	r4, r0
 80018dc:	0763      	lsls	r3, r4, #29
 80018de:	d000      	beq.n	80018e2 <__aeabi_dsub+0x31a>
 80018e0:	e6fe      	b.n	80016e0 <__aeabi_dsub+0x118>
 80018e2:	4652      	mov	r2, sl
 80018e4:	08e3      	lsrs	r3, r4, #3
 80018e6:	0752      	lsls	r2, r2, #29
 80018e8:	4313      	orrs	r3, r2
 80018ea:	4652      	mov	r2, sl
 80018ec:	46b4      	mov	ip, r6
 80018ee:	08d2      	lsrs	r2, r2, #3
 80018f0:	490f      	ldr	r1, [pc, #60]	; (8001930 <__aeabi_dsub+0x368>)
 80018f2:	458c      	cmp	ip, r1
 80018f4:	d02a      	beq.n	800194c <__aeabi_dsub+0x384>
 80018f6:	0312      	lsls	r2, r2, #12
 80018f8:	0b14      	lsrs	r4, r2, #12
 80018fa:	4662      	mov	r2, ip
 80018fc:	0552      	lsls	r2, r2, #21
 80018fe:	0d52      	lsrs	r2, r2, #21
 8001900:	e70c      	b.n	800171c <__aeabi_dsub+0x154>
 8001902:	003c      	movs	r4, r7
 8001904:	4304      	orrs	r4, r0
 8001906:	1e62      	subs	r2, r4, #1
 8001908:	4194      	sbcs	r4, r2
 800190a:	18e4      	adds	r4, r4, r3
 800190c:	429c      	cmp	r4, r3
 800190e:	4192      	sbcs	r2, r2
 8001910:	4252      	negs	r2, r2
 8001912:	444a      	add	r2, r9
 8001914:	4692      	mov	sl, r2
 8001916:	4653      	mov	r3, sl
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	d5df      	bpl.n	80018dc <__aeabi_dsub+0x314>
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__aeabi_dsub+0x368>)
 800191e:	3601      	adds	r6, #1
 8001920:	429e      	cmp	r6, r3
 8001922:	d000      	beq.n	8001926 <__aeabi_dsub+0x35e>
 8001924:	e0a0      	b.n	8001a68 <__aeabi_dsub+0x4a0>
 8001926:	0032      	movs	r2, r6
 8001928:	2400      	movs	r4, #0
 800192a:	2300      	movs	r3, #0
 800192c:	e6f6      	b.n	800171c <__aeabi_dsub+0x154>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	000007ff 	.word	0x000007ff
 8001934:	ff7fffff 	.word	0xff7fffff
 8001938:	fffff801 	.word	0xfffff801
 800193c:	000007fe 	.word	0x000007fe
 8001940:	08db      	lsrs	r3, r3, #3
 8001942:	464a      	mov	r2, r9
 8001944:	0752      	lsls	r2, r2, #29
 8001946:	4313      	orrs	r3, r2
 8001948:	464a      	mov	r2, r9
 800194a:	08d2      	lsrs	r2, r2, #3
 800194c:	0019      	movs	r1, r3
 800194e:	4311      	orrs	r1, r2
 8001950:	d100      	bne.n	8001954 <__aeabi_dsub+0x38c>
 8001952:	e1b5      	b.n	8001cc0 <__aeabi_dsub+0x6f8>
 8001954:	2480      	movs	r4, #128	; 0x80
 8001956:	0324      	lsls	r4, r4, #12
 8001958:	4314      	orrs	r4, r2
 800195a:	0324      	lsls	r4, r4, #12
 800195c:	4ad5      	ldr	r2, [pc, #852]	; (8001cb4 <__aeabi_dsub+0x6ec>)
 800195e:	0b24      	lsrs	r4, r4, #12
 8001960:	e6dc      	b.n	800171c <__aeabi_dsub+0x154>
 8001962:	0020      	movs	r0, r4
 8001964:	f000 fa36 	bl	8001dd4 <__clzsi2>
 8001968:	0003      	movs	r3, r0
 800196a:	3318      	adds	r3, #24
 800196c:	2b1f      	cmp	r3, #31
 800196e:	dc00      	bgt.n	8001972 <__aeabi_dsub+0x3aa>
 8001970:	e695      	b.n	800169e <__aeabi_dsub+0xd6>
 8001972:	0022      	movs	r2, r4
 8001974:	3808      	subs	r0, #8
 8001976:	4082      	lsls	r2, r0
 8001978:	2400      	movs	r4, #0
 800197a:	429e      	cmp	r6, r3
 800197c:	dc00      	bgt.n	8001980 <__aeabi_dsub+0x3b8>
 800197e:	e69a      	b.n	80016b6 <__aeabi_dsub+0xee>
 8001980:	1af6      	subs	r6, r6, r3
 8001982:	4bcd      	ldr	r3, [pc, #820]	; (8001cb8 <__aeabi_dsub+0x6f0>)
 8001984:	401a      	ands	r2, r3
 8001986:	4692      	mov	sl, r2
 8001988:	e6a8      	b.n	80016dc <__aeabi_dsub+0x114>
 800198a:	003c      	movs	r4, r7
 800198c:	4304      	orrs	r4, r0
 800198e:	1e62      	subs	r2, r4, #1
 8001990:	4194      	sbcs	r4, r2
 8001992:	e66c      	b.n	800166e <__aeabi_dsub+0xa6>
 8001994:	464a      	mov	r2, r9
 8001996:	08db      	lsrs	r3, r3, #3
 8001998:	0752      	lsls	r2, r2, #29
 800199a:	4313      	orrs	r3, r2
 800199c:	464a      	mov	r2, r9
 800199e:	08d2      	lsrs	r2, r2, #3
 80019a0:	e7a6      	b.n	80018f0 <__aeabi_dsub+0x328>
 80019a2:	4cc6      	ldr	r4, [pc, #792]	; (8001cbc <__aeabi_dsub+0x6f4>)
 80019a4:	1c72      	adds	r2, r6, #1
 80019a6:	4222      	tst	r2, r4
 80019a8:	d000      	beq.n	80019ac <__aeabi_dsub+0x3e4>
 80019aa:	e0ac      	b.n	8001b06 <__aeabi_dsub+0x53e>
 80019ac:	464a      	mov	r2, r9
 80019ae:	431a      	orrs	r2, r3
 80019b0:	2e00      	cmp	r6, #0
 80019b2:	d000      	beq.n	80019b6 <__aeabi_dsub+0x3ee>
 80019b4:	e105      	b.n	8001bc2 <__aeabi_dsub+0x5fa>
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0x3f4>
 80019ba:	e156      	b.n	8001c6a <__aeabi_dsub+0x6a2>
 80019bc:	003a      	movs	r2, r7
 80019be:	4302      	orrs	r2, r0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x3fc>
 80019c2:	e0db      	b.n	8001b7c <__aeabi_dsub+0x5b4>
 80019c4:	181c      	adds	r4, r3, r0
 80019c6:	429c      	cmp	r4, r3
 80019c8:	419b      	sbcs	r3, r3
 80019ca:	444f      	add	r7, r9
 80019cc:	46ba      	mov	sl, r7
 80019ce:	425b      	negs	r3, r3
 80019d0:	449a      	add	sl, r3
 80019d2:	4653      	mov	r3, sl
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	d400      	bmi.n	80019da <__aeabi_dsub+0x412>
 80019d8:	e780      	b.n	80018dc <__aeabi_dsub+0x314>
 80019da:	4652      	mov	r2, sl
 80019dc:	4bb6      	ldr	r3, [pc, #728]	; (8001cb8 <__aeabi_dsub+0x6f0>)
 80019de:	2601      	movs	r6, #1
 80019e0:	401a      	ands	r2, r3
 80019e2:	4692      	mov	sl, r2
 80019e4:	e77a      	b.n	80018dc <__aeabi_dsub+0x314>
 80019e6:	4cb3      	ldr	r4, [pc, #716]	; (8001cb4 <__aeabi_dsub+0x6ec>)
 80019e8:	42a2      	cmp	r2, r4
 80019ea:	d100      	bne.n	80019ee <__aeabi_dsub+0x426>
 80019ec:	e0c0      	b.n	8001b70 <__aeabi_dsub+0x5a8>
 80019ee:	2480      	movs	r4, #128	; 0x80
 80019f0:	464d      	mov	r5, r9
 80019f2:	0424      	lsls	r4, r4, #16
 80019f4:	4325      	orrs	r5, r4
 80019f6:	46a9      	mov	r9, r5
 80019f8:	4664      	mov	r4, ip
 80019fa:	2c38      	cmp	r4, #56	; 0x38
 80019fc:	dc53      	bgt.n	8001aa6 <__aeabi_dsub+0x4de>
 80019fe:	4661      	mov	r1, ip
 8001a00:	2c1f      	cmp	r4, #31
 8001a02:	dd00      	ble.n	8001a06 <__aeabi_dsub+0x43e>
 8001a04:	e0cd      	b.n	8001ba2 <__aeabi_dsub+0x5da>
 8001a06:	2520      	movs	r5, #32
 8001a08:	001e      	movs	r6, r3
 8001a0a:	1b2d      	subs	r5, r5, r4
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	40ab      	lsls	r3, r5
 8001a10:	40ac      	lsls	r4, r5
 8001a12:	40ce      	lsrs	r6, r1
 8001a14:	1e5d      	subs	r5, r3, #1
 8001a16:	41ab      	sbcs	r3, r5
 8001a18:	4334      	orrs	r4, r6
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	464c      	mov	r4, r9
 8001a1e:	40cc      	lsrs	r4, r1
 8001a20:	1b3f      	subs	r7, r7, r4
 8001a22:	e045      	b.n	8001ab0 <__aeabi_dsub+0x4e8>
 8001a24:	464a      	mov	r2, r9
 8001a26:	1a1c      	subs	r4, r3, r0
 8001a28:	1bd1      	subs	r1, r2, r7
 8001a2a:	42a3      	cmp	r3, r4
 8001a2c:	4192      	sbcs	r2, r2
 8001a2e:	4252      	negs	r2, r2
 8001a30:	4692      	mov	sl, r2
 8001a32:	000a      	movs	r2, r1
 8001a34:	4651      	mov	r1, sl
 8001a36:	1a52      	subs	r2, r2, r1
 8001a38:	4692      	mov	sl, r2
 8001a3a:	0212      	lsls	r2, r2, #8
 8001a3c:	d500      	bpl.n	8001a40 <__aeabi_dsub+0x478>
 8001a3e:	e083      	b.n	8001b48 <__aeabi_dsub+0x580>
 8001a40:	4653      	mov	r3, sl
 8001a42:	4323      	orrs	r3, r4
 8001a44:	d000      	beq.n	8001a48 <__aeabi_dsub+0x480>
 8001a46:	e621      	b.n	800168c <__aeabi_dsub+0xc4>
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2500      	movs	r5, #0
 8001a4c:	e753      	b.n	80018f6 <__aeabi_dsub+0x32e>
 8001a4e:	181c      	adds	r4, r3, r0
 8001a50:	429c      	cmp	r4, r3
 8001a52:	419b      	sbcs	r3, r3
 8001a54:	444f      	add	r7, r9
 8001a56:	46ba      	mov	sl, r7
 8001a58:	425b      	negs	r3, r3
 8001a5a:	449a      	add	sl, r3
 8001a5c:	4653      	mov	r3, sl
 8001a5e:	2601      	movs	r6, #1
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	d400      	bmi.n	8001a66 <__aeabi_dsub+0x49e>
 8001a64:	e73a      	b.n	80018dc <__aeabi_dsub+0x314>
 8001a66:	2602      	movs	r6, #2
 8001a68:	4652      	mov	r2, sl
 8001a6a:	4b93      	ldr	r3, [pc, #588]	; (8001cb8 <__aeabi_dsub+0x6f0>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	401a      	ands	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	4021      	ands	r1, r4
 8001a74:	0862      	lsrs	r2, r4, #1
 8001a76:	430a      	orrs	r2, r1
 8001a78:	07dc      	lsls	r4, r3, #31
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	469a      	mov	sl, r3
 8001a7e:	4314      	orrs	r4, r2
 8001a80:	e62c      	b.n	80016dc <__aeabi_dsub+0x114>
 8001a82:	0039      	movs	r1, r7
 8001a84:	3a20      	subs	r2, #32
 8001a86:	40d1      	lsrs	r1, r2
 8001a88:	4662      	mov	r2, ip
 8001a8a:	2a20      	cmp	r2, #32
 8001a8c:	d006      	beq.n	8001a9c <__aeabi_dsub+0x4d4>
 8001a8e:	4664      	mov	r4, ip
 8001a90:	2240      	movs	r2, #64	; 0x40
 8001a92:	1b12      	subs	r2, r2, r4
 8001a94:	003c      	movs	r4, r7
 8001a96:	4094      	lsls	r4, r2
 8001a98:	4304      	orrs	r4, r0
 8001a9a:	9401      	str	r4, [sp, #4]
 8001a9c:	9c01      	ldr	r4, [sp, #4]
 8001a9e:	1e62      	subs	r2, r4, #1
 8001aa0:	4194      	sbcs	r4, r2
 8001aa2:	430c      	orrs	r4, r1
 8001aa4:	e5e3      	b.n	800166e <__aeabi_dsub+0xa6>
 8001aa6:	4649      	mov	r1, r9
 8001aa8:	4319      	orrs	r1, r3
 8001aaa:	000b      	movs	r3, r1
 8001aac:	1e5c      	subs	r4, r3, #1
 8001aae:	41a3      	sbcs	r3, r4
 8001ab0:	1ac4      	subs	r4, r0, r3
 8001ab2:	42a0      	cmp	r0, r4
 8001ab4:	419b      	sbcs	r3, r3
 8001ab6:	425b      	negs	r3, r3
 8001ab8:	1afb      	subs	r3, r7, r3
 8001aba:	469a      	mov	sl, r3
 8001abc:	465d      	mov	r5, fp
 8001abe:	0016      	movs	r6, r2
 8001ac0:	e5dc      	b.n	800167c <__aeabi_dsub+0xb4>
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	4319      	orrs	r1, r3
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x502>
 8001ac8:	e0ae      	b.n	8001c28 <__aeabi_dsub+0x660>
 8001aca:	4661      	mov	r1, ip
 8001acc:	4664      	mov	r4, ip
 8001ace:	3901      	subs	r1, #1
 8001ad0:	2c01      	cmp	r4, #1
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x50e>
 8001ad4:	e0e0      	b.n	8001c98 <__aeabi_dsub+0x6d0>
 8001ad6:	4c77      	ldr	r4, [pc, #476]	; (8001cb4 <__aeabi_dsub+0x6ec>)
 8001ad8:	45a4      	cmp	ip, r4
 8001ada:	d056      	beq.n	8001b8a <__aeabi_dsub+0x5c2>
 8001adc:	468c      	mov	ip, r1
 8001ade:	e69a      	b.n	8001816 <__aeabi_dsub+0x24e>
 8001ae0:	4661      	mov	r1, ip
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	003c      	movs	r4, r7
 8001ae6:	1a52      	subs	r2, r2, r1
 8001ae8:	4094      	lsls	r4, r2
 8001aea:	0001      	movs	r1, r0
 8001aec:	4090      	lsls	r0, r2
 8001aee:	46a0      	mov	r8, r4
 8001af0:	4664      	mov	r4, ip
 8001af2:	1e42      	subs	r2, r0, #1
 8001af4:	4190      	sbcs	r0, r2
 8001af6:	4662      	mov	r2, ip
 8001af8:	40e1      	lsrs	r1, r4
 8001afa:	4644      	mov	r4, r8
 8001afc:	40d7      	lsrs	r7, r2
 8001afe:	430c      	orrs	r4, r1
 8001b00:	4304      	orrs	r4, r0
 8001b02:	44b9      	add	r9, r7
 8001b04:	e701      	b.n	800190a <__aeabi_dsub+0x342>
 8001b06:	496b      	ldr	r1, [pc, #428]	; (8001cb4 <__aeabi_dsub+0x6ec>)
 8001b08:	428a      	cmp	r2, r1
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x546>
 8001b0c:	e70c      	b.n	8001928 <__aeabi_dsub+0x360>
 8001b0e:	1818      	adds	r0, r3, r0
 8001b10:	4298      	cmp	r0, r3
 8001b12:	419b      	sbcs	r3, r3
 8001b14:	444f      	add	r7, r9
 8001b16:	425b      	negs	r3, r3
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	07dc      	lsls	r4, r3, #31
 8001b1c:	0840      	lsrs	r0, r0, #1
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	469a      	mov	sl, r3
 8001b22:	0016      	movs	r6, r2
 8001b24:	4304      	orrs	r4, r0
 8001b26:	e6d9      	b.n	80018dc <__aeabi_dsub+0x314>
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	d000      	beq.n	8001b2e <__aeabi_dsub+0x566>
 8001b2c:	e081      	b.n	8001c32 <__aeabi_dsub+0x66a>
 8001b2e:	003b      	movs	r3, r7
 8001b30:	4303      	orrs	r3, r0
 8001b32:	d11d      	bne.n	8001b70 <__aeabi_dsub+0x5a8>
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	2500      	movs	r5, #0
 8001b38:	0312      	lsls	r2, r2, #12
 8001b3a:	e70b      	b.n	8001954 <__aeabi_dsub+0x38c>
 8001b3c:	08c0      	lsrs	r0, r0, #3
 8001b3e:	077b      	lsls	r3, r7, #29
 8001b40:	465d      	mov	r5, fp
 8001b42:	4303      	orrs	r3, r0
 8001b44:	08fa      	lsrs	r2, r7, #3
 8001b46:	e6d3      	b.n	80018f0 <__aeabi_dsub+0x328>
 8001b48:	1ac4      	subs	r4, r0, r3
 8001b4a:	42a0      	cmp	r0, r4
 8001b4c:	4180      	sbcs	r0, r0
 8001b4e:	464b      	mov	r3, r9
 8001b50:	4240      	negs	r0, r0
 8001b52:	1aff      	subs	r7, r7, r3
 8001b54:	1a3b      	subs	r3, r7, r0
 8001b56:	469a      	mov	sl, r3
 8001b58:	465d      	mov	r5, fp
 8001b5a:	e597      	b.n	800168c <__aeabi_dsub+0xc4>
 8001b5c:	1a1c      	subs	r4, r3, r0
 8001b5e:	464a      	mov	r2, r9
 8001b60:	42a3      	cmp	r3, r4
 8001b62:	419b      	sbcs	r3, r3
 8001b64:	1bd7      	subs	r7, r2, r7
 8001b66:	425b      	negs	r3, r3
 8001b68:	1afb      	subs	r3, r7, r3
 8001b6a:	469a      	mov	sl, r3
 8001b6c:	2601      	movs	r6, #1
 8001b6e:	e585      	b.n	800167c <__aeabi_dsub+0xb4>
 8001b70:	08c0      	lsrs	r0, r0, #3
 8001b72:	077b      	lsls	r3, r7, #29
 8001b74:	465d      	mov	r5, fp
 8001b76:	4303      	orrs	r3, r0
 8001b78:	08fa      	lsrs	r2, r7, #3
 8001b7a:	e6e7      	b.n	800194c <__aeabi_dsub+0x384>
 8001b7c:	464a      	mov	r2, r9
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	0752      	lsls	r2, r2, #29
 8001b82:	4313      	orrs	r3, r2
 8001b84:	464a      	mov	r2, r9
 8001b86:	08d2      	lsrs	r2, r2, #3
 8001b88:	e6b5      	b.n	80018f6 <__aeabi_dsub+0x32e>
 8001b8a:	08c0      	lsrs	r0, r0, #3
 8001b8c:	077b      	lsls	r3, r7, #29
 8001b8e:	4303      	orrs	r3, r0
 8001b90:	08fa      	lsrs	r2, r7, #3
 8001b92:	e6db      	b.n	800194c <__aeabi_dsub+0x384>
 8001b94:	4649      	mov	r1, r9
 8001b96:	4319      	orrs	r1, r3
 8001b98:	000b      	movs	r3, r1
 8001b9a:	1e59      	subs	r1, r3, #1
 8001b9c:	418b      	sbcs	r3, r1
 8001b9e:	001c      	movs	r4, r3
 8001ba0:	e653      	b.n	800184a <__aeabi_dsub+0x282>
 8001ba2:	464d      	mov	r5, r9
 8001ba4:	3c20      	subs	r4, #32
 8001ba6:	40e5      	lsrs	r5, r4
 8001ba8:	2920      	cmp	r1, #32
 8001baa:	d005      	beq.n	8001bb8 <__aeabi_dsub+0x5f0>
 8001bac:	2440      	movs	r4, #64	; 0x40
 8001bae:	1a64      	subs	r4, r4, r1
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	40a1      	lsls	r1, r4
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	4698      	mov	r8, r3
 8001bb8:	4643      	mov	r3, r8
 8001bba:	1e5c      	subs	r4, r3, #1
 8001bbc:	41a3      	sbcs	r3, r4
 8001bbe:	432b      	orrs	r3, r5
 8001bc0:	e776      	b.n	8001ab0 <__aeabi_dsub+0x4e8>
 8001bc2:	2a00      	cmp	r2, #0
 8001bc4:	d0e1      	beq.n	8001b8a <__aeabi_dsub+0x5c2>
 8001bc6:	003a      	movs	r2, r7
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	4302      	orrs	r2, r0
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x608>
 8001bce:	e6b8      	b.n	8001942 <__aeabi_dsub+0x37a>
 8001bd0:	464a      	mov	r2, r9
 8001bd2:	0752      	lsls	r2, r2, #29
 8001bd4:	2480      	movs	r4, #128	; 0x80
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	464a      	mov	r2, r9
 8001bda:	0324      	lsls	r4, r4, #12
 8001bdc:	08d2      	lsrs	r2, r2, #3
 8001bde:	4222      	tst	r2, r4
 8001be0:	d007      	beq.n	8001bf2 <__aeabi_dsub+0x62a>
 8001be2:	08fe      	lsrs	r6, r7, #3
 8001be4:	4226      	tst	r6, r4
 8001be6:	d104      	bne.n	8001bf2 <__aeabi_dsub+0x62a>
 8001be8:	465d      	mov	r5, fp
 8001bea:	0032      	movs	r2, r6
 8001bec:	08c3      	lsrs	r3, r0, #3
 8001bee:	077f      	lsls	r7, r7, #29
 8001bf0:	433b      	orrs	r3, r7
 8001bf2:	0f59      	lsrs	r1, r3, #29
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	0749      	lsls	r1, r1, #29
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	e6a6      	b.n	800194c <__aeabi_dsub+0x384>
 8001bfe:	1ac4      	subs	r4, r0, r3
 8001c00:	42a0      	cmp	r0, r4
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	464b      	mov	r3, r9
 8001c06:	4240      	negs	r0, r0
 8001c08:	1aff      	subs	r7, r7, r3
 8001c0a:	1a3b      	subs	r3, r7, r0
 8001c0c:	469a      	mov	sl, r3
 8001c0e:	465d      	mov	r5, fp
 8001c10:	2601      	movs	r6, #1
 8001c12:	e533      	b.n	800167c <__aeabi_dsub+0xb4>
 8001c14:	003b      	movs	r3, r7
 8001c16:	4303      	orrs	r3, r0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x654>
 8001c1a:	e715      	b.n	8001a48 <__aeabi_dsub+0x480>
 8001c1c:	08c0      	lsrs	r0, r0, #3
 8001c1e:	077b      	lsls	r3, r7, #29
 8001c20:	465d      	mov	r5, fp
 8001c22:	4303      	orrs	r3, r0
 8001c24:	08fa      	lsrs	r2, r7, #3
 8001c26:	e666      	b.n	80018f6 <__aeabi_dsub+0x32e>
 8001c28:	08c0      	lsrs	r0, r0, #3
 8001c2a:	077b      	lsls	r3, r7, #29
 8001c2c:	4303      	orrs	r3, r0
 8001c2e:	08fa      	lsrs	r2, r7, #3
 8001c30:	e65e      	b.n	80018f0 <__aeabi_dsub+0x328>
 8001c32:	003a      	movs	r2, r7
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	4302      	orrs	r2, r0
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x674>
 8001c3a:	e682      	b.n	8001942 <__aeabi_dsub+0x37a>
 8001c3c:	464a      	mov	r2, r9
 8001c3e:	0752      	lsls	r2, r2, #29
 8001c40:	2480      	movs	r4, #128	; 0x80
 8001c42:	4313      	orrs	r3, r2
 8001c44:	464a      	mov	r2, r9
 8001c46:	0324      	lsls	r4, r4, #12
 8001c48:	08d2      	lsrs	r2, r2, #3
 8001c4a:	4222      	tst	r2, r4
 8001c4c:	d007      	beq.n	8001c5e <__aeabi_dsub+0x696>
 8001c4e:	08fe      	lsrs	r6, r7, #3
 8001c50:	4226      	tst	r6, r4
 8001c52:	d104      	bne.n	8001c5e <__aeabi_dsub+0x696>
 8001c54:	465d      	mov	r5, fp
 8001c56:	0032      	movs	r2, r6
 8001c58:	08c3      	lsrs	r3, r0, #3
 8001c5a:	077f      	lsls	r7, r7, #29
 8001c5c:	433b      	orrs	r3, r7
 8001c5e:	0f59      	lsrs	r1, r3, #29
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	08db      	lsrs	r3, r3, #3
 8001c64:	0749      	lsls	r1, r1, #29
 8001c66:	430b      	orrs	r3, r1
 8001c68:	e670      	b.n	800194c <__aeabi_dsub+0x384>
 8001c6a:	08c0      	lsrs	r0, r0, #3
 8001c6c:	077b      	lsls	r3, r7, #29
 8001c6e:	4303      	orrs	r3, r0
 8001c70:	08fa      	lsrs	r2, r7, #3
 8001c72:	e640      	b.n	80018f6 <__aeabi_dsub+0x32e>
 8001c74:	464c      	mov	r4, r9
 8001c76:	3920      	subs	r1, #32
 8001c78:	40cc      	lsrs	r4, r1
 8001c7a:	4661      	mov	r1, ip
 8001c7c:	2920      	cmp	r1, #32
 8001c7e:	d006      	beq.n	8001c8e <__aeabi_dsub+0x6c6>
 8001c80:	4666      	mov	r6, ip
 8001c82:	2140      	movs	r1, #64	; 0x40
 8001c84:	1b89      	subs	r1, r1, r6
 8001c86:	464e      	mov	r6, r9
 8001c88:	408e      	lsls	r6, r1
 8001c8a:	4333      	orrs	r3, r6
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	4643      	mov	r3, r8
 8001c90:	1e59      	subs	r1, r3, #1
 8001c92:	418b      	sbcs	r3, r1
 8001c94:	431c      	orrs	r4, r3
 8001c96:	e5d8      	b.n	800184a <__aeabi_dsub+0x282>
 8001c98:	181c      	adds	r4, r3, r0
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	4180      	sbcs	r0, r0
 8001c9e:	444f      	add	r7, r9
 8001ca0:	46ba      	mov	sl, r7
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	4482      	add	sl, r0
 8001ca6:	e6d9      	b.n	8001a5c <__aeabi_dsub+0x494>
 8001ca8:	4653      	mov	r3, sl
 8001caa:	4323      	orrs	r3, r4
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x6e8>
 8001cae:	e6cb      	b.n	8001a48 <__aeabi_dsub+0x480>
 8001cb0:	e614      	b.n	80018dc <__aeabi_dsub+0x314>
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	000007ff 	.word	0x000007ff
 8001cb8:	ff7fffff 	.word	0xff7fffff
 8001cbc:	000007fe 	.word	0x000007fe
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	4a01      	ldr	r2, [pc, #4]	; (8001cc8 <__aeabi_dsub+0x700>)
 8001cc4:	001c      	movs	r4, r3
 8001cc6:	e529      	b.n	800171c <__aeabi_dsub+0x154>
 8001cc8:	000007ff 	.word	0x000007ff

08001ccc <__aeabi_dcmpun>:
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	0005      	movs	r5, r0
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <__aeabi_dcmpun+0x38>)
 8001cd2:	031c      	lsls	r4, r3, #12
 8001cd4:	0016      	movs	r6, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	030a      	lsls	r2, r1, #12
 8001cda:	0049      	lsls	r1, r1, #1
 8001cdc:	0b12      	lsrs	r2, r2, #12
 8001cde:	0d49      	lsrs	r1, r1, #21
 8001ce0:	0b24      	lsrs	r4, r4, #12
 8001ce2:	0d5b      	lsrs	r3, r3, #21
 8001ce4:	4281      	cmp	r1, r0
 8001ce6:	d008      	beq.n	8001cfa <__aeabi_dcmpun+0x2e>
 8001ce8:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <__aeabi_dcmpun+0x38>)
 8001cea:	2000      	movs	r0, #0
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d103      	bne.n	8001cf8 <__aeabi_dcmpun+0x2c>
 8001cf0:	0020      	movs	r0, r4
 8001cf2:	4330      	orrs	r0, r6
 8001cf4:	1e43      	subs	r3, r0, #1
 8001cf6:	4198      	sbcs	r0, r3
 8001cf8:	bd70      	pop	{r4, r5, r6, pc}
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	432a      	orrs	r2, r5
 8001cfe:	d1fb      	bne.n	8001cf8 <__aeabi_dcmpun+0x2c>
 8001d00:	e7f2      	b.n	8001ce8 <__aeabi_dcmpun+0x1c>
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	000007ff 	.word	0x000007ff

08001d08 <__aeabi_d2iz>:
 8001d08:	000a      	movs	r2, r1
 8001d0a:	b530      	push	{r4, r5, lr}
 8001d0c:	4c13      	ldr	r4, [pc, #76]	; (8001d5c <__aeabi_d2iz+0x54>)
 8001d0e:	0053      	lsls	r3, r2, #1
 8001d10:	0309      	lsls	r1, r1, #12
 8001d12:	0005      	movs	r5, r0
 8001d14:	0b09      	lsrs	r1, r1, #12
 8001d16:	2000      	movs	r0, #0
 8001d18:	0d5b      	lsrs	r3, r3, #21
 8001d1a:	0fd2      	lsrs	r2, r2, #31
 8001d1c:	42a3      	cmp	r3, r4
 8001d1e:	dd04      	ble.n	8001d2a <__aeabi_d2iz+0x22>
 8001d20:	480f      	ldr	r0, [pc, #60]	; (8001d60 <__aeabi_d2iz+0x58>)
 8001d22:	4283      	cmp	r3, r0
 8001d24:	dd02      	ble.n	8001d2c <__aeabi_d2iz+0x24>
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <__aeabi_d2iz+0x5c>)
 8001d28:	18d0      	adds	r0, r2, r3
 8001d2a:	bd30      	pop	{r4, r5, pc}
 8001d2c:	2080      	movs	r0, #128	; 0x80
 8001d2e:	0340      	lsls	r0, r0, #13
 8001d30:	4301      	orrs	r1, r0
 8001d32:	480d      	ldr	r0, [pc, #52]	; (8001d68 <__aeabi_d2iz+0x60>)
 8001d34:	1ac0      	subs	r0, r0, r3
 8001d36:	281f      	cmp	r0, #31
 8001d38:	dd08      	ble.n	8001d4c <__aeabi_d2iz+0x44>
 8001d3a:	480c      	ldr	r0, [pc, #48]	; (8001d6c <__aeabi_d2iz+0x64>)
 8001d3c:	1ac3      	subs	r3, r0, r3
 8001d3e:	40d9      	lsrs	r1, r3
 8001d40:	000b      	movs	r3, r1
 8001d42:	4258      	negs	r0, r3
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d1f0      	bne.n	8001d2a <__aeabi_d2iz+0x22>
 8001d48:	0018      	movs	r0, r3
 8001d4a:	e7ee      	b.n	8001d2a <__aeabi_d2iz+0x22>
 8001d4c:	4c08      	ldr	r4, [pc, #32]	; (8001d70 <__aeabi_d2iz+0x68>)
 8001d4e:	40c5      	lsrs	r5, r0
 8001d50:	46a4      	mov	ip, r4
 8001d52:	4463      	add	r3, ip
 8001d54:	4099      	lsls	r1, r3
 8001d56:	000b      	movs	r3, r1
 8001d58:	432b      	orrs	r3, r5
 8001d5a:	e7f2      	b.n	8001d42 <__aeabi_d2iz+0x3a>
 8001d5c:	000003fe 	.word	0x000003fe
 8001d60:	0000041d 	.word	0x0000041d
 8001d64:	7fffffff 	.word	0x7fffffff
 8001d68:	00000433 	.word	0x00000433
 8001d6c:	00000413 	.word	0x00000413
 8001d70:	fffffbed 	.word	0xfffffbed

08001d74 <__aeabi_i2d>:
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d016      	beq.n	8001da8 <__aeabi_i2d+0x34>
 8001d7a:	17c3      	asrs	r3, r0, #31
 8001d7c:	18c5      	adds	r5, r0, r3
 8001d7e:	405d      	eors	r5, r3
 8001d80:	0fc4      	lsrs	r4, r0, #31
 8001d82:	0028      	movs	r0, r5
 8001d84:	f000 f826 	bl	8001dd4 <__clzsi2>
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <__aeabi_i2d+0x5c>)
 8001d8a:	1a1b      	subs	r3, r3, r0
 8001d8c:	280a      	cmp	r0, #10
 8001d8e:	dc16      	bgt.n	8001dbe <__aeabi_i2d+0x4a>
 8001d90:	0002      	movs	r2, r0
 8001d92:	002e      	movs	r6, r5
 8001d94:	3215      	adds	r2, #21
 8001d96:	4096      	lsls	r6, r2
 8001d98:	220b      	movs	r2, #11
 8001d9a:	1a12      	subs	r2, r2, r0
 8001d9c:	40d5      	lsrs	r5, r2
 8001d9e:	055b      	lsls	r3, r3, #21
 8001da0:	032d      	lsls	r5, r5, #12
 8001da2:	0b2d      	lsrs	r5, r5, #12
 8001da4:	0d5b      	lsrs	r3, r3, #21
 8001da6:	e003      	b.n	8001db0 <__aeabi_i2d+0x3c>
 8001da8:	2400      	movs	r4, #0
 8001daa:	2300      	movs	r3, #0
 8001dac:	2500      	movs	r5, #0
 8001dae:	2600      	movs	r6, #0
 8001db0:	051b      	lsls	r3, r3, #20
 8001db2:	432b      	orrs	r3, r5
 8001db4:	07e4      	lsls	r4, r4, #31
 8001db6:	4323      	orrs	r3, r4
 8001db8:	0030      	movs	r0, r6
 8001dba:	0019      	movs	r1, r3
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}
 8001dbe:	380b      	subs	r0, #11
 8001dc0:	4085      	lsls	r5, r0
 8001dc2:	055b      	lsls	r3, r3, #21
 8001dc4:	032d      	lsls	r5, r5, #12
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	0b2d      	lsrs	r5, r5, #12
 8001dca:	0d5b      	lsrs	r3, r3, #21
 8001dcc:	e7f0      	b.n	8001db0 <__aeabi_i2d+0x3c>
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	0000041e 	.word	0x0000041e

08001dd4 <__clzsi2>:
 8001dd4:	211c      	movs	r1, #28
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	041b      	lsls	r3, r3, #16
 8001dda:	4298      	cmp	r0, r3
 8001ddc:	d301      	bcc.n	8001de2 <__clzsi2+0xe>
 8001dde:	0c00      	lsrs	r0, r0, #16
 8001de0:	3910      	subs	r1, #16
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	4298      	cmp	r0, r3
 8001de6:	d301      	bcc.n	8001dec <__clzsi2+0x18>
 8001de8:	0a00      	lsrs	r0, r0, #8
 8001dea:	3908      	subs	r1, #8
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	4298      	cmp	r0, r3
 8001df0:	d301      	bcc.n	8001df6 <__clzsi2+0x22>
 8001df2:	0900      	lsrs	r0, r0, #4
 8001df4:	3904      	subs	r1, #4
 8001df6:	a202      	add	r2, pc, #8	; (adr r2, 8001e00 <__clzsi2+0x2c>)
 8001df8:	5c10      	ldrb	r0, [r2, r0]
 8001dfa:	1840      	adds	r0, r0, r1
 8001dfc:	4770      	bx	lr
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	02020304 	.word	0x02020304
 8001e04:	01010101 	.word	0x01010101
	...

08001e10 <__clzdi2>:
 8001e10:	b510      	push	{r4, lr}
 8001e12:	2900      	cmp	r1, #0
 8001e14:	d103      	bne.n	8001e1e <__clzdi2+0xe>
 8001e16:	f7ff ffdd 	bl	8001dd4 <__clzsi2>
 8001e1a:	3020      	adds	r0, #32
 8001e1c:	e002      	b.n	8001e24 <__clzdi2+0x14>
 8001e1e:	0008      	movs	r0, r1
 8001e20:	f7ff ffd8 	bl	8001dd4 <__clzsi2>
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)

08001e28 <cJSON_strdup>:
/* strlen of character literals resolved at compile time */
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = {internal_malloc, internal_free, internal_realloc};

static unsigned char *cJSON_strdup(const unsigned char *string, const internal_hooks *const hooks) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  size_t length = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  unsigned char *copy = NULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]

  if (string == NULL) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <cJSON_strdup+0x1c>
    return NULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e019      	b.n	8001e78 <cJSON_strdup+0x50>
  }

  length = strlen((const char *)string) + sizeof("");
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7fe f95e 	bl	8000108 <strlen>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
  copy = (unsigned char *)hooks->allocate(length);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	0010      	movs	r0, r2
 8001e5a:	4798      	blx	r3
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	60bb      	str	r3, [r7, #8]
  if (copy == NULL) {
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <cJSON_strdup+0x42>
    return NULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e006      	b.n	8001e78 <cJSON_strdup+0x50>
  }
  memcpy(copy, string, length);
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f006 f9b0 	bl	80081d6 <memcpy>

  return copy;
 8001e76:	68bb      	ldr	r3, [r7, #8]
}
 8001e78:	0018      	movs	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b004      	add	sp, #16
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <cJSON_New_Item>:
    global_hooks.reallocate = realloc;
  }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks *const hooks) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  cJSON *node = (cJSON *)hooks->allocate(sizeof(cJSON));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2028      	movs	r0, #40	; 0x28
 8001e8e:	4798      	blx	r3
 8001e90:	0003      	movs	r3, r0
 8001e92:	60fb      	str	r3, [r7, #12]
  if (node) {
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <cJSON_New_Item+0x26>
    memset(node, '\0', sizeof(cJSON));
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2228      	movs	r2, #40	; 0x28
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f006 f8ed 	bl	8008080 <memset>
  }

  return node;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  cJSON *next = NULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  while (item != NULL) {
 8001ebc:	e03e      	b.n	8001f3c <cJSON_Delete+0x8c>
    next = item->next;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!(item->type & cJSON_IsReference) && (item->child != NULL)) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d108      	bne.n	8001ee2 <cJSON_Delete+0x32>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <cJSON_Delete+0x32>
      cJSON_Delete(item->child);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff ffe7 	bl	8001eb0 <cJSON_Delete>
    }
    if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL)) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d10c      	bne.n	8001f08 <cJSON_Delete+0x58>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <cJSON_Delete+0x58>
      global_hooks.deallocate(item->valuestring);
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <cJSON_Delete+0x9c>)
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	0018      	movs	r0, r3
 8001f00:	4790      	blx	r2
      item->valuestring = NULL;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
    }
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4013      	ands	r3, r2
 8001f12:	d10c      	bne.n	8001f2e <cJSON_Delete+0x7e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <cJSON_Delete+0x7e>
      global_hooks.deallocate(item->string);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <cJSON_Delete+0x9c>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	0018      	movs	r0, r3
 8001f26:	4790      	blx	r2
      item->string = NULL;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
    }
    global_hooks.deallocate(item);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <cJSON_Delete+0x9c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	0010      	movs	r0, r2
 8001f36:	4798      	blx	r3
    item = next;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	607b      	str	r3, [r7, #4]
  while (item != NULL) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1bd      	bne.n	8001ebe <cJSON_Delete+0xe>
  }
}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b004      	add	sp, #16
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000000 	.word	0x20000000

08001f50 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
  struct lconv *lconv = localeconv();
  return (unsigned char)lconv->decimal_point[0];
#else
  return '.';
 8001f54:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <ensure>:
  cJSON_bool format; /* is this print a formatted print */
  internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char *ensure(printbuffer *const p, size_t needed) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  unsigned char *newbuffer = NULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  size_t newsize = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]

  if ((p == NULL) || (p->buffer == NULL)) {
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <ensure+0x20>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <ensure+0x24>
    return NULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e086      	b.n	800208e <ensure+0x132>
  }

  if ((p->length > 0) && (p->offset >= p->length)) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <ensure+0x3c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d301      	bcc.n	8001f98 <ensure+0x3c>
    /* make sure that offset is valid */
    return NULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e07a      	b.n	800208e <ensure+0x132>
  }

  if (needed > INT_MAX) {
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da01      	bge.n	8001fa2 <ensure+0x46>
    /* sizes bigger than INT_MAX are currently not supported */
    return NULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e075      	b.n	800208e <ensure+0x132>
  }

  needed += p->offset + 1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	18d3      	adds	r3, r2, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	603b      	str	r3, [r7, #0]
  if (needed <= p->length) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d805      	bhi.n	8001fc4 <ensure+0x68>
    return p->buffer + p->offset;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	18d3      	adds	r3, r2, r3
 8001fc2:	e064      	b.n	800208e <ensure+0x132>
  }

  if (p->noalloc) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <ensure+0x74>
    return NULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e05e      	b.n	800208e <ensure+0x132>
  }

  /* calculate new buffer size */
  if (needed > (INT_MAX / 2)) {
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	05db      	lsls	r3, r3, #23
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d307      	bcc.n	8001fea <ensure+0x8e>
    /* overflow of int, use INT_MAX if possible */
    if (needed <= INT_MAX) {
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db02      	blt.n	8001fe6 <ensure+0x8a>
      newsize = INT_MAX;
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <ensure+0x13c>)
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	e004      	b.n	8001ff0 <ensure+0x94>
    } else {
      return NULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e051      	b.n	800208e <ensure+0x132>
    }
  } else {
    newsize = needed * 2;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
  }

  if (p->hooks.reallocate != NULL) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d019      	beq.n	800202c <ensure+0xd0>
    /* reallocate with realloc if available */
    newbuffer = (unsigned char *)p->hooks.reallocate(p->buffer, newsize);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	0018      	movs	r0, r3
 8002004:	4790      	blx	r2
 8002006:	0003      	movs	r3, r0
 8002008:	60fb      	str	r3, [r7, #12]
    if (newbuffer == NULL) {
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d134      	bne.n	800207a <ensure+0x11e>
      p->hooks.deallocate(p->buffer);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0018      	movs	r0, r3
 800201a:	4790      	blx	r2
      p->length = 0;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
      p->buffer = NULL;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

      return NULL;
 8002028:	2300      	movs	r3, #0
 800202a:	e030      	b.n	800208e <ensure+0x132>
    }
  } else {
    /* otherwise reallocate manually */
    newbuffer = (unsigned char *)p->hooks.allocate(newsize);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	0010      	movs	r0, r2
 8002034:	4798      	blx	r3
 8002036:	0003      	movs	r3, r0
 8002038:	60fb      	str	r3, [r7, #12]
    if (!newbuffer) {
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <ensure+0x100>
      p->hooks.deallocate(p->buffer);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0018      	movs	r0, r3
 800204a:	4790      	blx	r2
      p->length = 0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
      p->buffer = NULL;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

      return NULL;
 8002058:	2300      	movs	r3, #0
 800205a:	e018      	b.n	800208e <ensure+0x132>
    }

    memcpy(newbuffer, p->buffer, p->offset + 1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	0018      	movs	r0, r3
 800206a:	f006 f8b4 	bl	80081d6 <memcpy>
    p->hooks.deallocate(p->buffer);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0018      	movs	r0, r3
 8002078:	4790      	blx	r2
  }
  p->length = newsize;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	605a      	str	r2, [r3, #4]
  p->buffer = newbuffer;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]

  return newbuffer + p->offset;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	18d3      	adds	r3, r2, r3
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	7fffffff 	.word	0x7fffffff

0800209c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer *const buffer) {
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  const unsigned char *buffer_pointer = NULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  if ((buffer == NULL) || (buffer->buffer == NULL)) {
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d014      	beq.n	80020d8 <update_offset+0x3c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d010      	beq.n	80020d8 <update_offset+0x3c>
    return;
  }
  buffer_pointer = buffer->buffer + buffer->offset;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	18d3      	adds	r3, r2, r3
 80020c0:	60fb      	str	r3, [r7, #12]

  buffer->offset += strlen((const char *)buffer_pointer);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689c      	ldr	r4, [r3, #8]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7fe f81d 	bl	8000108 <strlen>
 80020ce:	0003      	movs	r3, r0
 80020d0:	18e2      	adds	r2, r4, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	e000      	b.n	80020da <update_offset+0x3e>
    return;
 80020d8:	46c0      	nop			; (mov r8, r8)
}
 80020da:	46bd      	mov	sp, r7
 80020dc:	b005      	add	sp, #20
 80020de:	bd90      	pop	{r4, r7, pc}

080020e0 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b) {
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6238      	str	r0, [r7, #32]
 80020e8:	6279      	str	r1, [r7, #36]	; 0x24
 80020ea:	61ba      	str	r2, [r7, #24]
 80020ec:	61fb      	str	r3, [r7, #28]
  double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6938      	ldr	r0, [r7, #16]
 800210c:	6979      	ldr	r1, [r7, #20]
 800210e:	f7fe f8c3 	bl	8000298 <__aeabi_dcmpgt>
 8002112:	1e03      	subs	r3, r0, #0
 8002114:	d005      	beq.n	8002122 <compare_double+0x42>
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	001c      	movs	r4, r3
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	085d      	lsrs	r5, r3, #1
 8002120:	e004      	b.n	800212c <compare_double+0x4c>
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	001c      	movs	r4, r3
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	085d      	lsrs	r5, r3, #1
 800212c:	62bc      	str	r4, [r7, #40]	; 0x28
 800212e:	62fd      	str	r5, [r7, #44]	; 0x2c
  return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	6a38      	ldr	r0, [r7, #32]
 8002136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002138:	f7ff fa46 	bl	80015c8 <__aeabi_dsub>
 800213c:	0002      	movs	r2, r0
 800213e:	000b      	movs	r3, r1
 8002140:	0011      	movs	r1, r2
 8002142:	6039      	str	r1, [r7, #0]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <compare_double+0x98>)
 800214e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002152:	f7fe ff77 	bl	8001044 <__aeabi_dmul>
 8002156:	0002      	movs	r2, r0
 8002158:	000b      	movs	r3, r1
 800215a:	2101      	movs	r1, #1
 800215c:	1c0c      	adds	r4, r1, #0
 800215e:	6838      	ldr	r0, [r7, #0]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	f7fe f88f 	bl	8000284 <__aeabi_dcmple>
 8002166:	1e03      	subs	r3, r0, #0
 8002168:	d101      	bne.n	800216e <compare_double+0x8e>
 800216a:	2300      	movs	r3, #0
 800216c:	1c1c      	adds	r4, r3, #0
 800216e:	b2e3      	uxtb	r3, r4
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	b00c      	add	sp, #48	; 0x30
 8002176:	bdb0      	pop	{r4, r5, r7, pc}
 8002178:	3cb00000 	.word	0x3cb00000

0800217c <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON *const item, printbuffer *const output_buffer) {
 800217c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217e:	b093      	sub	sp, #76	; 0x4c
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  unsigned char *output_pointer = NULL;
 8002186:	2300      	movs	r3, #0
 8002188:	63fb      	str	r3, [r7, #60]	; 0x3c
  double d = item->valuedouble;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	633a      	str	r2, [r7, #48]	; 0x30
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
  int length = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	647b      	str	r3, [r7, #68]	; 0x44
  size_t i = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	643b      	str	r3, [r7, #64]	; 0x40
  unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800219c:	2314      	movs	r3, #20
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2216      	movs	r2, #22
 80021a8:	2100      	movs	r1, #0
 80021aa:	0018      	movs	r0, r3
 80021ac:	f005 ff68 	bl	8008080 <memset>
  unsigned char decimal_point = get_decimal_point();
 80021b0:	232f      	movs	r3, #47	; 0x2f
 80021b2:	18fe      	adds	r6, r7, r3
 80021b4:	f7ff fecc 	bl	8001f50 <get_decimal_point>
 80021b8:	0003      	movs	r3, r0
 80021ba:	7033      	strb	r3, [r6, #0]
  double test = 0.0;
 80021bc:	2200      	movs	r2, #0
 80021be:	2300      	movs	r3, #0
 80021c0:	60ba      	str	r2, [r7, #8]
 80021c2:	60fb      	str	r3, [r7, #12]

  if (output_buffer == NULL) {
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <print_number+0x52>
    return false;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e0b3      	b.n	8002336 <print_number+0x1ba>
  }

  /* This checks for NaN and Infinity */
  if (isnan(d) || isinf(d)) {
 80021ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021d6:	f7ff fd79 	bl	8001ccc <__aeabi_dcmpun>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d120      	bne.n	8002220 <print_number+0xa4>
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	001c      	movs	r4, r3
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	085d      	lsrs	r5, r3, #1
 80021e8:	2301      	movs	r3, #1
 80021ea:	1c1e      	adds	r6, r3, #0
 80021ec:	2201      	movs	r2, #1
 80021ee:	4252      	negs	r2, r2
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <print_number+0x1c4>)
 80021f2:	0020      	movs	r0, r4
 80021f4:	0029      	movs	r1, r5
 80021f6:	f7ff fd69 	bl	8001ccc <__aeabi_dcmpun>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d10a      	bne.n	8002214 <print_number+0x98>
 80021fe:	2201      	movs	r2, #1
 8002200:	4252      	negs	r2, r2
 8002202:	4b4f      	ldr	r3, [pc, #316]	; (8002340 <print_number+0x1c4>)
 8002204:	0020      	movs	r0, r4
 8002206:	0029      	movs	r1, r5
 8002208:	f7fe f83c 	bl	8000284 <__aeabi_dcmple>
 800220c:	1e03      	subs	r3, r0, #0
 800220e:	d101      	bne.n	8002214 <print_number+0x98>
 8002210:	2300      	movs	r3, #0
 8002212:	1c1e      	adds	r6, r3, #0
 8002214:	b2f3      	uxtb	r3, r6
 8002216:	2201      	movs	r2, #1
 8002218:	4053      	eors	r3, r2
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d009      	beq.n	8002234 <print_number+0xb8>
    length = sprintf((char *)number_buffer, "null");
 8002220:	4a48      	ldr	r2, [pc, #288]	; (8002344 <print_number+0x1c8>)
 8002222:	2314      	movs	r3, #20
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	0011      	movs	r1, r2
 8002228:	0018      	movs	r0, r3
 800222a:	f005 fded 	bl	8007e08 <siprintf>
 800222e:	0003      	movs	r3, r0
 8002230:	647b      	str	r3, [r7, #68]	; 0x44
 8002232:	e03b      	b.n	80022ac <print_number+0x130>
  } else if (d == (double)item->valueint) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff fd9b 	bl	8001d74 <__aeabi_i2d>
 800223e:	0002      	movs	r2, r0
 8002240:	000b      	movs	r3, r1
 8002242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002244:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002246:	f7fe f80d 	bl	8000264 <__aeabi_dcmpeq>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d00a      	beq.n	8002264 <print_number+0xe8>
    length = sprintf((char *)number_buffer, "%d", item->valueint);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	493d      	ldr	r1, [pc, #244]	; (8002348 <print_number+0x1cc>)
 8002254:	2314      	movs	r3, #20
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	0018      	movs	r0, r3
 800225a:	f005 fdd5 	bl	8007e08 <siprintf>
 800225e:	0003      	movs	r3, r0
 8002260:	647b      	str	r3, [r7, #68]	; 0x44
 8002262:	e023      	b.n	80022ac <print_number+0x130>
  } else {
    /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
    length = sprintf((char *)number_buffer, "%1.15g", d);
 8002264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002268:	4938      	ldr	r1, [pc, #224]	; (800234c <print_number+0x1d0>)
 800226a:	2414      	movs	r4, #20
 800226c:	1938      	adds	r0, r7, r4
 800226e:	f005 fdcb 	bl	8007e08 <siprintf>
 8002272:	0003      	movs	r3, r0
 8002274:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check whether the original double can be recovered */
    if ((sscanf((char *)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d)) {
 8002276:	2308      	movs	r3, #8
 8002278:	18fa      	adds	r2, r7, r3
 800227a:	4935      	ldr	r1, [pc, #212]	; (8002350 <print_number+0x1d4>)
 800227c:	193b      	adds	r3, r7, r4
 800227e:	0018      	movs	r0, r3
 8002280:	f005 fde2 	bl	8007e48 <siscanf>
 8002284:	0003      	movs	r3, r0
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <print_number+0x11e>
 800228a:	68b8      	ldr	r0, [r7, #8]
 800228c:	68f9      	ldr	r1, [r7, #12]
 800228e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002292:	f7ff ff25 	bl	80020e0 <compare_double>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d108      	bne.n	80022ac <print_number+0x130>
      /* If not, print with 17 decimal places of precision */
      length = sprintf((char *)number_buffer, "%1.17g", d);
 800229a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	492d      	ldr	r1, [pc, #180]	; (8002354 <print_number+0x1d8>)
 80022a0:	2014      	movs	r0, #20
 80022a2:	1838      	adds	r0, r7, r0
 80022a4:	f005 fdb0 	bl	8007e08 <siprintf>
 80022a8:	0003      	movs	r3, r0
 80022aa:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  /* sprintf failed or buffer overrun occurred */
  if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1))) {
 80022ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db02      	blt.n	80022b8 <print_number+0x13c>
 80022b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b4:	2b19      	cmp	r3, #25
 80022b6:	dd01      	ble.n	80022bc <print_number+0x140>
    return false;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e03c      	b.n	8002336 <print_number+0x1ba>
  }

  /* reserve appropriate space in the output */
  output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80022bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	0011      	movs	r1, r2
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff fe49 	bl	8001f5c <ensure>
 80022ca:	0003      	movs	r3, r0
 80022cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (output_pointer == NULL) {
 80022ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <print_number+0x15c>
    return false;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e02e      	b.n	8002336 <print_number+0x1ba>
  }

  /* copy the printed number to the output and replace locale
   * dependent decimal point with '.' */
  for (i = 0; i < ((size_t)length); i++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	643b      	str	r3, [r7, #64]	; 0x40
 80022dc:	e01b      	b.n	8002316 <print_number+0x19a>
    if (number_buffer[i] == decimal_point) {
 80022de:	2314      	movs	r3, #20
 80022e0:	18fa      	adds	r2, r7, r3
 80022e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e4:	18d3      	adds	r3, r2, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	222f      	movs	r2, #47	; 0x2f
 80022ea:	18ba      	adds	r2, r7, r2
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d105      	bne.n	80022fe <print_number+0x182>
      output_pointer[i] = '.';
 80022f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f6:	18d3      	adds	r3, r2, r3
 80022f8:	222e      	movs	r2, #46	; 0x2e
 80022fa:	701a      	strb	r2, [r3, #0]
      continue;
 80022fc:	e008      	b.n	8002310 <print_number+0x194>
    }

    output_pointer[i] = number_buffer[i];
 80022fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002302:	18d3      	adds	r3, r2, r3
 8002304:	2214      	movs	r2, #20
 8002306:	18b9      	adds	r1, r7, r2
 8002308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800230a:	188a      	adds	r2, r1, r2
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < ((size_t)length); i++) {
 8002310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002312:	3301      	adds	r3, #1
 8002314:	643b      	str	r3, [r7, #64]	; 0x40
 8002316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002318:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800231a:	429a      	cmp	r2, r3
 800231c:	d3df      	bcc.n	80022de <print_number+0x162>
  }
  output_pointer[i] = '\0';
 800231e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002322:	18d3      	adds	r3, r2, r3
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]

  output_buffer->offset += (size_t)length;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232e:	18d2      	adds	r2, r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	609a      	str	r2, [r3, #8]

  return true;
 8002334:	2301      	movs	r3, #1
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b013      	add	sp, #76	; 0x4c
 800233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	7fefffff 	.word	0x7fefffff
 8002344:	08009720 	.word	0x08009720
 8002348:	08009728 	.word	0x08009728
 800234c:	0800972c 	.word	0x0800972c
 8002350:	08009734 	.word	0x08009734
 8002354:	08009738 	.word	0x08009738

08002358 <print_string_ptr>:

  return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char *const input, printbuffer *const output_buffer) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  const unsigned char *input_pointer = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  unsigned char *output = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  unsigned char *output_pointer = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  size_t output_length = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  /* numbers of additional characters needed for escaping */
  size_t escape_characters = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]

  if (output_buffer == NULL) {
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <print_string_ptr+0x28>
    return false;
 800237c:	2300      	movs	r3, #0
 800237e:	e0e0      	b.n	8002542 <print_string_ptr+0x1ea>
  }

  /* empty string */
  if (input == NULL) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <print_string_ptr+0x5a>
    output = ensure(output_buffer, sizeof("\"\""));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2103      	movs	r1, #3
 800238a:	0018      	movs	r0, r3
 800238c:	f7ff fde6 	bl	8001f5c <ensure>
 8002390:	0003      	movs	r3, r0
 8002392:	613b      	str	r3, [r7, #16]
    if (output == NULL) {
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <print_string_ptr+0x46>
      return false;
 800239a:	2300      	movs	r3, #0
 800239c:	e0d1      	b.n	8002542 <print_string_ptr+0x1ea>
    }
    strcpy((char *)output, "\"\"");
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <print_string_ptr+0x1f4>)
 80023a2:	0010      	movs	r0, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	2303      	movs	r3, #3
 80023a8:	001a      	movs	r2, r3
 80023aa:	f005 ff14 	bl	80081d6 <memcpy>

    return true;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0c7      	b.n	8002542 <print_string_ptr+0x1ea>
  }

  /* set "flag" to 1 if something needs to be escaped */
  for (input_pointer = input; *input_pointer; input_pointer++) {
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e022      	b.n	80023fe <print_string_ptr+0xa6>
    switch (*input_pointer) {
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b22      	cmp	r3, #34	; 0x22
 80023be:	dc0d      	bgt.n	80023dc <print_string_ptr+0x84>
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	db11      	blt.n	80023e8 <print_string_ptr+0x90>
 80023c4:	3b08      	subs	r3, #8
 80023c6:	4a62      	ldr	r2, [pc, #392]	; (8002550 <print_string_ptr+0x1f8>)
 80023c8:	40da      	lsrs	r2, r3
 80023ca:	0013      	movs	r3, r2
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	1e5a      	subs	r2, r3, #1
 80023d2:	4193      	sbcs	r3, r2
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <print_string_ptr+0x88>
 80023da:	e005      	b.n	80023e8 <print_string_ptr+0x90>
 80023dc:	2b5c      	cmp	r3, #92	; 0x5c
 80023de:	d103      	bne.n	80023e8 <print_string_ptr+0x90>
    case '\f':
    case '\n':
    case '\r':
    case '\t':
      /* one character escape sequence */
      escape_characters++;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3301      	adds	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
      break;
 80023e6:	e007      	b.n	80023f8 <print_string_ptr+0xa0>
    default:
      if (*input_pointer < 32) {
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b1f      	cmp	r3, #31
 80023ee:	d802      	bhi.n	80023f6 <print_string_ptr+0x9e>
        /* UTF-16 escape sequence uXXXX */
        escape_characters += 5;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3305      	adds	r3, #5
 80023f4:	617b      	str	r3, [r7, #20]
      }
      break;
 80023f6:	46c0      	nop			; (mov r8, r8)
  for (input_pointer = input; *input_pointer; input_pointer++) {
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	3301      	adds	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1d8      	bne.n	80023b8 <print_string_ptr+0x60>
    }
  }
  output_length = (size_t)(input_pointer - input) + escape_characters;
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	001a      	movs	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	189b      	adds	r3, r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

  output = ensure(output_buffer, output_length + sizeof("\"\""));
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1cda      	adds	r2, r3, #3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	0011      	movs	r1, r2
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff fd9d 	bl	8001f5c <ensure>
 8002422:	0003      	movs	r3, r0
 8002424:	613b      	str	r3, [r7, #16]
  if (output == NULL) {
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <print_string_ptr+0xd8>
    return false;
 800242c:	2300      	movs	r3, #0
 800242e:	e088      	b.n	8002542 <print_string_ptr+0x1ea>
  }

  /* no characters have to be escaped */
  if (escape_characters == 0) {
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d117      	bne.n	8002466 <print_string_ptr+0x10e>
    output[0] = '\"';
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2222      	movs	r2, #34	; 0x22
 800243a:	701a      	strb	r2, [r3, #0]
    memcpy(output + 1, input, output_length);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	3301      	adds	r3, #1
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f005 fec6 	bl	80081d6 <memcpy>
    output[output_length + 1] = '\"';
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3301      	adds	r3, #1
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	18d3      	adds	r3, r2, r3
 8002452:	2222      	movs	r2, #34	; 0x22
 8002454:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3302      	adds	r3, #2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]

    return true;
 8002462:	2301      	movs	r3, #1
 8002464:	e06d      	b.n	8002542 <print_string_ptr+0x1ea>
  }

  output[0] = '\"';
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2222      	movs	r2, #34	; 0x22
 800246a:	701a      	strb	r2, [r3, #0]
  output_pointer = output + 1;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	3301      	adds	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
  /* copy the string */
  for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++) {
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	e053      	b.n	8002520 <print_string_ptr+0x1c8>
    if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\')) {
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b1f      	cmp	r3, #31
 800247e:	d90c      	bls.n	800249a <print_string_ptr+0x142>
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b22      	cmp	r3, #34	; 0x22
 8002486:	d008      	beq.n	800249a <print_string_ptr+0x142>
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b5c      	cmp	r3, #92	; 0x5c
 800248e:	d004      	beq.n	800249a <print_string_ptr+0x142>
      /* normal character, copy */
      *output_pointer = *input_pointer;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	e03c      	b.n	8002514 <print_string_ptr+0x1bc>
    } else {
      /* character needs to be escaped */
      *output_pointer++ = '\\';
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	61ba      	str	r2, [r7, #24]
 80024a0:	225c      	movs	r2, #92	; 0x5c
 80024a2:	701a      	strb	r2, [r3, #0]
      switch (*input_pointer) {
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b22      	cmp	r3, #34	; 0x22
 80024aa:	dc09      	bgt.n	80024c0 <print_string_ptr+0x168>
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	db25      	blt.n	80024fc <print_string_ptr+0x1a4>
 80024b0:	3b08      	subs	r3, #8
 80024b2:	2b1a      	cmp	r3, #26
 80024b4:	d822      	bhi.n	80024fc <print_string_ptr+0x1a4>
 80024b6:	009a      	lsls	r2, r3, #2
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <print_string_ptr+0x1fc>)
 80024ba:	18d3      	adds	r3, r2, r3
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	469f      	mov	pc, r3
 80024c0:	2b5c      	cmp	r3, #92	; 0x5c
 80024c2:	d11b      	bne.n	80024fc <print_string_ptr+0x1a4>
      case '\\':
        *output_pointer = '\\';
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	225c      	movs	r2, #92	; 0x5c
 80024c8:	701a      	strb	r2, [r3, #0]
        break;
 80024ca:	e023      	b.n	8002514 <print_string_ptr+0x1bc>
      case '\"':
        *output_pointer = '\"';
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2222      	movs	r2, #34	; 0x22
 80024d0:	701a      	strb	r2, [r3, #0]
        break;
 80024d2:	e01f      	b.n	8002514 <print_string_ptr+0x1bc>
      case '\b':
        *output_pointer = 'b';
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2262      	movs	r2, #98	; 0x62
 80024d8:	701a      	strb	r2, [r3, #0]
        break;
 80024da:	e01b      	b.n	8002514 <print_string_ptr+0x1bc>
      case '\f':
        *output_pointer = 'f';
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2266      	movs	r2, #102	; 0x66
 80024e0:	701a      	strb	r2, [r3, #0]
        break;
 80024e2:	e017      	b.n	8002514 <print_string_ptr+0x1bc>
      case '\n':
        *output_pointer = 'n';
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	226e      	movs	r2, #110	; 0x6e
 80024e8:	701a      	strb	r2, [r3, #0]
        break;
 80024ea:	e013      	b.n	8002514 <print_string_ptr+0x1bc>
      case '\r':
        *output_pointer = 'r';
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2272      	movs	r2, #114	; 0x72
 80024f0:	701a      	strb	r2, [r3, #0]
        break;
 80024f2:	e00f      	b.n	8002514 <print_string_ptr+0x1bc>
      case '\t':
        *output_pointer = 't';
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2274      	movs	r2, #116	; 0x74
 80024f8:	701a      	strb	r2, [r3, #0]
        break;
 80024fa:	e00b      	b.n	8002514 <print_string_ptr+0x1bc>
      default:
        /* escape and print as unicode codepoint */
        sprintf((char *)output_pointer, "u%04x", *input_pointer);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	001a      	movs	r2, r3
 8002502:	4915      	ldr	r1, [pc, #84]	; (8002558 <print_string_ptr+0x200>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	0018      	movs	r0, r3
 8002508:	f005 fc7e 	bl	8007e08 <siprintf>
        output_pointer += 4;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	3304      	adds	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
        break;
 8002512:	46c0      	nop			; (mov r8, r8)
  for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++) {
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3301      	adds	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	3301      	adds	r3, #1
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1a7      	bne.n	8002478 <print_string_ptr+0x120>
      }
    }
  }
  output[output_length + 1] = '\"';
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3301      	adds	r3, #1
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	18d3      	adds	r3, r2, r3
 8002530:	2222      	movs	r2, #34	; 0x22
 8002532:	701a      	strb	r2, [r3, #0]
  output[output_length + 2] = '\0';
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3302      	adds	r3, #2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	18d3      	adds	r3, r2, r3
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]

  return true;
 8002540:	2301      	movs	r3, #1
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b008      	add	sp, #32
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	08009740 	.word	0x08009740
 8002550:	04000037 	.word	0x04000037
 8002554:	0800a3c0 	.word	0x0800a3c0
 8002558:	08009744 	.word	0x08009744

0800255c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON *const item, printbuffer *const p) { return print_string_ptr((unsigned char *)item->valuestring, p); }
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f7ff fef2 	bl	8002358 <print_string_ptr>
 8002574:	0003      	movs	r3, r0
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b002      	add	sp, #8
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <print>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length) { return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0); }

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON *const item, cJSON_bool format, const internal_hooks *const hooks) {
 8002580:	b5b0      	push	{r4, r5, r7, lr}
 8002582:	b08e      	sub	sp, #56	; 0x38
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  static const size_t default_buffer_size = 256;
  printbuffer buffer[1];
  unsigned char *printed = NULL;
 800258c:	2300      	movs	r3, #0
 800258e:	637b      	str	r3, [r7, #52]	; 0x34

  memset(buffer, 0, sizeof(buffer));
 8002590:	2410      	movs	r4, #16
 8002592:	193b      	adds	r3, r7, r4
 8002594:	2224      	movs	r2, #36	; 0x24
 8002596:	2100      	movs	r1, #0
 8002598:	0018      	movs	r0, r3
 800259a:	f005 fd71 	bl	8008080 <memset>

  /* create buffer */
  buffer->buffer = (unsigned char *)hooks->allocate(default_buffer_size);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <print+0x140>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	0018      	movs	r0, r3
 80025a8:	4790      	blx	r2
 80025aa:	0002      	movs	r2, r0
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	601a      	str	r2, [r3, #0]
  buffer->length = default_buffer_size;
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <print+0x140>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	605a      	str	r2, [r3, #4]
  buffer->format = format;
 80025b8:	0025      	movs	r5, r4
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	615a      	str	r2, [r3, #20]
  buffer->hooks = *hooks;
 80025c0:	197b      	adds	r3, r7, r5
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	3318      	adds	r3, #24
 80025c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025c8:	c313      	stmia	r3!, {r0, r1, r4}
  if (buffer->buffer == NULL) {
 80025ca:	002c      	movs	r4, r5
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d050      	beq.n	8002676 <print+0xf6>
    goto fail;
  }

  /* print the value */
  if (!print_value(item, buffer)) {
 80025d4:	193a      	adds	r2, r7, r4
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	0011      	movs	r1, r2
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 f884 	bl	80026e8 <print_value>
 80025e0:	1e03      	subs	r3, r0, #0
 80025e2:	d04a      	beq.n	800267a <print+0xfa>
    goto fail;
  }
  update_offset(buffer);
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff fd58 	bl	800209c <update_offset>

  /* check if reallocate is available */
  if (hooks->reallocate != NULL) {
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d011      	beq.n	8002618 <print+0x98>
    printed = (unsigned char *)hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	193b      	adds	r3, r7, r4
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	193b      	adds	r3, r7, r4
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	3301      	adds	r3, #1
 8002602:	0019      	movs	r1, r3
 8002604:	4790      	blx	r2
 8002606:	0003      	movs	r3, r0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
    if (printed == NULL) {
 800260a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260c:	2b00      	cmp	r3, #0
 800260e:	d036      	beq.n	800267e <print+0xfe>
      goto fail;
    }
    buffer->buffer = NULL;
 8002610:	193b      	adds	r3, r7, r4
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e02c      	b.n	8002672 <print+0xf2>
  } else /* otherwise copy the JSON over to a new buffer */
  {
    printed = (unsigned char *)hooks->allocate(buffer->offset + 1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2410      	movs	r4, #16
 800261e:	193b      	adds	r3, r7, r4
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	3301      	adds	r3, #1
 8002624:	0018      	movs	r0, r3
 8002626:	4790      	blx	r2
 8002628:	0003      	movs	r3, r0
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
    if (printed == NULL) {
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	2b00      	cmp	r3, #0
 8002630:	d027      	beq.n	8002682 <print+0x102>
      goto fail;
    }
    memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8002632:	193b      	adds	r3, r7, r4
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	193b      	adds	r3, r7, r4
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	1c58      	adds	r0, r3, #1
 800263c:	193b      	adds	r3, r7, r4
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	0003      	movs	r3, r0
 8002642:	4293      	cmp	r3, r2
 8002644:	d900      	bls.n	8002648 <print+0xc8>
 8002646:	0013      	movs	r3, r2
 8002648:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800264a:	001a      	movs	r2, r3
 800264c:	f005 fdc3 	bl	80081d6 <memcpy>
    printed[buffer->offset] = '\0'; /* just to be sure */
 8002650:	2110      	movs	r1, #16
 8002652:	187b      	adds	r3, r7, r1
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]

    /* free the buffer */
    hooks->deallocate(buffer->buffer);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	000c      	movs	r4, r1
 8002664:	187b      	adds	r3, r7, r1
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0018      	movs	r0, r3
 800266a:	4790      	blx	r2
    buffer->buffer = NULL;
 800266c:	193b      	adds	r3, r7, r4
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
  }

  return printed;
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	e020      	b.n	80026b8 <print+0x138>
    goto fail;
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	e004      	b.n	8002684 <print+0x104>
    goto fail;
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	e002      	b.n	8002684 <print+0x104>
      goto fail;
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	e000      	b.n	8002684 <print+0x104>
      goto fail;
 8002682:	46c0      	nop			; (mov r8, r8)

fail:
  if (buffer->buffer != NULL) {
 8002684:	2110      	movs	r1, #16
 8002686:	187b      	adds	r3, r7, r1
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <print+0x122>
    hooks->deallocate(buffer->buffer);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	000c      	movs	r4, r1
 8002694:	187b      	adds	r3, r7, r1
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0018      	movs	r0, r3
 800269a:	4790      	blx	r2
    buffer->buffer = NULL;
 800269c:	193b      	adds	r3, r7, r4
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
  }

  if (printed != NULL) {
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d006      	beq.n	80026b6 <print+0x136>
    hooks->deallocate(printed);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ae:	0010      	movs	r0, r2
 80026b0:	4798      	blx	r3
    printed = NULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return NULL;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b00e      	add	sp, #56	; 0x38
 80026be:	bdb0      	pop	{r4, r5, r7, pc}
 80026c0:	0800a4b0 	.word	0x0800a4b0

080026c4 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item) { return (char *)print(item, true, &global_hooks); }
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <cJSON_Print+0x20>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2101      	movs	r1, #1
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7ff ff54 	bl	8002580 <print>
 80026d8:	0003      	movs	r3, r0
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b002      	add	sp, #8
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	20000000 	.word	0x20000000

080026e8 <print_value>:

  return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON *const item, printbuffer *const output_buffer) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  unsigned char *output = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]

  if ((item == NULL) || (output_buffer == NULL)) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <print_value+0x1a>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <print_value+0x1e>
    return false;
 8002702:	2300      	movs	r3, #0
 8002704:	e0a1      	b.n	800284a <print_value+0x162>
  }

  switch ((item->type) & 0xFF) {
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	22ff      	movs	r2, #255	; 0xff
 800270c:	4013      	ands	r3, r2
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d05c      	beq.n	80027cc <print_value+0xe4>
 8002712:	dd00      	ble.n	8002716 <print_value+0x2e>
 8002714:	e098      	b.n	8002848 <print_value+0x160>
 8002716:	2b20      	cmp	r3, #32
 8002718:	dc0a      	bgt.n	8002730 <print_value+0x48>
 800271a:	2b00      	cmp	r3, #0
 800271c:	dc00      	bgt.n	8002720 <print_value+0x38>
 800271e:	e093      	b.n	8002848 <print_value+0x160>
 8002720:	2b20      	cmp	r3, #32
 8002722:	d900      	bls.n	8002726 <print_value+0x3e>
 8002724:	e090      	b.n	8002848 <print_value+0x160>
 8002726:	009a      	lsls	r2, r3, #2
 8002728:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <print_value+0x16c>)
 800272a:	18d3      	adds	r3, r2, r3
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	469f      	mov	pc, r3
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d100      	bne.n	8002736 <print_value+0x4e>
 8002734:	e080      	b.n	8002838 <print_value+0x150>
 8002736:	e087      	b.n	8002848 <print_value+0x160>
  case cJSON_NULL:
    output = ensure(output_buffer, 5);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2105      	movs	r1, #5
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff fc0d 	bl	8001f5c <ensure>
 8002742:	0003      	movs	r3, r0
 8002744:	60fb      	str	r3, [r7, #12]
    if (output == NULL) {
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <print_value+0x68>
      return false;
 800274c:	2300      	movs	r3, #0
 800274e:	e07c      	b.n	800284a <print_value+0x162>
    }
    strcpy((char *)output, "null");
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <print_value+0x170>)
 8002754:	0010      	movs	r0, r2
 8002756:	0019      	movs	r1, r3
 8002758:	2305      	movs	r3, #5
 800275a:	001a      	movs	r2, r3
 800275c:	f005 fd3b 	bl	80081d6 <memcpy>
    return true;
 8002760:	2301      	movs	r3, #1
 8002762:	e072      	b.n	800284a <print_value+0x162>

  case cJSON_False:
    output = ensure(output_buffer, 6);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2106      	movs	r1, #6
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff fbf7 	bl	8001f5c <ensure>
 800276e:	0003      	movs	r3, r0
 8002770:	60fb      	str	r3, [r7, #12]
    if (output == NULL) {
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <print_value+0x94>
      return false;
 8002778:	2300      	movs	r3, #0
 800277a:	e066      	b.n	800284a <print_value+0x162>
    }
    strcpy((char *)output, "false");
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4b37      	ldr	r3, [pc, #220]	; (800285c <print_value+0x174>)
 8002780:	0010      	movs	r0, r2
 8002782:	0019      	movs	r1, r3
 8002784:	2306      	movs	r3, #6
 8002786:	001a      	movs	r2, r3
 8002788:	f005 fd25 	bl	80081d6 <memcpy>
    return true;
 800278c:	2301      	movs	r3, #1
 800278e:	e05c      	b.n	800284a <print_value+0x162>

  case cJSON_True:
    output = ensure(output_buffer, 5);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2105      	movs	r1, #5
 8002794:	0018      	movs	r0, r3
 8002796:	f7ff fbe1 	bl	8001f5c <ensure>
 800279a:	0003      	movs	r3, r0
 800279c:	60fb      	str	r3, [r7, #12]
    if (output == NULL) {
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <print_value+0xc0>
      return false;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e050      	b.n	800284a <print_value+0x162>
    }
    strcpy((char *)output, "true");
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <print_value+0x178>)
 80027ac:	0010      	movs	r0, r2
 80027ae:	0019      	movs	r1, r3
 80027b0:	2305      	movs	r3, #5
 80027b2:	001a      	movs	r2, r3
 80027b4:	f005 fd0f 	bl	80081d6 <memcpy>
    return true;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e046      	b.n	800284a <print_value+0x162>

  case cJSON_Number:
    return print_number(item, output_buffer);
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	0011      	movs	r1, r2
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7ff fcda 	bl	800217c <print_number>
 80027c8:	0003      	movs	r3, r0
 80027ca:	e03e      	b.n	800284a <print_value+0x162>

  case cJSON_Raw: {
    size_t raw_length = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
    if (item->valuestring == NULL) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <print_value+0xf4>
      return false;
 80027d8:	2300      	movs	r3, #0
 80027da:	e036      	b.n	800284a <print_value+0x162>
    }

    raw_length = strlen(item->valuestring) + sizeof("");
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7fd fc91 	bl	8000108 <strlen>
 80027e6:	0003      	movs	r3, r0
 80027e8:	3301      	adds	r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
    output = ensure(output_buffer, raw_length);
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fbb2 	bl	8001f5c <ensure>
 80027f8:	0003      	movs	r3, r0
 80027fa:	60fb      	str	r3, [r7, #12]
    if (output == NULL) {
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <print_value+0x11e>
      return false;
 8002802:	2300      	movs	r3, #0
 8002804:	e021      	b.n	800284a <print_value+0x162>
    }
    memcpy(output, item->valuestring, raw_length);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6919      	ldr	r1, [r3, #16]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	0018      	movs	r0, r3
 8002810:	f005 fce1 	bl	80081d6 <memcpy>
    return true;
 8002814:	2301      	movs	r3, #1
 8002816:	e018      	b.n	800284a <print_value+0x162>
  }

  case cJSON_String:
    return print_string(item, output_buffer);
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f7ff fe9c 	bl	800255c <print_string>
 8002824:	0003      	movs	r3, r0
 8002826:	e010      	b.n	800284a <print_value+0x162>

  case cJSON_Array:
    return print_array(item, output_buffer);
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0011      	movs	r1, r2
 800282e:	0018      	movs	r0, r3
 8002830:	f000 f818 	bl	8002864 <print_array>
 8002834:	0003      	movs	r3, r0
 8002836:	e008      	b.n	800284a <print_value+0x162>

  case cJSON_Object:
    return print_object(item, output_buffer);
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0011      	movs	r1, r2
 800283e:	0018      	movs	r0, r3
 8002840:	f000 f89e 	bl	8002980 <print_object>
 8002844:	0003      	movs	r3, r0
 8002846:	e000      	b.n	800284a <print_value+0x162>

  default:
    return false;
 8002848:	2300      	movs	r3, #0
  }
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	0800a42c 	.word	0x0800a42c
 8002858:	08009720 	.word	0x08009720
 800285c:	08009750 	.word	0x08009750
 8002860:	08009758 	.word	0x08009758

08002864 <print_array>:

  return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON *const item, printbuffer *const output_buffer) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  unsigned char *output_pointer = NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  size_t length = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
  cJSON *current_element = item->child;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	613b      	str	r3, [r7, #16]

  if (output_buffer == NULL) {
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <print_array+0x22>
    return false;
 8002882:	2300      	movs	r3, #0
 8002884:	e078      	b.n	8002978 <print_array+0x114>
  }

  /* Compose the output array. */
  /* opening square bracket */
  output_pointer = ensure(output_buffer, 1);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	0018      	movs	r0, r3
 800288c:	f7ff fb66 	bl	8001f5c <ensure>
 8002890:	0003      	movs	r3, r0
 8002892:	617b      	str	r3, [r7, #20]
  if (output_pointer == NULL) {
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <print_array+0x3a>
    return false;
 800289a:	2300      	movs	r3, #0
 800289c:	e06c      	b.n	8002978 <print_array+0x114>
  }

  *output_pointer = '[';
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	225b      	movs	r2, #91	; 0x5b
 80028a2:	701a      	strb	r2, [r3, #0]
  output_buffer->offset++;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	609a      	str	r2, [r3, #8]
  output_buffer->depth++;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	60da      	str	r2, [r3, #12]

  while (current_element != NULL) {
 80028b8:	e041      	b.n	800293e <print_array+0xda>
    if (!print_value(current_element, output_buffer)) {
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	0011      	movs	r1, r2
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7ff ff11 	bl	80026e8 <print_value>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d101      	bne.n	80028ce <print_array+0x6a>
      return false;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e054      	b.n	8002978 <print_array+0x114>
    }
    update_offset(output_buffer);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7ff fbe3 	bl	800209c <update_offset>
    if (current_element->next) {
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d02c      	beq.n	8002938 <print_array+0xd4>
      length = (size_t)(output_buffer->format ? 2 : 1);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <print_array+0x86>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e000      	b.n	80028ec <print_array+0x88>
 80028ea:	2301      	movs	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
      output_pointer = ensure(output_buffer, length + 1);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	0011      	movs	r1, r2
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7ff fb30 	bl	8001f5c <ensure>
 80028fc:	0003      	movs	r3, r0
 80028fe:	617b      	str	r3, [r7, #20]
      if (output_pointer == NULL) {
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <print_array+0xa6>
        return false;
 8002906:	2300      	movs	r3, #0
 8002908:	e036      	b.n	8002978 <print_array+0x114>
      }
      *output_pointer++ = ',';
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	617a      	str	r2, [r7, #20]
 8002910:	222c      	movs	r2, #44	; 0x2c
 8002912:	701a      	strb	r2, [r3, #0]
      if (output_buffer->format) {
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d004      	beq.n	8002926 <print_array+0xc2>
        *output_pointer++ = ' ';
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	617a      	str	r2, [r7, #20]
 8002922:	2220      	movs	r2, #32
 8002924:	701a      	strb	r2, [r3, #0]
      }
      *output_pointer = '\0';
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
      output_buffer->offset += length;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	18d2      	adds	r2, r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	609a      	str	r2, [r3, #8]
    }
    current_element = current_element->next;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	613b      	str	r3, [r7, #16]
  while (current_element != NULL) {
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ba      	bne.n	80028ba <print_array+0x56>
  }

  output_pointer = ensure(output_buffer, 2);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2102      	movs	r1, #2
 8002948:	0018      	movs	r0, r3
 800294a:	f7ff fb07 	bl	8001f5c <ensure>
 800294e:	0003      	movs	r3, r0
 8002950:	617b      	str	r3, [r7, #20]
  if (output_pointer == NULL) {
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <print_array+0xf8>
    return false;
 8002958:	2300      	movs	r3, #0
 800295a:	e00d      	b.n	8002978 <print_array+0x114>
  }
  *output_pointer++ = ']';
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	617a      	str	r2, [r7, #20]
 8002962:	225d      	movs	r2, #93	; 0x5d
 8002964:	701a      	strb	r2, [r3, #0]
  *output_pointer = '\0';
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
  output_buffer->depth--;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	60da      	str	r2, [r3, #12]

  return true;
 8002976:	2301      	movs	r3, #1
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b006      	add	sp, #24
 800297e:	bd80      	pop	{r7, pc}

08002980 <print_object>:

  return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON *const item, printbuffer *const output_buffer) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  unsigned char *output_pointer = NULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  size_t length = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
  cJSON *current_item = item->child;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]

  if (output_buffer == NULL) {
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <print_object+0x22>
    return false;
 800299e:	2300      	movs	r3, #0
 80029a0:	e116      	b.n	8002bd0 <print_object+0x250>
  }

  /* Compose the output: */
  length = (size_t)(output_buffer->format ? 2 : 1); /* fmt: {\n */
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <print_object+0x2e>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e000      	b.n	80029b0 <print_object+0x30>
 80029ae:	2301      	movs	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
  output_pointer = ensure(output_buffer, length + 1);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	0011      	movs	r1, r2
 80029ba:	0018      	movs	r0, r3
 80029bc:	f7ff face 	bl	8001f5c <ensure>
 80029c0:	0003      	movs	r3, r0
 80029c2:	61fb      	str	r3, [r7, #28]
  if (output_pointer == NULL) {
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <print_object+0x4e>
    return false;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e100      	b.n	8002bd0 <print_object+0x250>
  }

  *output_pointer++ = '{';
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	61fa      	str	r2, [r7, #28]
 80029d4:	227b      	movs	r2, #123	; 0x7b
 80029d6:	701a      	strb	r2, [r3, #0]
  output_buffer->depth++;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	60da      	str	r2, [r3, #12]
  if (output_buffer->format) {
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d004      	beq.n	80029f4 <print_object+0x74>
    *output_pointer++ = '\n';
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	61fa      	str	r2, [r7, #28]
 80029f0:	220a      	movs	r2, #10
 80029f2:	701a      	strb	r2, [r3, #0]
  }
  output_buffer->offset += length;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	18d2      	adds	r2, r2, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	609a      	str	r2, [r3, #8]

  while (current_item) {
 8002a00:	e0aa      	b.n	8002b58 <print_object+0x1d8>
    if (output_buffer->format) {
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d024      	beq.n	8002a54 <print_object+0xd4>
      size_t i;
      output_pointer = ensure(output_buffer, output_buffer->depth);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	0011      	movs	r1, r2
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7ff faa2 	bl	8001f5c <ensure>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	61fb      	str	r3, [r7, #28]
      if (output_pointer == NULL) {
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <print_object+0xa6>
        return false;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e0d4      	b.n	8002bd0 <print_object+0x250>
      }
      for (i = 0; i < output_buffer->depth; i++) {
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e007      	b.n	8002a3c <print_object+0xbc>
        *output_pointer++ = '\t';
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	61fa      	str	r2, [r7, #28]
 8002a32:	2209      	movs	r2, #9
 8002a34:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < output_buffer->depth; i++) {
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d3f2      	bcc.n	8002a2c <print_object+0xac>
      }
      output_buffer->offset += output_buffer->depth;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	18d2      	adds	r2, r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	609a      	str	r2, [r3, #8]
    }

    /* print key */
    if (!print_string_ptr((unsigned char *)current_item->string, output_buffer)) {
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff fc7b 	bl	8002358 <print_string_ptr>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d101      	bne.n	8002a6a <print_object+0xea>
      return false;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e0b2      	b.n	8002bd0 <print_object+0x250>
    }
    update_offset(output_buffer);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff fb15 	bl	800209c <update_offset>

    length = (size_t)(output_buffer->format ? 2 : 1);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <print_object+0xfe>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e000      	b.n	8002a80 <print_object+0x100>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length);
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	0011      	movs	r1, r2
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff fa67 	bl	8001f5c <ensure>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL) {
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <print_object+0x11c>
      return false;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e099      	b.n	8002bd0 <print_object+0x250>
    }
    *output_pointer++ = ':';
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	61fa      	str	r2, [r7, #28]
 8002aa2:	223a      	movs	r2, #58	; 0x3a
 8002aa4:	701a      	strb	r2, [r3, #0]
    if (output_buffer->format) {
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <print_object+0x138>
      *output_pointer++ = '\t';
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	61fa      	str	r2, [r7, #28]
 8002ab4:	2209      	movs	r2, #9
 8002ab6:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	18d2      	adds	r2, r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	609a      	str	r2, [r3, #8]

    /* print value */
    if (!print_value(current_item, output_buffer)) {
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	0011      	movs	r1, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f7ff fe0c 	bl	80026e8 <print_value>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d101      	bne.n	8002ad8 <print_object+0x158>
      return false;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e07b      	b.n	8002bd0 <print_object+0x250>
    }
    update_offset(output_buffer);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7ff fade 	bl	800209c <update_offset>

    /* print comma if not last */
    length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <print_object+0x16c>
 8002ae8:	2201      	movs	r2, #1
 8002aea:	e000      	b.n	8002aee <print_object+0x16e>
 8002aec:	2200      	movs	r2, #0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <print_object+0x17a>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <print_object+0x17c>
 8002afa:	2300      	movs	r3, #0
 8002afc:	18d3      	adds	r3, r2, r3
 8002afe:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	0011      	movs	r1, r2
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f7ff fa27 	bl	8001f5c <ensure>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL) {
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <print_object+0x19c>
      return false;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e059      	b.n	8002bd0 <print_object+0x250>
    }
    if (current_item->next) {
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <print_object+0x1ae>
      *output_pointer++ = ',';
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	61fa      	str	r2, [r7, #28]
 8002b2a:	222c      	movs	r2, #44	; 0x2c
 8002b2c:	701a      	strb	r2, [r3, #0]
    }

    if (output_buffer->format) {
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <print_object+0x1c0>
      *output_pointer++ = '\n';
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	61fa      	str	r2, [r7, #28]
 8002b3c:	220a      	movs	r2, #10
 8002b3e:	701a      	strb	r2, [r3, #0]
    }
    *output_pointer = '\0';
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
    output_buffer->offset += length;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	18d2      	adds	r2, r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	609a      	str	r2, [r3, #8]

    current_item = current_item->next;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	61bb      	str	r3, [r7, #24]
  while (current_item) {
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d000      	beq.n	8002b60 <print_object+0x1e0>
 8002b5e:	e750      	b.n	8002a02 <print_object+0x82>
  }

  output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <print_object+0x1f0>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	e000      	b.n	8002b72 <print_object+0x1f2>
 8002b70:	2302      	movs	r3, #2
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	0019      	movs	r1, r3
 8002b76:	0010      	movs	r0, r2
 8002b78:	f7ff f9f0 	bl	8001f5c <ensure>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	61fb      	str	r3, [r7, #28]
  if (output_pointer == NULL) {
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <print_object+0x20a>
    return false;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e022      	b.n	8002bd0 <print_object+0x250>
  }
  if (output_buffer->format) {
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <print_object+0x234>
    size_t i;
    for (i = 0; i < (output_buffer->depth - 1); i++) {
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	e007      	b.n	8002ba8 <print_object+0x228>
      *output_pointer++ = '\t';
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	61fa      	str	r2, [r7, #28]
 8002b9e:	2209      	movs	r2, #9
 8002ba0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (output_buffer->depth - 1); i++) {
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3f1      	bcc.n	8002b98 <print_object+0x218>
    }
  }
  *output_pointer++ = '}';
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	61fa      	str	r2, [r7, #28]
 8002bba:	227d      	movs	r2, #125	; 0x7d
 8002bbc:	701a      	strb	r2, [r3, #0]
  *output_pointer = '\0';
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
  output_buffer->depth--;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	60da      	str	r2, [r3, #12]

  return true;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b008      	add	sp, #32
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <suffix_object>:
CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON *const object, const char *const string) { return get_object_item(object, string, true); }

CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string) { return cJSON_GetObjectItem(object, string) ? 1 : 0; }

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  prev->next = item;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	601a      	str	r2, [r3, #0]
  item->prev = prev;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	605a      	str	r2, [r3, #4]
}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b002      	add	sp, #8
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <add_item_to_array>:
  reference->type |= cJSON_IsReference;
  reference->next = reference->prev = NULL;
  return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item) {
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  cJSON *child = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]

  if ((item == NULL) || (array == NULL) || (array == item)) {
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <add_item_to_array+0x22>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <add_item_to_array+0x22>
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d101      	bne.n	8002c1c <add_item_to_array+0x26>
    return false;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e01f      	b.n	8002c5c <add_item_to_array+0x66>
  }

  child = array->child;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	60fb      	str	r3, [r7, #12]
  /*
   * To find the last item in array quickly, we use prev in array
   */
  if (child == NULL) {
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <add_item_to_array+0x46>
    /* list is empty, start new one */
    array->child = item;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	609a      	str	r2, [r3, #8]
    item->prev = item;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
    item->next = NULL;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e00e      	b.n	8002c5a <add_item_to_array+0x64>
  } else {
    /* append to the end */
    if (child->prev) {
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <add_item_to_array+0x64>
      suffix_object(child->prev, item);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff ffc3 	bl	8002bd8 <suffix_object>
      array->child->prev = item;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	605a      	str	r2, [r3, #4]
    }
  }

  return true;
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b004      	add	sp, #16
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <cast_away_const>:
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void *cast_away_const(const void *string) { return (void *)string; }
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <add_item_to_object>:
#if defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
#pragma GCC diagnostic pop
#endif

static cJSON_bool add_item_to_object(cJSON *const object, const char *const string, cJSON *const item, const internal_hooks *const hooks, const cJSON_bool constant_key) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  char *new_key = NULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  int new_type = cJSON_Invalid;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]

  if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item)) {
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <add_item_to_object+0x30>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <add_item_to_object+0x30>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <add_item_to_object+0x30>
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d101      	bne.n	8002cac <add_item_to_object+0x34>
    return false;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e03e      	b.n	8002d2a <add_item_to_object+0xb2>
  }

  if (constant_key) {
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <add_item_to_object+0x54>
    new_key = (char *)cast_away_const(string);
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff ffd5 	bl	8002c64 <cast_away_const>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	617b      	str	r3, [r7, #20]
    new_type = item->type | cJSON_StringIsConst;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	0092      	lsls	r2, r2, #2
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e011      	b.n	8002cf0 <add_item_to_object+0x78>
  } else {
    new_key = (char *)cJSON_strdup((const unsigned char *)string, hooks);
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	0011      	movs	r1, r2
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff f8a8 	bl	8001e28 <cJSON_strdup>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	617b      	str	r3, [r7, #20]
    if (new_key == NULL) {
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <add_item_to_object+0x6e>
      return false;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e021      	b.n	8002d2a <add_item_to_object+0xb2>
    }

    new_type = item->type & ~cJSON_StringIsConst;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <add_item_to_object+0xbc>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
  }

  if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d109      	bne.n	8002d10 <add_item_to_object+0x98>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <add_item_to_object+0x98>
    hooks->deallocate(item->string);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	4790      	blx	r2
  }

  item->string = new_key;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
  item->type = new_type;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	60da      	str	r2, [r3, #12]

  return add_item_to_array(object, item);
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	0011      	movs	r1, r2
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7ff ff67 	bl	8002bf6 <add_item_to_array>
 8002d28:	0003      	movs	r3, r0
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b006      	add	sp, #24
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	fffffdff 	.word	0xfffffdff

08002d38 <cJSON_AddNumberToObject>:

  cJSON_Delete(bool_item);
  return NULL;
}

CJSON_PUBLIC(cJSON *) cJSON_AddNumberToObject(cJSON *const object, const char *const name, const double number) {
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603a      	str	r2, [r7, #0]
 8002d44:	607b      	str	r3, [r7, #4]
  cJSON *number_item = cJSON_CreateNumber(number);
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	f000 f819 	bl	8002d84 <cJSON_CreateNumber>
 8002d52:	0003      	movs	r3, r0
 8002d54:	617b      	str	r3, [r7, #20]
  if (add_item_to_object(object, name, number_item, &global_hooks, false)) {
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <cJSON_AddNumberToObject+0x48>)
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	2400      	movs	r4, #0
 8002d60:	9400      	str	r4, [sp, #0]
 8002d62:	f7ff ff89 	bl	8002c78 <add_item_to_object>
 8002d66:	1e03      	subs	r3, r0, #0
 8002d68:	d001      	beq.n	8002d6e <cJSON_AddNumberToObject+0x36>
    return number_item;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	e004      	b.n	8002d78 <cJSON_AddNumberToObject+0x40>
  }

  cJSON_Delete(number_item);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7ff f89d 	bl	8001eb0 <cJSON_Delete>
  return NULL;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b007      	add	sp, #28
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	20000000 	.word	0x20000000

08002d84 <cJSON_CreateNumber>:
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6038      	str	r0, [r7, #0]
 8002d8c:	6079      	str	r1, [r7, #4]
  cJSON *item = cJSON_New_Item(&global_hooks);
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <cJSON_CreateNumber+0x78>)
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff f875 	bl	8001e80 <cJSON_New_Item>
 8002d96:	0003      	movs	r3, r0
 8002d98:	60fb      	str	r3, [r7, #12]
  if (item) {
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d027      	beq.n	8002df0 <cJSON_CreateNumber+0x6c>
    item->type = cJSON_Number;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2208      	movs	r2, #8
 8002da4:	60da      	str	r2, [r3, #12]
    item->valuedouble = num;
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	618a      	str	r2, [r1, #24]
 8002dae:	61cb      	str	r3, [r1, #28]

    /* use saturation in case of overflow */
    if (num >= INT_MAX) {
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <cJSON_CreateNumber+0x7c>)
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <cJSON_CreateNumber+0x80>)
 8002db4:	6838      	ldr	r0, [r7, #0]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	f7fd fa78 	bl	80002ac <__aeabi_dcmpge>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d003      	beq.n	8002dc8 <cJSON_CreateNumber+0x44>
      item->valueint = INT_MAX;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <cJSON_CreateNumber+0x84>)
 8002dc4:	615a      	str	r2, [r3, #20]
 8002dc6:	e013      	b.n	8002df0 <cJSON_CreateNumber+0x6c>
    } else if (num <= (double)INT_MIN) {
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <cJSON_CreateNumber+0x88>)
 8002dcc:	6838      	ldr	r0, [r7, #0]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	f7fd fa58 	bl	8000284 <__aeabi_dcmple>
 8002dd4:	1e03      	subs	r3, r0, #0
 8002dd6:	d004      	beq.n	8002de2 <cJSON_CreateNumber+0x5e>
      item->valueint = INT_MIN;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	0612      	lsls	r2, r2, #24
 8002dde:	615a      	str	r2, [r3, #20]
 8002de0:	e006      	b.n	8002df0 <cJSON_CreateNumber+0x6c>
    } else {
      item->valueint = (int)num;
 8002de2:	6838      	ldr	r0, [r7, #0]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	f7fe ff8f 	bl	8001d08 <__aeabi_d2iz>
 8002dea:	0002      	movs	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	615a      	str	r2, [r3, #20]
    }
  }

  return item;
 8002df0:	68fb      	ldr	r3, [r7, #12]
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b004      	add	sp, #16
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	ffc00000 	.word	0xffc00000
 8002e04:	41dfffff 	.word	0x41dfffff
 8002e08:	7fffffff 	.word	0x7fffffff
 8002e0c:	c1e00000 	.word	0xc1e00000

08002e10 <cJSON_CreateObject>:
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
  cJSON *item = cJSON_New_Item(&global_hooks);
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <cJSON_CreateObject+0x28>)
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff f831 	bl	8001e80 <cJSON_New_Item>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	607b      	str	r3, [r7, #4]
  if (item) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <cJSON_CreateObject+0x1e>
    item->type = cJSON_Object;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2240      	movs	r2, #64	; 0x40
 8002e2c:	60da      	str	r2, [r3, #12]
  }

  return item;
 8002e2e:	687b      	ldr	r3, [r7, #4]
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000000 	.word	0x20000000

08002e3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e40:	f3bf 8f4f 	dsb	sy
}
 8002e44:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <__NVIC_SystemReset+0x1c>)
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <__NVIC_SystemReset+0x20>)
 8002e4a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e4c:	f3bf 8f4f 	dsb	sy
}
 8002e50:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	e7fd      	b.n	8002e52 <__NVIC_SystemReset+0x16>
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	e000ed00 	.word	0xe000ed00
 8002e5c:	05fa0004 	.word	0x05fa0004

08002e60 <read_signal_quality>:
bool AT_Stop_MQTT = false;
bool inital_check = false;
uint16_t count_errors = 0;
int timeout_pb_done = 40000;

int read_signal_quality(void) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  sendingToSimcomA76xx("AT+CSQ\r\n");
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <read_signal_quality+0x9c>)
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 fe4a 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002e6c:	20c8      	movs	r0, #200	; 0xc8
 8002e6e:	f001 fccb 	bl	8004808 <HAL_Delay>
  SignalStrength = (rx_data_sim[8] - 48) * 10 + (rx_data_sim[9] - 48);
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <read_signal_quality+0xa0>)
 8002e74:	7a1b      	ldrb	r3, [r3, #8]
 8002e76:	3b30      	subs	r3, #48	; 0x30
 8002e78:	001a      	movs	r2, r3
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	189b      	adds	r3, r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	001a      	movs	r2, r3
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <read_signal_quality+0xa0>)
 8002e86:	7a5b      	ldrb	r3, [r3, #9]
 8002e88:	3b30      	subs	r3, #48	; 0x30
 8002e8a:	18d3      	adds	r3, r2, r3
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7fd ff7b 	bl	8000d88 <__aeabi_i2f>
 8002e92:	1c02      	adds	r2, r0, #0
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <read_signal_quality+0xa4>)
 8002e96:	601a      	str	r2, [r3, #0]
  if (SignalStrength >= 31) {
 8002e98:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <read_signal_quality+0xa4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	491a      	ldr	r1, [pc, #104]	; (8002f08 <read_signal_quality+0xa8>)
 8002e9e:	1c18      	adds	r0, r3, #0
 8002ea0:	f7fd fa3e 	bl	8000320 <__aeabi_fcmpge>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d004      	beq.n	8002eb2 <read_signal_quality+0x52>
    rssi = -51;
 8002ea8:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <read_signal_quality+0xac>)
 8002eaa:	2233      	movs	r2, #51	; 0x33
 8002eac:	4252      	negs	r2, r2
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e01e      	b.n	8002ef0 <read_signal_quality+0x90>
  } else if(SignalStrength <=0)
 8002eb2:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <read_signal_quality+0xa4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	1c18      	adds	r0, r3, #0
 8002eba:	f7fd fa1d 	bl	80002f8 <__aeabi_fcmple>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d004      	beq.n	8002ecc <read_signal_quality+0x6c>
  {
	rssi = -113;
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <read_signal_quality+0xac>)
 8002ec4:	2271      	movs	r2, #113	; 0x71
 8002ec6:	4252      	negs	r2, r2
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e011      	b.n	8002ef0 <read_signal_quality+0x90>
  }else
	  rssi = (SignalStrength * 2 - 113);
 8002ecc:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <read_signal_quality+0xa4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1c19      	adds	r1, r3, #0
 8002ed2:	1c18      	adds	r0, r3, #0
 8002ed4:	f7fd fb48 	bl	8000568 <__aeabi_fadd>
 8002ed8:	1c03      	adds	r3, r0, #0
 8002eda:	490d      	ldr	r1, [pc, #52]	; (8002f10 <read_signal_quality+0xb0>)
 8002edc:	1c18      	adds	r0, r3, #0
 8002ede:	f7fd fd93 	bl	8000a08 <__aeabi_fsub>
 8002ee2:	1c03      	adds	r3, r0, #0
 8002ee4:	1c18      	adds	r0, r3, #0
 8002ee6:	f7fd ff2f 	bl	8000d48 <__aeabi_f2iz>
 8002eea:	0002      	movs	r2, r0
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <read_signal_quality+0xac>)
 8002eee:	601a      	str	r2, [r3, #0]


  return rssi;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <read_signal_quality+0xac>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	08009760 	.word	0x08009760
 8002f00:	20000380 	.word	0x20000380
 8002f04:	200002d4 	.word	0x200002d4
 8002f08:	41f80000 	.word	0x41f80000
 8002f0c:	20000060 	.word	0x20000060
 8002f10:	42e20000 	.word	0x42e20000

08002f14 <fn_check_signal_simcom>:
float fn_check_signal_simcom(void) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  printf("-----------------fn_check_signal_simcom------------------\n");
 8002f18:	4b58      	ldr	r3, [pc, #352]	; (800307c <fn_check_signal_simcom+0x168>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f004 ff6a 	bl	8007df4 <puts>
  sendingToSimcomA76xx("ATE0\r\n");
 8002f20:	4b57      	ldr	r3, [pc, #348]	; (8003080 <fn_check_signal_simcom+0x16c>)
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 fdec 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002f28:	20c8      	movs	r0, #200	; 0xc8
 8002f2a:	f001 fc6d 	bl	8004808 <HAL_Delay>
  sendingToSimcomA76xx("AT+CSQ\r\n");
 8002f2e:	4b55      	ldr	r3, [pc, #340]	; (8003084 <fn_check_signal_simcom+0x170>)
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 fde5 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002f36:	20c8      	movs	r0, #200	; 0xc8
 8002f38:	f001 fc66 	bl	8004808 <HAL_Delay>
  SignalStrength = (rx_data_sim[8] - 48) * 10 + (rx_data_sim[9] - 48);
 8002f3c:	4b52      	ldr	r3, [pc, #328]	; (8003088 <fn_check_signal_simcom+0x174>)
 8002f3e:	7a1b      	ldrb	r3, [r3, #8]
 8002f40:	3b30      	subs	r3, #48	; 0x30
 8002f42:	001a      	movs	r2, r3
 8002f44:	0013      	movs	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	189b      	adds	r3, r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	4b4e      	ldr	r3, [pc, #312]	; (8003088 <fn_check_signal_simcom+0x174>)
 8002f50:	7a5b      	ldrb	r3, [r3, #9]
 8002f52:	3b30      	subs	r3, #48	; 0x30
 8002f54:	18d3      	adds	r3, r2, r3
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd ff16 	bl	8000d88 <__aeabi_i2f>
 8002f5c:	1c02      	adds	r2, r0, #0
 8002f5e:	4b4b      	ldr	r3, [pc, #300]	; (800308c <fn_check_signal_simcom+0x178>)
 8002f60:	601a      	str	r2, [r3, #0]
  if (SignalStrength >= 31) {
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <fn_check_signal_simcom+0x178>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	494a      	ldr	r1, [pc, #296]	; (8003090 <fn_check_signal_simcom+0x17c>)
 8002f68:	1c18      	adds	r0, r3, #0
 8002f6a:	f7fd f9d9 	bl	8000320 <__aeabi_fcmpge>
 8002f6e:	1e03      	subs	r3, r0, #0
 8002f70:	d004      	beq.n	8002f7c <fn_check_signal_simcom+0x68>
    rssi = -51;
 8002f72:	4b48      	ldr	r3, [pc, #288]	; (8003094 <fn_check_signal_simcom+0x180>)
 8002f74:	2233      	movs	r2, #51	; 0x33
 8002f76:	4252      	negs	r2, r2
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e011      	b.n	8002fa0 <fn_check_signal_simcom+0x8c>
  } else
    rssi = (SignalStrength * 2 - 113);
 8002f7c:	4b43      	ldr	r3, [pc, #268]	; (800308c <fn_check_signal_simcom+0x178>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	1c19      	adds	r1, r3, #0
 8002f82:	1c18      	adds	r0, r3, #0
 8002f84:	f7fd faf0 	bl	8000568 <__aeabi_fadd>
 8002f88:	1c03      	adds	r3, r0, #0
 8002f8a:	4943      	ldr	r1, [pc, #268]	; (8003098 <fn_check_signal_simcom+0x184>)
 8002f8c:	1c18      	adds	r0, r3, #0
 8002f8e:	f7fd fd3b 	bl	8000a08 <__aeabi_fsub>
 8002f92:	1c03      	adds	r3, r0, #0
 8002f94:	1c18      	adds	r0, r3, #0
 8002f96:	f7fd fed7 	bl	8000d48 <__aeabi_f2iz>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <fn_check_signal_simcom+0x180>)
 8002f9e:	601a      	str	r2, [r3, #0]
  isConnectSimcomA76xx = 1;
 8002fa0:	4b3e      	ldr	r3, [pc, #248]	; (800309c <fn_check_signal_simcom+0x188>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
  HAL_Delay(200);
 8002fa6:	20c8      	movs	r0, #200	; 0xc8
 8002fa8:	f001 fc2e 	bl	8004808 <HAL_Delay>
  sendingToSimcomA76xx("AT+CPIN?\r\n");
 8002fac:	4b3c      	ldr	r3, [pc, #240]	; (80030a0 <fn_check_signal_simcom+0x18c>)
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fda6 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002fb4:	20c8      	movs	r0, #200	; 0xc8
 8002fb6:	f001 fc27 	bl	8004808 <HAL_Delay>
  if (strstr((char *)rx_data_sim, "+CPIN: READY")) {
 8002fba:	4a3a      	ldr	r2, [pc, #232]	; (80030a4 <fn_check_signal_simcom+0x190>)
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <fn_check_signal_simcom+0x174>)
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f005 f865 	bl	8008090 <strstr>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d016      	beq.n	8002ff8 <fn_check_signal_simcom+0xe4>
    printf("-----------------SIM OK !------------------\n");
 8002fca:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <fn_check_signal_simcom+0x194>)
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f004 ff11 	bl	8007df4 <puts>
  } else
    return 0;
//  sendingToSimcomA76xx("AT+CREG=2\r\n");
//  HAL_Delay(5000);
  HAL_Delay(200);
 8002fd2:	20c8      	movs	r0, #200	; 0xc8
 8002fd4:	f001 fc18 	bl	8004808 <HAL_Delay>
  sendingToSimcomA76xx("AT+CREG?\r\n");
 8002fd8:	4b34      	ldr	r3, [pc, #208]	; (80030ac <fn_check_signal_simcom+0x198>)
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fd90 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002fe0:	20c8      	movs	r0, #200	; 0xc8
 8002fe2:	f001 fc11 	bl	8004808 <HAL_Delay>
  if (strstr((char *)rx_data_sim, "+CREG: 0,1") || strstr((char *)rx_data_sim, "+CREG: 0,6") || strstr((char *)rx_data_sim, "+CREG: 2,6")) {
 8002fe6:	4a32      	ldr	r2, [pc, #200]	; (80030b0 <fn_check_signal_simcom+0x19c>)
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <fn_check_signal_simcom+0x174>)
 8002fea:	0011      	movs	r1, r2
 8002fec:	0018      	movs	r0, r3
 8002fee:	f005 f84f 	bl	8008090 <strstr>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d112      	bne.n	800301c <fn_check_signal_simcom+0x108>
 8002ff6:	e001      	b.n	8002ffc <fn_check_signal_simcom+0xe8>
    return 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e03b      	b.n	8003074 <fn_check_signal_simcom+0x160>
  if (strstr((char *)rx_data_sim, "+CREG: 0,1") || strstr((char *)rx_data_sim, "+CREG: 0,6") || strstr((char *)rx_data_sim, "+CREG: 2,6")) {
 8002ffc:	4a2d      	ldr	r2, [pc, #180]	; (80030b4 <fn_check_signal_simcom+0x1a0>)
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <fn_check_signal_simcom+0x174>)
 8003000:	0011      	movs	r1, r2
 8003002:	0018      	movs	r0, r3
 8003004:	f005 f844 	bl	8008090 <strstr>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d107      	bne.n	800301c <fn_check_signal_simcom+0x108>
 800300c:	4a2a      	ldr	r2, [pc, #168]	; (80030b8 <fn_check_signal_simcom+0x1a4>)
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <fn_check_signal_simcom+0x174>)
 8003010:	0011      	movs	r1, r2
 8003012:	0018      	movs	r0, r3
 8003014:	f005 f83c 	bl	8008090 <strstr>
 8003018:	1e03      	subs	r3, r0, #0
 800301a:	d021      	beq.n	8003060 <fn_check_signal_simcom+0x14c>
    printf("-----------------Network registration OK!------------------\n");
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <fn_check_signal_simcom+0x1a8>)
 800301e:	0018      	movs	r0, r3
 8003020:	f004 fee8 	bl	8007df4 <puts>
  } else
    return 0;

  sendingToSimcomA76xx("ATI\r\n");
 8003024:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <fn_check_signal_simcom+0x1ac>)
 8003026:	0018      	movs	r0, r3
 8003028:	f000 fd6a 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 800302c:	20c8      	movs	r0, #200	; 0xc8
 800302e:	f001 fbeb 	bl	8004808 <HAL_Delay>
  sendingToSimcomA76xx("AT+CICCID\r\n");
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <fn_check_signal_simcom+0x1b0>)
 8003034:	0018      	movs	r0, r3
 8003036:	f000 fd63 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 800303a:	20c8      	movs	r0, #200	; 0xc8
 800303c:	f001 fbe4 	bl	8004808 <HAL_Delay>
  sendingToSimcomA76xx("AT+CGREG?\r\n");
 8003040:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <fn_check_signal_simcom+0x1b4>)
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fd5c 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8003048:	20c8      	movs	r0, #200	; 0xc8
 800304a:	f001 fbdd 	bl	8004808 <HAL_Delay>

  if (strstr((char *)rx_data_sim, "+CGREG: 0,1")) {
 800304e:	4a1f      	ldr	r2, [pc, #124]	; (80030cc <fn_check_signal_simcom+0x1b8>)
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <fn_check_signal_simcom+0x174>)
 8003052:	0011      	movs	r1, r2
 8003054:	0018      	movs	r0, r3
 8003056:	f005 f81b 	bl	8008090 <strstr>
 800305a:	1e03      	subs	r3, r0, #0
 800305c:	d102      	bne.n	8003064 <fn_check_signal_simcom+0x150>
 800305e:	e008      	b.n	8003072 <fn_check_signal_simcom+0x15e>
    return 0;
 8003060:	2300      	movs	r3, #0
 8003062:	e007      	b.n	8003074 <fn_check_signal_simcom+0x160>
    printf("-----------------Network registration OK!------------------\n");
 8003064:	4b15      	ldr	r3, [pc, #84]	; (80030bc <fn_check_signal_simcom+0x1a8>)
 8003066:	0018      	movs	r0, r3
 8003068:	f004 fec4 	bl	8007df4 <puts>
  } else
    return 0;
  return 1;
 800306c:	23fe      	movs	r3, #254	; 0xfe
 800306e:	059b      	lsls	r3, r3, #22
 8003070:	e000      	b.n	8003074 <fn_check_signal_simcom+0x160>
    return 0;
 8003072:	2300      	movs	r3, #0
}
 8003074:	1c18      	adds	r0, r3, #0
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	0800976c 	.word	0x0800976c
 8003080:	080097a8 	.word	0x080097a8
 8003084:	08009760 	.word	0x08009760
 8003088:	20000380 	.word	0x20000380
 800308c:	200002d4 	.word	0x200002d4
 8003090:	41f80000 	.word	0x41f80000
 8003094:	20000060 	.word	0x20000060
 8003098:	42e20000 	.word	0x42e20000
 800309c:	2000041c 	.word	0x2000041c
 80030a0:	080097b0 	.word	0x080097b0
 80030a4:	080097bc 	.word	0x080097bc
 80030a8:	080097cc 	.word	0x080097cc
 80030ac:	080097f8 	.word	0x080097f8
 80030b0:	08009804 	.word	0x08009804
 80030b4:	08009810 	.word	0x08009810
 80030b8:	0800981c 	.word	0x0800981c
 80030bc:	08009828 	.word	0x08009828
 80030c0:	08009864 	.word	0x08009864
 80030c4:	0800986c 	.word	0x0800986c
 80030c8:	08009878 	.word	0x08009878
 80030cc:	08009884 	.word	0x08009884

080030d0 <enable_mqtt_on_gsm_modem>:
int enable_mqtt_on_gsm_modem(void) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  sendingToSimcomA76xx("AT+CMQTTSTART\r\n");
 80030d4:	4b13      	ldr	r3, [pc, #76]	; (8003124 <enable_mqtt_on_gsm_modem+0x54>)
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fd12 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(400);
 80030dc:	23c8      	movs	r3, #200	; 0xc8
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	0018      	movs	r0, r3
 80030e2:	f001 fb91 	bl	8004808 <HAL_Delay>
  if ((strstr((char *)rx_data_sim, "+CMQTTSTART: 0") != NULL) || (strstr((char *)rx_data_sim, "ERROR") != NULL)) {
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <enable_mqtt_on_gsm_modem+0x58>)
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <enable_mqtt_on_gsm_modem+0x5c>)
 80030ea:	0011      	movs	r1, r2
 80030ec:	0018      	movs	r0, r3
 80030ee:	f004 ffcf 	bl	8008090 <strstr>
 80030f2:	1e03      	subs	r3, r0, #0
 80030f4:	d107      	bne.n	8003106 <enable_mqtt_on_gsm_modem+0x36>
 80030f6:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <enable_mqtt_on_gsm_modem+0x60>)
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <enable_mqtt_on_gsm_modem+0x5c>)
 80030fa:	0011      	movs	r1, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	f004 ffc7 	bl	8008090 <strstr>
 8003102:	1e03      	subs	r3, r0, #0
 8003104:	d005      	beq.n	8003112 <enable_mqtt_on_gsm_modem+0x42>
    printf("-----------------Service have started "
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <enable_mqtt_on_gsm_modem+0x64>)
 8003108:	0018      	movs	r0, r3
 800310a:	f004 fe73 	bl	8007df4 <puts>
           "successfully------------------\n");
    return 1;
 800310e:	2301      	movs	r3, #1
 8003110:	e004      	b.n	800311c <enable_mqtt_on_gsm_modem+0x4c>
  } else {
    printf("----------------- Start MQTT service fail------------------\n");
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <enable_mqtt_on_gsm_modem+0x68>)
 8003114:	0018      	movs	r0, r3
 8003116:	f004 fe6d 	bl	8007df4 <puts>
    return 0;
 800311a:	2300      	movs	r3, #0
  }
  return 0;
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	08009890 	.word	0x08009890
 8003128:	080098a0 	.word	0x080098a0
 800312c:	20000380 	.word	0x20000380
 8003130:	080098b0 	.word	0x080098b0
 8003134:	080098b8 	.word	0x080098b8
 8003138:	08009900 	.word	0x08009900

0800313c <acquire_gsm_mqtt_client>:
int acquire_gsm_mqtt_client(void) {
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  printf("-----------------acquire_gsm_mqtt_client------------------\n");
 8003140:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <acquire_gsm_mqtt_client+0xc0>)
 8003142:	0018      	movs	r0, r3
 8003144:	f004 fe56 	bl	8007df4 <puts>
  sprintf(AT_COMMAND, "+CMQTTACCQ: 0,\"%s\",0\r\n", MQTT_CLIENT_ID);
 8003148:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <acquire_gsm_mqtt_client+0xc4>)
 800314a:	492e      	ldr	r1, [pc, #184]	; (8003204 <acquire_gsm_mqtt_client+0xc8>)
 800314c:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <acquire_gsm_mqtt_client+0xcc>)
 800314e:	0018      	movs	r0, r3
 8003150:	f004 fe5a 	bl	8007e08 <siprintf>
  sendingToSimcomA76xx("AT+CMQTTACCQ?\r\n");
 8003154:	4b2d      	ldr	r3, [pc, #180]	; (800320c <acquire_gsm_mqtt_client+0xd0>)
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fcd2 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(400);
 800315c:	23c8      	movs	r3, #200	; 0xc8
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	0018      	movs	r0, r3
 8003162:	f001 fb51 	bl	8004808 <HAL_Delay>
  if (strstr((char *)rx_data_sim, AT_COMMAND) != NULL) {
 8003166:	4a28      	ldr	r2, [pc, #160]	; (8003208 <acquire_gsm_mqtt_client+0xcc>)
 8003168:	4b29      	ldr	r3, [pc, #164]	; (8003210 <acquire_gsm_mqtt_client+0xd4>)
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f004 ff8f 	bl	8008090 <strstr>
 8003172:	1e03      	subs	r3, r0, #0
 8003174:	d005      	beq.n	8003182 <acquire_gsm_mqtt_client+0x46>
    printf("-----------------Had acquired------------------\n");
 8003176:	4b27      	ldr	r3, [pc, #156]	; (8003214 <acquire_gsm_mqtt_client+0xd8>)
 8003178:	0018      	movs	r0, r3
 800317a:	f004 fe3b 	bl	8007df4 <puts>
    return 1;
 800317e:	2301      	movs	r3, #1
 8003180:	e039      	b.n	80031f6 <acquire_gsm_mqtt_client+0xba>
  } else {
    printf("-----------------Haven't got acquier yet------------------\n");
 8003182:	4b25      	ldr	r3, [pc, #148]	; (8003218 <acquire_gsm_mqtt_client+0xdc>)
 8003184:	0018      	movs	r0, r3
 8003186:	f004 fe35 	bl	8007df4 <puts>
    AT_Acquier_MQTT = false;
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <acquire_gsm_mqtt_client+0xe0>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
  }
  if (AT_Acquier_MQTT == false) {
 8003190:	4b22      	ldr	r3, [pc, #136]	; (800321c <acquire_gsm_mqtt_client+0xe0>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2201      	movs	r2, #1
 8003196:	4053      	eors	r3, r2
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02a      	beq.n	80031f4 <acquire_gsm_mqtt_client+0xb8>
    sprintf(AT_COMMAND, "AT+CMQTTACCQ=0,\"%s\",0\r\n", MQTT_CLIENT_ID);
 800319e:	4a18      	ldr	r2, [pc, #96]	; (8003200 <acquire_gsm_mqtt_client+0xc4>)
 80031a0:	491f      	ldr	r1, [pc, #124]	; (8003220 <acquire_gsm_mqtt_client+0xe4>)
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <acquire_gsm_mqtt_client+0xcc>)
 80031a4:	0018      	movs	r0, r3
 80031a6:	f004 fe2f 	bl	8007e08 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <acquire_gsm_mqtt_client+0xcc>)
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 fca7 	bl	8003b00 <sendingToSimcomA76xx>
    HAL_Delay(200);
 80031b2:	20c8      	movs	r0, #200	; 0xc8
 80031b4:	f001 fb28 	bl	8004808 <HAL_Delay>
    sprintf(AT_COMMAND, "+CMQTTACCQ: 0,\"%s\",0", MQTT_CLIENT_ID);
 80031b8:	4a11      	ldr	r2, [pc, #68]	; (8003200 <acquire_gsm_mqtt_client+0xc4>)
 80031ba:	491a      	ldr	r1, [pc, #104]	; (8003224 <acquire_gsm_mqtt_client+0xe8>)
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <acquire_gsm_mqtt_client+0xcc>)
 80031be:	0018      	movs	r0, r3
 80031c0:	f004 fe22 	bl	8007e08 <siprintf>
    HAL_Delay(200);
 80031c4:	20c8      	movs	r0, #200	; 0xc8
 80031c6:	f001 fb1f 	bl	8004808 <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 80031ca:	4a17      	ldr	r2, [pc, #92]	; (8003228 <acquire_gsm_mqtt_client+0xec>)
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <acquire_gsm_mqtt_client+0xd4>)
 80031ce:	0011      	movs	r1, r2
 80031d0:	0018      	movs	r0, r3
 80031d2:	f004 ff5d 	bl	8008090 <strstr>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d008      	beq.n	80031ec <acquire_gsm_mqtt_client+0xb0>
      printf("-----------------Acquier Successfully------------------\n");
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <acquire_gsm_mqtt_client+0xf0>)
 80031dc:	0018      	movs	r0, r3
 80031de:	f004 fe09 	bl	8007df4 <puts>
      AT_Acquier_MQTT = true;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <acquire_gsm_mqtt_client+0xe0>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
      return 1;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e004      	b.n	80031f6 <acquire_gsm_mqtt_client+0xba>
    } else {
      printf("-----------------Acquier Fail------------------\n");
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <acquire_gsm_mqtt_client+0xf4>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f004 fe00 	bl	8007df4 <puts>
    }
  }
  return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	0800993c 	.word	0x0800993c
 8003200:	08009978 	.word	0x08009978
 8003204:	08009984 	.word	0x08009984
 8003208:	20000270 	.word	0x20000270
 800320c:	0800999c 	.word	0x0800999c
 8003210:	20000380 	.word	0x20000380
 8003214:	080099ac 	.word	0x080099ac
 8003218:	080099dc 	.word	0x080099dc
 800321c:	200000e9 	.word	0x200000e9
 8003220:	08009a18 	.word	0x08009a18
 8003224:	08009a30 	.word	0x08009a30
 8003228:	08009a48 	.word	0x08009a48
 800322c:	08009a4c 	.word	0x08009a4c
 8003230:	08009a84 	.word	0x08009a84

08003234 <connect_mqtt_server_by_gsm>:
int connect_mqtt_server_by_gsm(void) {
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b083      	sub	sp, #12
 8003238:	af02      	add	r7, sp, #8
  sprintf(AT_COMMAND, "+CMQTTCONNECT: 0,\"%s:%d\",20,1,\"%s\",\"%s\"\r\n", MQTT_HOST, MQTT_PORT, MQTT_USER, MQTT_PASS);
 800323a:	4c2f      	ldr	r4, [pc, #188]	; (80032f8 <connect_mqtt_server_by_gsm+0xc4>)
 800323c:	4a2f      	ldr	r2, [pc, #188]	; (80032fc <connect_mqtt_server_by_gsm+0xc8>)
 800323e:	4930      	ldr	r1, [pc, #192]	; (8003300 <connect_mqtt_server_by_gsm+0xcc>)
 8003240:	4830      	ldr	r0, [pc, #192]	; (8003304 <connect_mqtt_server_by_gsm+0xd0>)
 8003242:	4b31      	ldr	r3, [pc, #196]	; (8003308 <connect_mqtt_server_by_gsm+0xd4>)
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	4b31      	ldr	r3, [pc, #196]	; (800330c <connect_mqtt_server_by_gsm+0xd8>)
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	0023      	movs	r3, r4
 800324c:	f004 fddc 	bl	8007e08 <siprintf>
  HAL_Delay(200);
 8003250:	20c8      	movs	r0, #200	; 0xc8
 8003252:	f001 fad9 	bl	8004808 <HAL_Delay>
  sendingToSimcomA76xx("AT+CMQTTCONNECT?\r\n");
 8003256:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <connect_mqtt_server_by_gsm+0xdc>)
 8003258:	0018      	movs	r0, r3
 800325a:	f000 fc51 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 800325e:	20c8      	movs	r0, #200	; 0xc8
 8003260:	f001 fad2 	bl	8004808 <HAL_Delay>
  if (strstr((char *)rx_data_sim, AT_COMMAND) != NULL) {
 8003264:	4a27      	ldr	r2, [pc, #156]	; (8003304 <connect_mqtt_server_by_gsm+0xd0>)
 8003266:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <connect_mqtt_server_by_gsm+0xe0>)
 8003268:	0011      	movs	r1, r2
 800326a:	0018      	movs	r0, r3
 800326c:	f004 ff10 	bl	8008090 <strstr>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d008      	beq.n	8003286 <connect_mqtt_server_by_gsm+0x52>
    printf("-----------------Connected------------------\n");
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <connect_mqtt_server_by_gsm+0xe4>)
 8003276:	0018      	movs	r0, r3
 8003278:	f004 fdbc 	bl	8007df4 <puts>
    AT_Connect_MQTT = true;
 800327c:	4b27      	ldr	r3, [pc, #156]	; (800331c <connect_mqtt_server_by_gsm+0xe8>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
    return 1;
 8003282:	2301      	movs	r3, #1
 8003284:	e034      	b.n	80032f0 <connect_mqtt_server_by_gsm+0xbc>
  } else {
    printf("-----------------Not connect yet !------------------\n");
 8003286:	4b26      	ldr	r3, [pc, #152]	; (8003320 <connect_mqtt_server_by_gsm+0xec>)
 8003288:	0018      	movs	r0, r3
 800328a:	f004 fdb3 	bl	8007df4 <puts>
    AT_Connect_MQTT = false;
 800328e:	4b23      	ldr	r3, [pc, #140]	; (800331c <connect_mqtt_server_by_gsm+0xe8>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
  }
  if (AT_Connect_MQTT == false) {
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <connect_mqtt_server_by_gsm+0xe8>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	4053      	eors	r3, r2
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d025      	beq.n	80032ee <connect_mqtt_server_by_gsm+0xba>
    sprintf(AT_COMMAND, "AT+CMQTTCONNECT=0,\"%s:%d\",20,1,\"%s\",\"%s\"\r\n", MQTT_HOST, MQTT_PORT, MQTT_USER, MQTT_PASS);
 80032a2:	4c15      	ldr	r4, [pc, #84]	; (80032f8 <connect_mqtt_server_by_gsm+0xc4>)
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <connect_mqtt_server_by_gsm+0xc8>)
 80032a6:	491f      	ldr	r1, [pc, #124]	; (8003324 <connect_mqtt_server_by_gsm+0xf0>)
 80032a8:	4816      	ldr	r0, [pc, #88]	; (8003304 <connect_mqtt_server_by_gsm+0xd0>)
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <connect_mqtt_server_by_gsm+0xd4>)
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <connect_mqtt_server_by_gsm+0xd8>)
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	0023      	movs	r3, r4
 80032b4:	f004 fda8 	bl	8007e08 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <connect_mqtt_server_by_gsm+0xd0>)
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 fc20 	bl	8003b00 <sendingToSimcomA76xx>
    HAL_Delay(500);
 80032c0:	23fa      	movs	r3, #250	; 0xfa
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	0018      	movs	r0, r3
 80032c6:	f001 fa9f 	bl	8004808 <HAL_Delay>
    if (strstr((char *)rx_data_sim, "+CMQTTCONNECT: 0,0") != NULL) {
 80032ca:	4a17      	ldr	r2, [pc, #92]	; (8003328 <connect_mqtt_server_by_gsm+0xf4>)
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <connect_mqtt_server_by_gsm+0xe0>)
 80032ce:	0011      	movs	r1, r2
 80032d0:	0018      	movs	r0, r3
 80032d2:	f004 fedd 	bl	8008090 <strstr>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d005      	beq.n	80032e6 <connect_mqtt_server_by_gsm+0xb2>
      printf("-----------------Connected MQTT Success------------------\n");
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <connect_mqtt_server_by_gsm+0xf8>)
 80032dc:	0018      	movs	r0, r3
 80032de:	f004 fd89 	bl	8007df4 <puts>
      return 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e004      	b.n	80032f0 <connect_mqtt_server_by_gsm+0xbc>
    } else {
      printf("-----------------Connect fail------------------\n");
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <connect_mqtt_server_by_gsm+0xfc>)
 80032e8:	0018      	movs	r0, r3
 80032ea:	f004 fd83 	bl	8007df4 <puts>
    }
  }
  return 0;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	0018      	movs	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b001      	add	sp, #4
 80032f6:	bd90      	pop	{r4, r7, pc}
 80032f8:	0000075b 	.word	0x0000075b
 80032fc:	08009ab4 	.word	0x08009ab4
 8003300:	08009ad0 	.word	0x08009ad0
 8003304:	20000270 	.word	0x20000270
 8003308:	08009afc 	.word	0x08009afc
 800330c:	08009b04 	.word	0x08009b04
 8003310:	08009b10 	.word	0x08009b10
 8003314:	20000380 	.word	0x20000380
 8003318:	08009b24 	.word	0x08009b24
 800331c:	200000e8 	.word	0x200000e8
 8003320:	08009b54 	.word	0x08009b54
 8003324:	08009b8c 	.word	0x08009b8c
 8003328:	08009bb8 	.word	0x08009bb8
 800332c:	08009bcc 	.word	0x08009bcc
 8003330:	08009c08 	.word	0x08009c08

08003334 <subscribe_mqtt_via_gsm>:
int subscribe_mqtt_via_gsm(void) {
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b085      	sub	sp, #20
 8003338:	af02      	add	r7, sp, #8
  for (int i = 1; i < NUMBER_LOADS + 1; i++) {
 800333a:	2301      	movs	r3, #1
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	e06e      	b.n	800341e <subscribe_mqtt_via_gsm+0xea>
    sprintf(AT_COMMAND, "%s/snac/%s/%d", FARM, SERIAL_NUMBER, i);
 8003340:	4c3b      	ldr	r4, [pc, #236]	; (8003430 <subscribe_mqtt_via_gsm+0xfc>)
 8003342:	4a3c      	ldr	r2, [pc, #240]	; (8003434 <subscribe_mqtt_via_gsm+0x100>)
 8003344:	493c      	ldr	r1, [pc, #240]	; (8003438 <subscribe_mqtt_via_gsm+0x104>)
 8003346:	483d      	ldr	r0, [pc, #244]	; (800343c <subscribe_mqtt_via_gsm+0x108>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	0023      	movs	r3, r4
 800334e:	f004 fd5b 	bl	8007e08 <siprintf>
    sprintf(AT_COMMAND, "AT+CMQTTSUBTOPIC=0,%d,1\r\n", (int)strlen(AT_COMMAND));
 8003352:	4b3a      	ldr	r3, [pc, #232]	; (800343c <subscribe_mqtt_via_gsm+0x108>)
 8003354:	0018      	movs	r0, r3
 8003356:	f7fc fed7 	bl	8000108 <strlen>
 800335a:	0003      	movs	r3, r0
 800335c:	001a      	movs	r2, r3
 800335e:	4938      	ldr	r1, [pc, #224]	; (8003440 <subscribe_mqtt_via_gsm+0x10c>)
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <subscribe_mqtt_via_gsm+0x108>)
 8003362:	0018      	movs	r0, r3
 8003364:	f004 fd50 	bl	8007e08 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 8003368:	4b34      	ldr	r3, [pc, #208]	; (800343c <subscribe_mqtt_via_gsm+0x108>)
 800336a:	0018      	movs	r0, r3
 800336c:	f000 fbc8 	bl	8003b00 <sendingToSimcomA76xx>
    HAL_Delay(500);
 8003370:	23fa      	movs	r3, #250	; 0xfa
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	0018      	movs	r0, r3
 8003376:	f001 fa47 	bl	8004808 <HAL_Delay>
    sprintf(AT_COMMAND, "%s/snac/%s/%d", FARM, SERIAL_NUMBER, i);
 800337a:	4c2d      	ldr	r4, [pc, #180]	; (8003430 <subscribe_mqtt_via_gsm+0xfc>)
 800337c:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <subscribe_mqtt_via_gsm+0x100>)
 800337e:	492e      	ldr	r1, [pc, #184]	; (8003438 <subscribe_mqtt_via_gsm+0x104>)
 8003380:	482e      	ldr	r0, [pc, #184]	; (800343c <subscribe_mqtt_via_gsm+0x108>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	0023      	movs	r3, r4
 8003388:	f004 fd3e 	bl	8007e08 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 800338c:	4b2b      	ldr	r3, [pc, #172]	; (800343c <subscribe_mqtt_via_gsm+0x108>)
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fbb6 	bl	8003b00 <sendingToSimcomA76xx>
    HAL_Delay(500);
 8003394:	23fa      	movs	r3, #250	; 0xfa
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	0018      	movs	r0, r3
 800339a:	f001 fa35 	bl	8004808 <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 800339e:	4a29      	ldr	r2, [pc, #164]	; (8003444 <subscribe_mqtt_via_gsm+0x110>)
 80033a0:	4b29      	ldr	r3, [pc, #164]	; (8003448 <subscribe_mqtt_via_gsm+0x114>)
 80033a2:	0011      	movs	r1, r2
 80033a4:	0018      	movs	r0, r3
 80033a6:	f004 fe73 	bl	8008090 <strstr>
 80033aa:	1e03      	subs	r3, r0, #0
 80033ac:	d007      	beq.n	80033be <subscribe_mqtt_via_gsm+0x8a>
      printf("-----------------Subscribe Topic Success------------------\n");
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <subscribe_mqtt_via_gsm+0x118>)
 80033b0:	0018      	movs	r0, r3
 80033b2:	f004 fd1f 	bl	8007df4 <puts>
      AT_Subcribe_Topic_MQTT = true;
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <subscribe_mqtt_via_gsm+0x11c>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e006      	b.n	80033cc <subscribe_mqtt_via_gsm+0x98>
    } else {
      printf("-----------------Subscribe Topic Fail------------------\n");
 80033be:	4b25      	ldr	r3, [pc, #148]	; (8003454 <subscribe_mqtt_via_gsm+0x120>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f004 fd17 	bl	8007df4 <puts>
      AT_Subcribe_Topic_MQTT = false;
 80033c6:	4b22      	ldr	r3, [pc, #136]	; (8003450 <subscribe_mqtt_via_gsm+0x11c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
    }
    if (AT_Subcribe_Topic_MQTT == true) {
 80033cc:	4b20      	ldr	r3, [pc, #128]	; (8003450 <subscribe_mqtt_via_gsm+0x11c>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d021      	beq.n	8003418 <subscribe_mqtt_via_gsm+0xe4>
      sendingToSimcomA76xx("AT+CMQTTSUB=0\r\n");
 80033d4:	4b20      	ldr	r3, [pc, #128]	; (8003458 <subscribe_mqtt_via_gsm+0x124>)
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 fb92 	bl	8003b00 <sendingToSimcomA76xx>
      HAL_Delay(500);
 80033dc:	23fa      	movs	r3, #250	; 0xfa
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	0018      	movs	r0, r3
 80033e2:	f001 fa11 	bl	8004808 <HAL_Delay>
      if (strstr((char *)rx_data_sim, "+CMQTTSUB: 0,0") != NULL) {
 80033e6:	4a1d      	ldr	r2, [pc, #116]	; (800345c <subscribe_mqtt_via_gsm+0x128>)
 80033e8:	4b17      	ldr	r3, [pc, #92]	; (8003448 <subscribe_mqtt_via_gsm+0x114>)
 80033ea:	0011      	movs	r1, r2
 80033ec:	0018      	movs	r0, r3
 80033ee:	f004 fe4f 	bl	8008090 <strstr>
 80033f2:	1e03      	subs	r3, r0, #0
 80033f4:	d007      	beq.n	8003406 <subscribe_mqtt_via_gsm+0xd2>
        printf("-----------------Subcribe Successed !------------------\n");
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <subscribe_mqtt_via_gsm+0x12c>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f004 fcfb 	bl	8007df4 <puts>
        AT_Subcribe_MQTT = true;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <subscribe_mqtt_via_gsm+0x130>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e008      	b.n	8003418 <subscribe_mqtt_via_gsm+0xe4>
      } else {
        printf("-----------------Subcribe Fail !------------------\n");
 8003406:	4b18      	ldr	r3, [pc, #96]	; (8003468 <subscribe_mqtt_via_gsm+0x134>)
 8003408:	0018      	movs	r0, r3
 800340a:	f004 fcf3 	bl	8007df4 <puts>
        AT_Subcribe_MQTT = false;
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <subscribe_mqtt_via_gsm+0x130>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
        return 0;
 8003414:	2300      	movs	r3, #0
 8003416:	e006      	b.n	8003426 <subscribe_mqtt_via_gsm+0xf2>
  for (int i = 1; i < NUMBER_LOADS + 1; i++) {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3301      	adds	r3, #1
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b08      	cmp	r3, #8
 8003422:	dd8d      	ble.n	8003340 <subscribe_mqtt_via_gsm+0xc>
      }
    }
  }
  return 1;
 8003424:	2301      	movs	r3, #1
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b003      	add	sp, #12
 800342c:	bd90      	pop	{r4, r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	08009978 	.word	0x08009978
 8003434:	08009c38 	.word	0x08009c38
 8003438:	08009c48 	.word	0x08009c48
 800343c:	20000270 	.word	0x20000270
 8003440:	08009c58 	.word	0x08009c58
 8003444:	08009a48 	.word	0x08009a48
 8003448:	20000380 	.word	0x20000380
 800344c:	08009c74 	.word	0x08009c74
 8003450:	200000ea 	.word	0x200000ea
 8003454:	08009cb0 	.word	0x08009cb0
 8003458:	08009ce8 	.word	0x08009ce8
 800345c:	08009cf8 	.word	0x08009cf8
 8003460:	08009d08 	.word	0x08009d08
 8003464:	200000eb 	.word	0x200000eb
 8003468:	08009d40 	.word	0x08009d40

0800346c <publish_mqtt_via_gsm>:
int publish_mqtt_via_gsm(void) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  //  is used to input the topic of a publish message
	ledStatus('W');
 8003472:	2057      	movs	r0, #87	; 0x57
 8003474:	f000 fcec 	bl	8003e50 <ledStatus>
  create_JSON();
 8003478:	f000 fc4c 	bl	8003d14 <create_JSON>
  sprintf(AT_COMMAND, "AT+CMQTTTOPIC=0,%d\r\n", strlen(MQTT_TOPIC_ACTUATOR_STATUS));
 800347c:	4948      	ldr	r1, [pc, #288]	; (80035a0 <publish_mqtt_via_gsm+0x134>)
 800347e:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <publish_mqtt_via_gsm+0x138>)
 8003480:	221d      	movs	r2, #29
 8003482:	0018      	movs	r0, r3
 8003484:	f004 fcc0 	bl	8007e08 <siprintf>
  sendingToSimcomA76xx(AT_COMMAND);
 8003488:	4b46      	ldr	r3, [pc, #280]	; (80035a4 <publish_mqtt_via_gsm+0x138>)
 800348a:	0018      	movs	r0, r3
 800348c:	f000 fb38 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8003490:	20c8      	movs	r0, #200	; 0xc8
 8003492:	f001 f9b9 	bl	8004808 <HAL_Delay>
  sprintf(AT_COMMAND, "%s\r\n", MQTT_TOPIC_ACTUATOR_STATUS);
 8003496:	4a44      	ldr	r2, [pc, #272]	; (80035a8 <publish_mqtt_via_gsm+0x13c>)
 8003498:	4944      	ldr	r1, [pc, #272]	; (80035ac <publish_mqtt_via_gsm+0x140>)
 800349a:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <publish_mqtt_via_gsm+0x138>)
 800349c:	0018      	movs	r0, r3
 800349e:	f004 fcb3 	bl	8007e08 <siprintf>
  sendingToSimcomA76xx(AT_COMMAND);
 80034a2:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <publish_mqtt_via_gsm+0x138>)
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 fb2b 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(200);
 80034aa:	20c8      	movs	r0, #200	; 0xc8
 80034ac:	f001 f9ac 	bl	8004808 <HAL_Delay>
  if (strstr((char *)rx_data_sim, "OK") != NULL) {
 80034b0:	4a3f      	ldr	r2, [pc, #252]	; (80035b0 <publish_mqtt_via_gsm+0x144>)
 80034b2:	4b40      	ldr	r3, [pc, #256]	; (80035b4 <publish_mqtt_via_gsm+0x148>)
 80034b4:	0011      	movs	r1, r2
 80034b6:	0018      	movs	r0, r3
 80034b8:	f004 fdea 	bl	8008090 <strstr>
 80034bc:	1e03      	subs	r3, r0, #0
 80034be:	d007      	beq.n	80034d0 <publish_mqtt_via_gsm+0x64>
    printf("----------------- Sent input the topic of a publish message success ! ------------------\n");
 80034c0:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <publish_mqtt_via_gsm+0x14c>)
 80034c2:	0018      	movs	r0, r3
 80034c4:	f004 fc96 	bl	8007df4 <puts>
    AT_Topic_Puplish_MQTT = true;
 80034c8:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <publish_mqtt_via_gsm+0x150>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e006      	b.n	80034de <publish_mqtt_via_gsm+0x72>
  } else {
    printf("----------------- Sent input the topic of a publish message fail !------------------\n");
 80034d0:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <publish_mqtt_via_gsm+0x154>)
 80034d2:	0018      	movs	r0, r3
 80034d4:	f004 fc8e 	bl	8007df4 <puts>
    AT_Topic_Puplish_MQTT = false;
 80034d8:	4b38      	ldr	r3, [pc, #224]	; (80035bc <publish_mqtt_via_gsm+0x150>)
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
  }
  if (AT_Topic_Puplish_MQTT) {
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <publish_mqtt_via_gsm+0x150>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d056      	beq.n	8003594 <publish_mqtt_via_gsm+0x128>
    // is used to input the message body of a publish message.
    int lengthOfInformPayload = strlen(array_json);
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <publish_mqtt_via_gsm+0x158>)
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fc fe0d 	bl	8000108 <strlen>
 80034ee:	0003      	movs	r3, r0
 80034f0:	607b      	str	r3, [r7, #4]
    sprintf(AT_COMMAND, "AT+CMQTTPAYLOAD=0,%d\r\n", lengthOfInformPayload);
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4934      	ldr	r1, [pc, #208]	; (80035c8 <publish_mqtt_via_gsm+0x15c>)
 80034f6:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <publish_mqtt_via_gsm+0x138>)
 80034f8:	0018      	movs	r0, r3
 80034fa:	f004 fc85 	bl	8007e08 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 80034fe:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <publish_mqtt_via_gsm+0x138>)
 8003500:	0018      	movs	r0, r3
 8003502:	f000 fafd 	bl	8003b00 <sendingToSimcomA76xx>
    HAL_Delay(200);
 8003506:	20c8      	movs	r0, #200	; 0xc8
 8003508:	f001 f97e 	bl	8004808 <HAL_Delay>
    sendingToSimcomA76xx(array_json);
 800350c:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <publish_mqtt_via_gsm+0x158>)
 800350e:	0018      	movs	r0, r3
 8003510:	f000 faf6 	bl	8003b00 <sendingToSimcomA76xx>
    HAL_Delay(200);
 8003514:	20c8      	movs	r0, #200	; 0xc8
 8003516:	f001 f977 	bl	8004808 <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 800351a:	4a25      	ldr	r2, [pc, #148]	; (80035b0 <publish_mqtt_via_gsm+0x144>)
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <publish_mqtt_via_gsm+0x148>)
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f004 fdb5 	bl	8008090 <strstr>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d007      	beq.n	800353a <publish_mqtt_via_gsm+0xce>
      printf("----------------- Sent input the message body of a publish message ! ------------------\n");
 800352a:	4b28      	ldr	r3, [pc, #160]	; (80035cc <publish_mqtt_via_gsm+0x160>)
 800352c:	0018      	movs	r0, r3
 800352e:	f004 fc61 	bl	8007df4 <puts>
      AT_Data_Puplish_MQTT = true;
 8003532:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <publish_mqtt_via_gsm+0x164>)
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e006      	b.n	8003548 <publish_mqtt_via_gsm+0xdc>
    } else {
      printf("----------------- Sent input the message body of a publish fail! ------------------\n");
 800353a:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <publish_mqtt_via_gsm+0x168>)
 800353c:	0018      	movs	r0, r3
 800353e:	f004 fc59 	bl	8007df4 <puts>
      AT_Data_Puplish_MQTT = false;
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <publish_mqtt_via_gsm+0x164>)
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
    }
    if (AT_Data_Puplish_MQTT) {
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <publish_mqtt_via_gsm+0x164>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d021      	beq.n	8003594 <publish_mqtt_via_gsm+0x128>
      sendingToSimcomA76xx("AT+CMQTTPUB=0,1,60\r\n");
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <publish_mqtt_via_gsm+0x16c>)
 8003552:	0018      	movs	r0, r3
 8003554:	f000 fad4 	bl	8003b00 <sendingToSimcomA76xx>
      HAL_Delay(200);
 8003558:	20c8      	movs	r0, #200	; 0xc8
 800355a:	f001 f955 	bl	8004808 <HAL_Delay>
      if (strstr((char *)rx_data_sim, "+CMQTTPUB: 0,0") != NULL) {
 800355e:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <publish_mqtt_via_gsm+0x170>)
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <publish_mqtt_via_gsm+0x148>)
 8003562:	0011      	movs	r1, r2
 8003564:	0018      	movs	r0, r3
 8003566:	f004 fd93 	bl	8008090 <strstr>
 800356a:	1e03      	subs	r3, r0, #0
 800356c:	d00b      	beq.n	8003586 <publish_mqtt_via_gsm+0x11a>
        printf("-----------------Publish Success !------------------\n");
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <publish_mqtt_via_gsm+0x174>)
 8003570:	0018      	movs	r0, r3
 8003572:	f004 fc3f 	bl	8007df4 <puts>
        AT_Puplish_MQTT = true;
 8003576:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <publish_mqtt_via_gsm+0x178>)
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
        ledStatus('G');
 800357c:	2047      	movs	r0, #71	; 0x47
 800357e:	f000 fc67 	bl	8003e50 <ledStatus>
        return 1;
 8003582:	2301      	movs	r3, #1
 8003584:	e007      	b.n	8003596 <publish_mqtt_via_gsm+0x12a>
      } else {
        printf("-----------------Publish fail !------------------\n");
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <publish_mqtt_via_gsm+0x17c>)
 8003588:	0018      	movs	r0, r3
 800358a:	f004 fc33 	bl	8007df4 <puts>
        AT_Puplish_MQTT = false;
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <publish_mqtt_via_gsm+0x178>)
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return 0;
 8003594:	2300      	movs	r3, #0
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b002      	add	sp, #8
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	08009d74 	.word	0x08009d74
 80035a4:	20000270 	.word	0x20000270
 80035a8:	08009d8c 	.word	0x08009d8c
 80035ac:	08009dac 	.word	0x08009dac
 80035b0:	08009a48 	.word	0x08009a48
 80035b4:	20000380 	.word	0x20000380
 80035b8:	08009db4 	.word	0x08009db4
 80035bc:	200000ec 	.word	0x200000ec
 80035c0:	08009e10 	.word	0x08009e10
 80035c4:	200000f8 	.word	0x200000f8
 80035c8:	08009e68 	.word	0x08009e68
 80035cc:	08009e80 	.word	0x08009e80
 80035d0:	200000ed 	.word	0x200000ed
 80035d4:	08009ed8 	.word	0x08009ed8
 80035d8:	08009f2c 	.word	0x08009f2c
 80035dc:	08009f44 	.word	0x08009f44
 80035e0:	08009f54 	.word	0x08009f54
 80035e4:	200000ee 	.word	0x200000ee
 80035e8:	08009f8c 	.word	0x08009f8c

080035ec <check_error_mqtt_via_gsm>:
int check_error_mqtt_via_gsm(void) {
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
  fn_Enable_MQTT = false;
 80035f2:	4b49      	ldr	r3, [pc, #292]	; (8003718 <check_error_mqtt_via_gsm+0x12c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
  fn_Connect_MQTT = false;
 80035f8:	4b48      	ldr	r3, [pc, #288]	; (800371c <check_error_mqtt_via_gsm+0x130>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
  fn_CheckSim = false;
 80035fe:	4b48      	ldr	r3, [pc, #288]	; (8003720 <check_error_mqtt_via_gsm+0x134>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
  fn_Acquier_MQTT = false;
 8003604:	4b47      	ldr	r3, [pc, #284]	; (8003724 <check_error_mqtt_via_gsm+0x138>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
  if (!fn_CheckSim) {
 800360a:	4b45      	ldr	r3, [pc, #276]	; (8003720 <check_error_mqtt_via_gsm+0x134>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	4053      	eors	r3, r2
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d014      	beq.n	8003642 <check_error_mqtt_via_gsm+0x56>
    fn_CheckSim = fn_check_signal_simcom();
 8003618:	f7ff fc7c 	bl	8002f14 <fn_check_signal_simcom>
 800361c:	1c03      	adds	r3, r0, #0
 800361e:	2201      	movs	r2, #1
 8003620:	1c14      	adds	r4, r2, #0
 8003622:	2100      	movs	r1, #0
 8003624:	1c18      	adds	r0, r3, #0
 8003626:	f7fc fe57 	bl	80002d8 <__aeabi_fcmpeq>
 800362a:	1e03      	subs	r3, r0, #0
 800362c:	d001      	beq.n	8003632 <check_error_mqtt_via_gsm+0x46>
 800362e:	2300      	movs	r3, #0
 8003630:	1c1c      	adds	r4, r3, #0
 8003632:	b2e2      	uxtb	r2, r4
 8003634:	4b3a      	ldr	r3, [pc, #232]	; (8003720 <check_error_mqtt_via_gsm+0x134>)
 8003636:	701a      	strb	r2, [r3, #0]
  } else {
    return 0;
  }

  if (fn_CheckSim) {
 8003638:	4b39      	ldr	r3, [pc, #228]	; (8003720 <check_error_mqtt_via_gsm+0x134>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00f      	beq.n	8003660 <check_error_mqtt_via_gsm+0x74>
 8003640:	e001      	b.n	8003646 <check_error_mqtt_via_gsm+0x5a>
    return 0;
 8003642:	2300      	movs	r3, #0
 8003644:	e063      	b.n	800370e <check_error_mqtt_via_gsm+0x122>
    fn_Enable_MQTT = enable_mqtt_on_gsm_modem();
 8003646:	f7ff fd43 	bl	80030d0 <enable_mqtt_on_gsm_modem>
 800364a:	0003      	movs	r3, r0
 800364c:	1e5a      	subs	r2, r3, #1
 800364e:	4193      	sbcs	r3, r2
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <check_error_mqtt_via_gsm+0x12c>)
 8003654:	701a      	strb	r2, [r3, #0]
  } else {
    return 0;
  }

  if (fn_Enable_MQTT) {
 8003656:	4b30      	ldr	r3, [pc, #192]	; (8003718 <check_error_mqtt_via_gsm+0x12c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00f      	beq.n	800367e <check_error_mqtt_via_gsm+0x92>
 800365e:	e001      	b.n	8003664 <check_error_mqtt_via_gsm+0x78>
    return 0;
 8003660:	2300      	movs	r3, #0
 8003662:	e054      	b.n	800370e <check_error_mqtt_via_gsm+0x122>
    fn_Acquier_MQTT = acquire_gsm_mqtt_client();
 8003664:	f7ff fd6a 	bl	800313c <acquire_gsm_mqtt_client>
 8003668:	0003      	movs	r3, r0
 800366a:	1e5a      	subs	r2, r3, #1
 800366c:	4193      	sbcs	r3, r2
 800366e:	b2da      	uxtb	r2, r3
 8003670:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <check_error_mqtt_via_gsm+0x138>)
 8003672:	701a      	strb	r2, [r3, #0]
  } else {
    return 0;
  }
  if (fn_Acquier_MQTT) {
 8003674:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <check_error_mqtt_via_gsm+0x138>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d018      	beq.n	80036ae <check_error_mqtt_via_gsm+0xc2>
 800367c:	e001      	b.n	8003682 <check_error_mqtt_via_gsm+0x96>
    return 0;
 800367e:	2300      	movs	r3, #0
 8003680:	e045      	b.n	800370e <check_error_mqtt_via_gsm+0x122>
    for (int i = 0; i <= 5; i++) {
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	e00e      	b.n	80036a6 <check_error_mqtt_via_gsm+0xba>
      fn_Connect_MQTT = connect_mqtt_server_by_gsm();
 8003688:	f7ff fdd4 	bl	8003234 <connect_mqtt_server_by_gsm>
 800368c:	0003      	movs	r3, r0
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	4193      	sbcs	r3, r2
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4b21      	ldr	r3, [pc, #132]	; (800371c <check_error_mqtt_via_gsm+0x130>)
 8003696:	701a      	strb	r2, [r3, #0]
      if (fn_Connect_MQTT) {
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <check_error_mqtt_via_gsm+0x130>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d108      	bne.n	80036b2 <check_error_mqtt_via_gsm+0xc6>
    for (int i = 0; i <= 5; i++) {
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	dded      	ble.n	8003688 <check_error_mqtt_via_gsm+0x9c>
 80036ac:	e002      	b.n	80036b4 <check_error_mqtt_via_gsm+0xc8>
        break;
      }
    }
  } else {
    return 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e02d      	b.n	800370e <check_error_mqtt_via_gsm+0x122>
        break;
 80036b2:	46c0      	nop			; (mov r8, r8)
  }
  if (fn_Connect_MQTT) {
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <check_error_mqtt_via_gsm+0x130>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01e      	beq.n	80036fa <check_error_mqtt_via_gsm+0x10e>
    for (int i = 0; i <= 3; i++) {
 80036bc:	2300      	movs	r3, #0
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	e00e      	b.n	80036e0 <check_error_mqtt_via_gsm+0xf4>
      fn_Subcribe_MQTT = subscribe_mqtt_via_gsm();
 80036c2:	f7ff fe37 	bl	8003334 <subscribe_mqtt_via_gsm>
 80036c6:	0003      	movs	r3, r0
 80036c8:	1e5a      	subs	r2, r3, #1
 80036ca:	4193      	sbcs	r3, r2
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <check_error_mqtt_via_gsm+0x13c>)
 80036d0:	701a      	strb	r2, [r3, #0]
      if (fn_Subcribe_MQTT) {
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <check_error_mqtt_via_gsm+0x13c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <check_error_mqtt_via_gsm+0xfc>
    for (int i = 0; i <= 3; i++) {
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	3301      	adds	r3, #1
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	dded      	ble.n	80036c2 <check_error_mqtt_via_gsm+0xd6>
 80036e6:	e000      	b.n	80036ea <check_error_mqtt_via_gsm+0xfe>
        break;
 80036e8:	46c0      	nop			; (mov r8, r8)
      }
    }
    if (fn_Subcribe_MQTT)
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <check_error_mqtt_via_gsm+0x13c>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <check_error_mqtt_via_gsm+0x10a>
      return 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00b      	b.n	800370e <check_error_mqtt_via_gsm+0x122>
    else
      stop_mqtt_via_gsm();
 80036f6:	f000 f819 	bl	800372c <stop_mqtt_via_gsm>
  }
  if (!fn_Connect_MQTT) {
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <check_error_mqtt_via_gsm+0x130>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2201      	movs	r2, #1
 8003700:	4053      	eors	r3, r2
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <check_error_mqtt_via_gsm+0x120>
    stop_mqtt_via_gsm();
 8003708:	f000 f810 	bl	800372c <stop_mqtt_via_gsm>
  }
  return 0;
 800370c:	2300      	movs	r3, #0
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b003      	add	sp, #12
 8003714:	bd90      	pop	{r4, r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	20000428 	.word	0x20000428
 800371c:	20000429 	.word	0x20000429
 8003720:	2000042a 	.word	0x2000042a
 8003724:	2000042d 	.word	0x2000042d
 8003728:	2000042b 	.word	0x2000042b

0800372c <stop_mqtt_via_gsm>:
int stop_mqtt_via_gsm(void) {
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  sendingToSimcomA76xx("AT+CMQTTDISC?\r\n");
 8003730:	4b42      	ldr	r3, [pc, #264]	; (800383c <stop_mqtt_via_gsm+0x110>)
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f9e4 	bl	8003b00 <sendingToSimcomA76xx>
  HAL_Delay(500);
 8003738:	23fa      	movs	r3, #250	; 0xfa
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	0018      	movs	r0, r3
 800373e:	f001 f863 	bl	8004808 <HAL_Delay>
  if (strstr((char *)rx_data_sim, "+CMQTTDISC: 0,0") != NULL) {
 8003742:	4a3f      	ldr	r2, [pc, #252]	; (8003840 <stop_mqtt_via_gsm+0x114>)
 8003744:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <stop_mqtt_via_gsm+0x118>)
 8003746:	0011      	movs	r1, r2
 8003748:	0018      	movs	r0, r3
 800374a:	f004 fca1 	bl	8008090 <strstr>
 800374e:	1e03      	subs	r3, r0, #0
 8003750:	d007      	beq.n	8003762 <stop_mqtt_via_gsm+0x36>
    printf("----------------- Connection! ------------------\n");
 8003752:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <stop_mqtt_via_gsm+0x11c>)
 8003754:	0018      	movs	r0, r3
 8003756:	f004 fb4d 	bl	8007df4 <puts>
    AT_Check_Dis_MQTT = true;
 800375a:	4b3c      	ldr	r3, [pc, #240]	; (800384c <stop_mqtt_via_gsm+0x120>)
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e009      	b.n	8003776 <stop_mqtt_via_gsm+0x4a>
  } else {
    printf("----------------- Disconnect! ------------------\n");
 8003762:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <stop_mqtt_via_gsm+0x124>)
 8003764:	0018      	movs	r0, r3
 8003766:	f004 fb45 	bl	8007df4 <puts>
    AT_Check_Dis_MQTT = false;
 800376a:	4b38      	ldr	r3, [pc, #224]	; (800384c <stop_mqtt_via_gsm+0x120>)
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
    AT_Disconnect_MQTT = true;
 8003770:	4b38      	ldr	r3, [pc, #224]	; (8003854 <stop_mqtt_via_gsm+0x128>)
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
  }
  if (AT_Check_Dis_MQTT) {
 8003776:	4b35      	ldr	r3, [pc, #212]	; (800384c <stop_mqtt_via_gsm+0x120>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01a      	beq.n	80037b4 <stop_mqtt_via_gsm+0x88>
    sendingToSimcomA76xx("AT+CMQTTDISC=0,120\r\n");
 800377e:	4b36      	ldr	r3, [pc, #216]	; (8003858 <stop_mqtt_via_gsm+0x12c>)
 8003780:	0018      	movs	r0, r3
 8003782:	f000 f9bd 	bl	8003b00 <sendingToSimcomA76xx>
    HAL_Delay(500);
 8003786:	23fa      	movs	r3, #250	; 0xfa
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	0018      	movs	r0, r3
 800378c:	f001 f83c 	bl	8004808 <HAL_Delay>
    if (strstr((char *)rx_data_sim, "+CMQTTDISC: 0,0") != NULL) {
 8003790:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <stop_mqtt_via_gsm+0x114>)
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <stop_mqtt_via_gsm+0x118>)
 8003794:	0011      	movs	r1, r2
 8003796:	0018      	movs	r0, r3
 8003798:	f004 fc7a 	bl	8008090 <strstr>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d007      	beq.n	80037b0 <stop_mqtt_via_gsm+0x84>
      printf("----------------- Disconnect successfully! ------------------\n");
 80037a0:	4b2e      	ldr	r3, [pc, #184]	; (800385c <stop_mqtt_via_gsm+0x130>)
 80037a2:	0018      	movs	r0, r3
 80037a4:	f004 fb26 	bl	8007df4 <puts>
      AT_Disconnect_MQTT = true;
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <stop_mqtt_via_gsm+0x128>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e001      	b.n	80037b4 <stop_mqtt_via_gsm+0x88>
    } else
      restart_stm32();
 80037b0:	f000 f8bc 	bl	800392c <restart_stm32>
  }
  if (AT_Disconnect_MQTT) {
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <stop_mqtt_via_gsm+0x128>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01a      	beq.n	80037f2 <stop_mqtt_via_gsm+0xc6>
    sendingToSimcomA76xx("AT+CMQTTREL=0\r\n");
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <stop_mqtt_via_gsm+0x134>)
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 f99e 	bl	8003b00 <sendingToSimcomA76xx>
    HAL_Delay(500);
 80037c4:	23fa      	movs	r3, #250	; 0xfa
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	0018      	movs	r0, r3
 80037ca:	f001 f81d 	bl	8004808 <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 80037ce:	4a25      	ldr	r2, [pc, #148]	; (8003864 <stop_mqtt_via_gsm+0x138>)
 80037d0:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <stop_mqtt_via_gsm+0x118>)
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f004 fc5b 	bl	8008090 <strstr>
 80037da:	1e03      	subs	r3, r0, #0
 80037dc:	d007      	beq.n	80037ee <stop_mqtt_via_gsm+0xc2>
      printf("----------------- Release a MQTT client successfully! "
 80037de:	4b22      	ldr	r3, [pc, #136]	; (8003868 <stop_mqtt_via_gsm+0x13c>)
 80037e0:	0018      	movs	r0, r3
 80037e2:	f004 fb07 	bl	8007df4 <puts>
             "------------------\n");
      AT_Rel_MQTT = true;
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <stop_mqtt_via_gsm+0x140>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e001      	b.n	80037f2 <stop_mqtt_via_gsm+0xc6>
    } else
      restart_stm32();
 80037ee:	f000 f89d 	bl	800392c <restart_stm32>
  }
  if (AT_Rel_MQTT) {
 80037f2:	4b1e      	ldr	r3, [pc, #120]	; (800386c <stop_mqtt_via_gsm+0x140>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01b      	beq.n	8003832 <stop_mqtt_via_gsm+0x106>
    sendingToSimcomA76xx("AT+CMQTTSTOP\r\n");
 80037fa:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <stop_mqtt_via_gsm+0x144>)
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 f97f 	bl	8003b00 <sendingToSimcomA76xx>
    HAL_Delay(500);
 8003802:	23fa      	movs	r3, #250	; 0xfa
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	0018      	movs	r0, r3
 8003808:	f000 fffe 	bl	8004808 <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <stop_mqtt_via_gsm+0x138>)
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <stop_mqtt_via_gsm+0x118>)
 8003810:	0011      	movs	r1, r2
 8003812:	0018      	movs	r0, r3
 8003814:	f004 fc3c 	bl	8008090 <strstr>
 8003818:	1e03      	subs	r3, r0, #0
 800381a:	d008      	beq.n	800382e <stop_mqtt_via_gsm+0x102>
      printf("----------------- Stop MQTT service successfully! "
 800381c:	4b15      	ldr	r3, [pc, #84]	; (8003874 <stop_mqtt_via_gsm+0x148>)
 800381e:	0018      	movs	r0, r3
 8003820:	f004 fae8 	bl	8007df4 <puts>
             "------------------\n");
      AT_Stop_MQTT = true;
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <stop_mqtt_via_gsm+0x14c>)
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
      return 1;
 800382a:	2301      	movs	r3, #1
 800382c:	e002      	b.n	8003834 <stop_mqtt_via_gsm+0x108>
    } else
      restart_stm32();
 800382e:	f000 f87d 	bl	800392c <restart_stm32>
  }
  return 0;
 8003832:	2300      	movs	r3, #0
}
 8003834:	0018      	movs	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	08009fc0 	.word	0x08009fc0
 8003840:	08009fd0 	.word	0x08009fd0
 8003844:	20000380 	.word	0x20000380
 8003848:	08009fe0 	.word	0x08009fe0
 800384c:	200000ef 	.word	0x200000ef
 8003850:	0800a014 	.word	0x0800a014
 8003854:	200000f0 	.word	0x200000f0
 8003858:	0800a048 	.word	0x0800a048
 800385c:	0800a060 	.word	0x0800a060
 8003860:	0800a0a0 	.word	0x0800a0a0
 8003864:	08009a48 	.word	0x08009a48
 8003868:	0800a0b0 	.word	0x0800a0b0
 800386c:	200000f1 	.word	0x200000f1
 8003870:	0800a0fc 	.word	0x0800a0fc
 8003874:	0800a10c 	.word	0x0800a10c
 8003878:	200000f2 	.word	0x200000f2

0800387c <update_status>:
int update_status(void) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
	for(int i=1;i<=3;i++)
 8003882:	2301      	movs	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e010      	b.n	80038aa <update_status+0x2e>
	{
		  fn_Publish_MQTT = publish_mqtt_via_gsm();
 8003888:	f7ff fdf0 	bl	800346c <publish_mqtt_via_gsm>
 800388c:	0003      	movs	r3, r0
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	4193      	sbcs	r3, r2
 8003892:	b2da      	uxtb	r2, r3
 8003894:	4b22      	ldr	r3, [pc, #136]	; (8003920 <update_status+0xa4>)
 8003896:	701a      	strb	r2, [r3, #0]
		  if(fn_Publish_MQTT)
 8003898:	4b21      	ldr	r3, [pc, #132]	; (8003920 <update_status+0xa4>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <update_status+0x28>
		  {
			  return 1;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e038      	b.n	8003916 <update_status+0x9a>
	for(int i=1;i<=3;i++)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3301      	adds	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	ddeb      	ble.n	8003888 <update_status+0xc>
		  }
	}
  if (!fn_Publish_MQTT) {
 80038b0:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <update_status+0xa4>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4053      	eors	r3, r2
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d02a      	beq.n	8003914 <update_status+0x98>
    int temp = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
    for (int i = 1; i <= 15; i++) {
 80038c2:	2301      	movs	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	e022      	b.n	800390e <update_status+0x92>
      temp = check_error_mqtt_via_gsm();
 80038c8:	f7ff fe90 	bl	80035ec <check_error_mqtt_via_gsm>
 80038cc:	0003      	movs	r3, r0
 80038ce:	607b      	str	r3, [r7, #4]
      if (!temp) {
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d114      	bne.n	8003900 <update_status+0x84>
        count_errors++;
 80038d6:	4b13      	ldr	r3, [pc, #76]	; (8003924 <update_status+0xa8>)
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <update_status+0xa8>)
 80038e0:	801a      	strh	r2, [r3, #0]
        printf("-----------------UPDATE FAIL %d!------------------\n", count_errors);
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <update_status+0xa8>)
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	001a      	movs	r2, r3
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <update_status+0xac>)
 80038ea:	0011      	movs	r1, r2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f004 fa1b 	bl	8007d28 <iprintf>
        if (count_errors >= 15) {
 80038f2:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <update_status+0xa8>)
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	2b0e      	cmp	r3, #14
 80038f8:	d906      	bls.n	8003908 <update_status+0x8c>
          restart_stm32();
 80038fa:	f000 f817 	bl	800392c <restart_stm32>
 80038fe:	e003      	b.n	8003908 <update_status+0x8c>
        }
      } else {
        count_errors = 0;
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <update_status+0xa8>)
 8003902:	2200      	movs	r2, #0
 8003904:	801a      	strh	r2, [r3, #0]
        break;
 8003906:	e005      	b.n	8003914 <update_status+0x98>
    for (int i = 1; i <= 15; i++) {
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b0f      	cmp	r3, #15
 8003912:	ddd9      	ble.n	80038c8 <update_status+0x4c>
      }
    }
  }
  return 1;
 8003914:	2301      	movs	r3, #1
}
 8003916:	0018      	movs	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	b004      	add	sp, #16
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	2000042c 	.word	0x2000042c
 8003924:	200000f4 	.word	0x200000f4
 8003928:	0800a154 	.word	0x0800a154

0800392c <restart_stm32>:
void restart_stm32(void) {
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  printf("\r\n-----------------Restart STM32------------------\r\n");
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <restart_stm32+0x1c>)
 8003932:	0018      	movs	r0, r3
 8003934:	f004 fa5e 	bl	8007df4 <puts>
  printf("\r\n-----------------GOOD BYE !------------------\r\n");
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <restart_stm32+0x20>)
 800393a:	0018      	movs	r0, r3
 800393c:	f004 fa5a 	bl	8007df4 <puts>
  stop_mqtt_via_gsm();
 8003940:	f7ff fef4 	bl	800372c <stop_mqtt_via_gsm>
#if SAVE_LOAD
    	read_statusload();
#endif
  NVIC_SystemReset();
 8003944:	f7ff fa7a 	bl	8002e3c <__NVIC_SystemReset>
 8003948:	0800a188 	.word	0x0800a188
 800394c:	0800a1bc 	.word	0x0800a1bc

08003950 <init_cricket>:
}
int init_cricket(void) {
 8003950:	b590      	push	{r4, r7, lr}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
	for(int i=0;i<=3;i++)
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	e073      	b.n	8003a44 <init_cricket+0xf4>
	{
		printf("\r\n-----------------INIT CRICKET !------------------\r\n");
 800395c:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <init_cricket+0x108>)
 800395e:	0018      	movs	r0, r3
 8003960:	f004 fa48 	bl	8007df4 <puts>
		  if (isPBDONE == true) {
 8003964:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <init_cricket+0x10c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d168      	bne.n	8003a3e <init_cricket+0xee>
		    if (!fn_CheckSim) {
 800396c:	4b3c      	ldr	r3, [pc, #240]	; (8003a60 <init_cricket+0x110>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2201      	movs	r2, #1
 8003972:	4053      	eors	r3, r2
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d010      	beq.n	800399c <init_cricket+0x4c>
		      fn_CheckSim = fn_check_signal_simcom();
 800397a:	f7ff facb 	bl	8002f14 <fn_check_signal_simcom>
 800397e:	1c03      	adds	r3, r0, #0
 8003980:	2201      	movs	r2, #1
 8003982:	1c14      	adds	r4, r2, #0
 8003984:	2100      	movs	r1, #0
 8003986:	1c18      	adds	r0, r3, #0
 8003988:	f7fc fca6 	bl	80002d8 <__aeabi_fcmpeq>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d001      	beq.n	8003994 <init_cricket+0x44>
 8003990:	2300      	movs	r3, #0
 8003992:	1c1c      	adds	r4, r3, #0
 8003994:	b2e2      	uxtb	r2, r4
 8003996:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <init_cricket+0x110>)
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e001      	b.n	80039a0 <init_cricket+0x50>
		    } else
		      restart_stm32();
 800399c:	f7ff ffc6 	bl	800392c <restart_stm32>
		    if (fn_CheckSim) {
 80039a0:	4b2f      	ldr	r3, [pc, #188]	; (8003a60 <init_cricket+0x110>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <init_cricket+0x6a>
		      fn_Enable_MQTT = enable_mqtt_on_gsm_modem();
 80039a8:	f7ff fb92 	bl	80030d0 <enable_mqtt_on_gsm_modem>
 80039ac:	0003      	movs	r3, r0
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	4193      	sbcs	r3, r2
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <init_cricket+0x114>)
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	e001      	b.n	80039be <init_cricket+0x6e>
		    } else
		      restart_stm32();
 80039ba:	f7ff ffb7 	bl	800392c <restart_stm32>
		    if (fn_Enable_MQTT) {
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <init_cricket+0x114>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <init_cricket+0x86>
		      fn_Acquier_MQTT = acquire_gsm_mqtt_client();
 80039c6:	f7ff fbb9 	bl	800313c <acquire_gsm_mqtt_client>
 80039ca:	0003      	movs	r3, r0
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	4193      	sbcs	r3, r2
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <init_cricket+0x118>)
 80039d4:	701a      	strb	r2, [r3, #0]
		    }
		    if (fn_Acquier_MQTT) {
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <init_cricket+0x118>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <init_cricket+0x9e>
		      fn_Connect_MQTT = connect_mqtt_server_by_gsm();
 80039de:	f7ff fc29 	bl	8003234 <connect_mqtt_server_by_gsm>
 80039e2:	0003      	movs	r3, r0
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	4193      	sbcs	r3, r2
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <init_cricket+0x11c>)
 80039ec:	701a      	strb	r2, [r3, #0]
		    }
		    if (fn_Connect_MQTT) {
 80039ee:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <init_cricket+0x11c>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01f      	beq.n	8003a36 <init_cricket+0xe6>
		      fn_Subcribe_MQTT = subscribe_mqtt_via_gsm();
 80039f6:	f7ff fc9d 	bl	8003334 <subscribe_mqtt_via_gsm>
 80039fa:	0003      	movs	r3, r0
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	4193      	sbcs	r3, r2
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <init_cricket+0x120>)
 8003a04:	701a      	strb	r2, [r3, #0]
		      if (fn_Subcribe_MQTT) {
 8003a06:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <init_cricket+0x120>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d011      	beq.n	8003a32 <init_cricket+0xe2>
		        HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, GPIO_PIN_SET);
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4818      	ldr	r0, [pc, #96]	; (8003a74 <init_cricket+0x124>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	0019      	movs	r1, r3
 8003a18:	f001 fa1b 	bl	8004e52 <HAL_GPIO_WritePin>
		        ledStatus('G');
 8003a1c:	2047      	movs	r0, #71	; 0x47
 8003a1e:	f000 fa17 	bl	8003e50 <ledStatus>
		        isConnectMQTT = true;
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <init_cricket+0x128>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
		        inital_check = true;
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <init_cricket+0x12c>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
		        return 1;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00e      	b.n	8003a50 <init_cricket+0x100>
		      } else {
		        check_error_mqtt_via_gsm();
 8003a32:	f7ff fddb 	bl	80035ec <check_error_mqtt_via_gsm>
		        // isConnectedMQTT = false;
		      }
		    }
		    printf("-----------------Complete initial check ------------------");
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <init_cricket+0x130>)
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f004 f975 	bl	8007d28 <iprintf>
	for(int i=0;i<=3;i++)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3301      	adds	r3, #1
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	dd88      	ble.n	800395c <init_cricket+0xc>
		  }
	}
	restart_stm32();
 8003a4a:	f7ff ff6f 	bl	800392c <restart_stm32>
  return 0;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b003      	add	sp, #12
 8003a56:	bd90      	pop	{r4, r7, pc}
 8003a58:	0800a1f0 	.word	0x0800a1f0
 8003a5c:	200002e0 	.word	0x200002e0
 8003a60:	2000042a 	.word	0x2000042a
 8003a64:	20000428 	.word	0x20000428
 8003a68:	2000042d 	.word	0x2000042d
 8003a6c:	20000429 	.word	0x20000429
 8003a70:	2000042b 	.word	0x2000042b
 8003a74:	50000400 	.word	0x50000400
 8003a78:	20000420 	.word	0x20000420
 8003a7c:	200000f3 	.word	0x200000f3
 8003a80:	0800a228 	.word	0x0800a228

08003a84 <event_wait_function>:
int event_wait_function(void) {
 8003a84:	b5b0      	push	{r4, r5, r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  previousTick = HAL_GetTick();
 8003a88:	f000 feb4 	bl	80047f4 <HAL_GetTick>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	001a      	movs	r2, r3
 8003a90:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <event_wait_function+0x64>)
 8003a92:	601a      	str	r2, [r3, #0]
  while (inital_check == 0 && previousTick + timeout_pb_done > HAL_GetTick()) {
 8003a94:	e00c      	b.n	8003ab0 <event_wait_function+0x2c>
    if (strstr((char *)rx_data_sim, "PB DONE")) {
 8003a96:	4a15      	ldr	r2, [pc, #84]	; (8003aec <event_wait_function+0x68>)
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <event_wait_function+0x6c>)
 8003a9a:	0011      	movs	r1, r2
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f004 faf7 	bl	8008090 <strstr>
 8003aa2:	1e03      	subs	r3, r0, #0
 8003aa4:	d004      	beq.n	8003ab0 <event_wait_function+0x2c>
      // isPBDONE = 1;
    	ledStatus('B');
 8003aa6:	2042      	movs	r0, #66	; 0x42
 8003aa8:	f000 f9d2 	bl	8003e50 <ledStatus>
      return 1;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e018      	b.n	8003ae2 <event_wait_function+0x5e>
  while (inital_check == 0 && previousTick + timeout_pb_done > HAL_GetTick()) {
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <event_wait_function+0x70>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4053      	eors	r3, r2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <event_wait_function+0x50>
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <event_wait_function+0x64>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <event_wait_function+0x74>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	18d3      	adds	r3, r2, r3
 8003ac8:	001c      	movs	r4, r3
 8003aca:	f000 fe93 	bl	80047f4 <HAL_GetTick>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	429c      	cmp	r4, r3
 8003ad2:	d8e0      	bhi.n	8003a96 <event_wait_function+0x12>
		HAL_Delay(8000);
		return 1;
	}
#endif
  }
  if (isConnectSimcomA76xx == 0) {
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <event_wait_function+0x78>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <event_wait_function+0x5c>
    NVIC_SystemReset();
 8003adc:	f7ff f9ae 	bl	8002e3c <__NVIC_SystemReset>
  }

  return 0;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ae8:	20000418 	.word	0x20000418
 8003aec:	0800a264 	.word	0x0800a264
 8003af0:	20000380 	.word	0x20000380
 8003af4:	200000f3 	.word	0x200000f3
 8003af8:	2000000c 	.word	0x2000000c
 8003afc:	2000041c 	.word	0x2000041c

08003b00 <sendingToSimcomA76xx>:
#include <math.h>
extern UART_HandleTypeDef huart1;
char array_json[150];
// float Percentage_battery;

void sendingToSimcomA76xx(char *cmd) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  printf("STM32 Write: %s", cmd);
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <sendingToSimcomA76xx+0x34>)
 8003b0c:	0011      	movs	r1, r2
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f004 f90a 	bl	8007d28 <iprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7fc faf6 	bl	8000108 <strlen>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	23fa      	movs	r3, #250	; 0xfa
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4804      	ldr	r0, [pc, #16]	; (8003b38 <sendingToSimcomA76xx+0x38>)
 8003b28:	f002 fb96 	bl	8006258 <HAL_UART_Transmit>
}
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b002      	add	sp, #8
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	0800a26c 	.word	0x0800a26c
 8003b38:	200001e8 	.word	0x200001e8

08003b3c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	000a      	movs	r2, r1
 8003b46:	1cbb      	adds	r3, r7, #2
 8003b48:	801a      	strh	r2, [r3, #0]
  if (huart->Instance == USART1) {
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a62      	ldr	r2, [pc, #392]	; (8003cd8 <HAL_UARTEx_RxEventCallback+0x19c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d000      	beq.n	8003b56 <HAL_UARTEx_RxEventCallback+0x1a>
 8003b54:	e0b6      	b.n	8003cc4 <HAL_UARTEx_RxEventCallback+0x188>
    printf("\r\nSIMCOM Response:");
 8003b56:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <HAL_UARTEx_RxEventCallback+0x1a0>)
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f004 f8e5 	bl	8007d28 <iprintf>
    printf(rxBuffer);
 8003b5e:	4b60      	ldr	r3, [pc, #384]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003b60:	0018      	movs	r0, r3
 8003b62:	f004 f8e1 	bl	8007d28 <iprintf>
    static int times;
    times = strlen(rxBuffer);
 8003b66:	4b5e      	ldr	r3, [pc, #376]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7fc facd 	bl	8000108 <strlen>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	001a      	movs	r2, r3
 8003b72:	4b5c      	ldr	r3, [pc, #368]	; (8003ce4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003b74:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < times; i++) {
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e085      	b.n	8003c88 <HAL_UARTEx_RxEventCallback+0x14c>
      rx_data_sim[i] = rxBuffer[i];
 8003b7c:	4a58      	ldr	r2, [pc, #352]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	18d3      	adds	r3, r2, r3
 8003b82:	7819      	ldrb	r1, [r3, #0]
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	18d3      	adds	r3, r2, r3
 8003b8a:	1c0a      	adds	r2, r1, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
      if ((char)rxBuffer[i] == (char)SERIAL_NUMBER[5] && (char)rxBuffer[i + 1] == (char)SERIAL_NUMBER[6] && (char)rxBuffer[i + 2] == (char)SERIAL_NUMBER[7]) {
 8003b8e:	4a54      	ldr	r2, [pc, #336]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	18d3      	adds	r3, r2, r3
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2232      	movs	r2, #50	; 0x32
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d000      	beq.n	8003b9e <HAL_UARTEx_RxEventCallback+0x62>
 8003b9c:	e071      	b.n	8003c82 <HAL_UARTEx_RxEventCallback+0x146>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	4a4f      	ldr	r2, [pc, #316]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003ba4:	5cd3      	ldrb	r3, [r2, r3]
 8003ba6:	2230      	movs	r2, #48	; 0x30
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d16a      	bne.n	8003c82 <HAL_UARTEx_RxEventCallback+0x146>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3302      	adds	r3, #2
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003bb2:	5cd3      	ldrb	r3, [r2, r3]
 8003bb4:	2230      	movs	r2, #48	; 0x30
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d163      	bne.n	8003c82 <HAL_UARTEx_RxEventCallback+0x146>
        payLoadPin = (rxBuffer[i + 4] - 48);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	4a48      	ldr	r2, [pc, #288]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	3b30      	subs	r3, #48	; 0x30
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	4b49      	ldr	r3, [pc, #292]	; (8003cec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8003bc8:	601a      	str	r2, [r3, #0]
#if SIMCOM_MODEL == a7672
        if (rxBuffer[(i + 29)] == 49 && isPBDONE == true)
#elif SIMCOM_MODEL == a7670
        if (rxBuffer[(i + 31)] == 49 && isPBDONE == true)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	331f      	adds	r3, #31
 8003bce:	4a44      	ldr	r2, [pc, #272]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003bd0:	5cd3      	ldrb	r3, [r2, r3]
 8003bd2:	2b31      	cmp	r3, #49	; 0x31
 8003bd4:	d127      	bne.n	8003c26 <HAL_UARTEx_RxEventCallback+0xea>
 8003bd6:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d123      	bne.n	8003c26 <HAL_UARTEx_RxEventCallback+0xea>
#elif  SIMCOM_MODEL == a7677
        if (rxBuffer[(i + 29)] == 49 && isPBDONE == true)
#endif
        {
          printf("-----------ON RELAY %d -----------\r\n", payLoadPin);
 8003bde:	4b43      	ldr	r3, [pc, #268]	; (8003cec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f004 f89e 	bl	8007d28 <iprintf>
          HAL_GPIO_WritePin(GPIO_LOAD_PORT[payLoadPin - 1], GPIO_LOAD_PIN[payLoadPin - 1], 1);
 8003bec:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1e5a      	subs	r2, r3, #1
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003bf4:	0092      	lsls	r2, r2, #2
 8003bf6:	58d0      	ldr	r0, [r2, r3]
 8003bf8:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <HAL_UARTEx_RxEventCallback+0x1c0>)
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	58d3      	ldr	r3, [r2, r3]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2201      	movs	r2, #1
 8003c08:	0019      	movs	r1, r3
 8003c0a:	f001 f922 	bl	8004e52 <HAL_GPIO_WritePin>
          onReay++;
 8003c0e:	4b3c      	ldr	r3, [pc, #240]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8003c16:	601a      	str	r2, [r3, #0]
          if (onReay >= NUMBER_LOADS) {
 8003c18:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b07      	cmp	r3, #7
 8003c1e:	dd02      	ble.n	8003c26 <HAL_UARTEx_RxEventCallback+0xea>
            onReay = NUMBER_LOADS;
 8003c20:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8003c22:	2208      	movs	r2, #8
 8003c24:	601a      	str	r2, [r3, #0]
          //HAL_GPIO_WritePin(ON_OFF_PWM_GPIO_Port, ON_OFF_PWM_Pin, 0);
        }
#if SIMCOM_MODEL == a7672
        if (rxBuffer[(i + 29)] == 48 && isPBDONE == true)
#elif SIMCOM_MODEL == a7670
        if (rxBuffer[(i + 31)] == 48 && isPBDONE == true)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	331f      	adds	r3, #31
 8003c2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	2b30      	cmp	r3, #48	; 0x30
 8003c30:	d127      	bne.n	8003c82 <HAL_UARTEx_RxEventCallback+0x146>
 8003c32:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d123      	bne.n	8003c82 <HAL_UARTEx_RxEventCallback+0x146>
#elif SIMCOM_MODEL == a7677
        if (rxBuffer[(i + 29)] == 48 && isPBDONE == true)
#endif
        {
          printf("-----------OFF RELAY %d -----------\r\n", payLoadPin);
 8003c3a:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8003c40:	0011      	movs	r1, r2
 8003c42:	0018      	movs	r0, r3
 8003c44:	f004 f870 	bl	8007d28 <iprintf>
          HAL_GPIO_WritePin(GPIO_LOAD_PORT[payLoadPin - 1], GPIO_LOAD_PIN[payLoadPin - 1], 0);
 8003c48:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1e5a      	subs	r2, r3, #1
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003c50:	0092      	lsls	r2, r2, #2
 8003c52:	58d0      	ldr	r0, [r2, r3]
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	1e5a      	subs	r2, r3, #1
 8003c5a:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_UARTEx_RxEventCallback+0x1c0>)
 8003c5c:	0092      	lsls	r2, r2, #2
 8003c5e:	58d3      	ldr	r3, [r2, r3]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2200      	movs	r2, #0
 8003c64:	0019      	movs	r1, r3
 8003c66:	f001 f8f4 	bl	8004e52 <HAL_GPIO_WritePin>
          onReay--;
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	1e5a      	subs	r2, r3, #1
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8003c72:	601a      	str	r2, [r3, #0]
          if (onReay <= 0) {
 8003c74:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	dc02      	bgt.n	8003c82 <HAL_UARTEx_RxEventCallback+0x146>
            onReay = 0;
 8003c7c:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < times; i++) {
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	da00      	bge.n	8003c94 <HAL_UARTEx_RxEventCallback+0x158>
 8003c92:	e773      	b.n	8003b7c <HAL_UARTEx_RxEventCallback+0x40>
            //HAL_GPIO_WritePin(ON_OFF_PWM_GPIO_Port, ON_OFF_PWM_Pin, 1);
          }
        }
      }
    }
    if ((strstr((char *)rxBuffer, "+CMQTTCONNLOST") != NULL) && isPBDONE == true) {
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003c98:	0011      	movs	r1, r2
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f004 f9f8 	bl	8008090 <strstr>
 8003ca0:	1e03      	subs	r3, r0, #0
 8003ca2:	d009      	beq.n	8003cb8 <HAL_UARTEx_RxEventCallback+0x17c>
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d105      	bne.n	8003cb8 <HAL_UARTEx_RxEventCallback+0x17c>
      printf("-----------------Client Disconnect passively!------------------\n");
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <HAL_UARTEx_RxEventCallback+0x1d0>)
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f004 f8a0 	bl	8007df4 <puts>
      check_error_mqtt_via_gsm();
 8003cb4:	f7ff fc9a 	bl	80035ec <check_error_mqtt_via_gsm>
    }
    memset(rxBuffer, '\0', 150);
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003cba:	2296      	movs	r2, #150	; 0x96
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f004 f9de 	bl	8008080 <memset>
  }
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)rxBuffer, 150);
 8003cc4:	4906      	ldr	r1, [pc, #24]	; (8003ce0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8003cc8:	2296      	movs	r2, #150	; 0x96
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f003 fdfe 	bl	80078cc <HAL_UARTEx_ReceiveToIdle_IT>
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	0800a27c 	.word	0x0800a27c
 8003ce0:	200002e8 	.word	0x200002e8
 8003ce4:	20000190 	.word	0x20000190
 8003ce8:	20000380 	.word	0x20000380
 8003cec:	200002e4 	.word	0x200002e4
 8003cf0:	200002e0 	.word	0x200002e0
 8003cf4:	0800a290 	.word	0x0800a290
 8003cf8:	20000010 	.word	0x20000010
 8003cfc:	20000038 	.word	0x20000038
 8003d00:	200002dc 	.word	0x200002dc
 8003d04:	0800a2b8 	.word	0x0800a2b8
 8003d08:	0800a2e0 	.word	0x0800a2e0
 8003d0c:	0800a2f0 	.word	0x0800a2f0
 8003d10:	200001e8 	.word	0x200001e8

08003d14 <create_JSON>:
void create_JSON(void) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
  cJSON *json = cJSON_CreateObject();
 8003d1a:	f7ff f879 	bl	8002e10 <cJSON_CreateObject>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	60bb      	str	r3, [r7, #8]
  for (int i = 1; i < NUMBER_LOADS + 1; i++) {
 8003d22:	2301      	movs	r3, #1
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	e021      	b.n	8003d6c <create_JSON+0x58>
    int statusOfLoad;
    statusOfLoad = HAL_GPIO_ReadPin(GPIO_LOAD_PORT[i - 1], GPIO_LOAD_PIN[i - 1]);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e5a      	subs	r2, r3, #1
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <create_JSON+0xbc>)
 8003d2e:	0092      	lsls	r2, r2, #2
 8003d30:	58d0      	ldr	r0, [r2, r3]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1e5a      	subs	r2, r3, #1
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <create_JSON+0xc0>)
 8003d38:	0092      	lsls	r2, r2, #2
 8003d3a:	58d3      	ldr	r3, [r2, r3]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	0019      	movs	r1, r3
 8003d40:	f001 f86a 	bl	8004e18 <HAL_GPIO_ReadPin>
 8003d44:	0003      	movs	r3, r0
 8003d46:	603b      	str	r3, [r7, #0]
    static char payload1[2];
    sprintf(payload1, "%d", i);
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4923      	ldr	r1, [pc, #140]	; (8003dd8 <create_JSON+0xc4>)
 8003d4c:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <create_JSON+0xc8>)
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f004 f85a 	bl	8007e08 <siprintf>
    cJSON_AddNumberToObject(json, payload1, statusOfLoad);
 8003d54:	6838      	ldr	r0, [r7, #0]
 8003d56:	f7fe f80d 	bl	8001d74 <__aeabi_i2d>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	000b      	movs	r3, r1
 8003d5e:	491f      	ldr	r1, [pc, #124]	; (8003ddc <create_JSON+0xc8>)
 8003d60:	68b8      	ldr	r0, [r7, #8]
 8003d62:	f7fe ffe9 	bl	8002d38 <cJSON_AddNumberToObject>
  for (int i = 1; i < NUMBER_LOADS + 1; i++) {
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	ddda      	ble.n	8003d28 <create_JSON+0x14>
  }
//  Data_Percentage_pin = Level_Pin();
//  rssi = read_signal_quality();
  cJSON_AddNumberToObject(json, "_gsm_signal_strength", rssi);
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <create_JSON+0xcc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7fd fffc 	bl	8001d74 <__aeabi_i2d>
 8003d7c:	0002      	movs	r2, r0
 8003d7e:	000b      	movs	r3, r1
 8003d80:	4918      	ldr	r1, [pc, #96]	; (8003de4 <create_JSON+0xd0>)
 8003d82:	68b8      	ldr	r0, [r7, #8]
 8003d84:	f7fe ffd8 	bl	8002d38 <cJSON_AddNumberToObject>
//  cJSON_AddNumberToObject(json, "_battery_level", Data_Percentage_pin);
  char *json_string = cJSON_Print(json);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7fe fc9a 	bl	80026c4 <cJSON_Print>
 8003d90:	0003      	movs	r3, r0
 8003d92:	607b      	str	r3, [r7, #4]
  if (json_string == NULL) {
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d108      	bne.n	8003dac <create_JSON+0x98>
    printf("New create error JSON\n");
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <create_JSON+0xd4>)
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f004 f829 	bl	8007df4 <puts>
    cJSON_Delete(json);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7fe f883 	bl	8001eb0 <cJSON_Delete>
    return;
 8003daa:	e00d      	b.n	8003dc8 <create_JSON+0xb4>
  }
  sprintf(array_json, "%s", json_string);
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	490f      	ldr	r1, [pc, #60]	; (8003dec <create_JSON+0xd8>)
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <create_JSON+0xdc>)
 8003db2:	0018      	movs	r0, r3
 8003db4:	f004 f828 	bl	8007e08 <siprintf>
  // decompress memory
  free(json_string);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f003 fdf8 	bl	80079b0 <free>
  cJSON_Delete(json);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7fe f874 	bl	8001eb0 <cJSON_Delete>
}
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20000010 	.word	0x20000010
 8003dd4:	20000038 	.word	0x20000038
 8003dd8:	0800a330 	.word	0x0800a330
 8003ddc:	20000194 	.word	0x20000194
 8003de0:	20000060 	.word	0x20000060
 8003de4:	0800a334 	.word	0x0800a334
 8003de8:	0800a34c 	.word	0x0800a34c
 8003dec:	0800a364 	.word	0x0800a364
 8003df0:	200000f8 	.word	0x200000f8

08003df4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim6.Instance) {
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d10e      	bne.n	8003e26 <HAL_TIM_PeriodElapsedCallback+0x32>
    if (isConnectMQTT) {
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <HAL_TIM_PeriodElapsedCallback+0x2c>
      update_status_to_server = 1;
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
      update_10_minute++;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e1e:	601a      	str	r2, [r3, #0]
    }
    IWDG->KR = 0xAAAA;
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003e24:	601a      	str	r2, [r3, #0]
  }
  HAL_TIM_Base_Start_IT(&htim6);
 8003e26:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f001 ffab 	bl	8005d84 <HAL_TIM_Base_Start_IT>
}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b002      	add	sp, #8
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	200001a8 	.word	0x200001a8
 8003e3c:	20000420 	.word	0x20000420
 8003e40:	20000424 	.word	0x20000424
 8003e44:	200002d8 	.word	0x200002d8
 8003e48:	40003000 	.word	0x40003000
 8003e4c:	0000aaaa 	.word	0x0000aaaa

08003e50 <ledStatus>:
void ledStatus(char cmd){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	0002      	movs	r2, r0
 8003e58:	1dfb      	adds	r3, r7, #7
 8003e5a:	701a      	strb	r2, [r3, #0]
	if(cmd == 'R'){
 8003e5c:	1dfb      	adds	r3, r7, #7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b52      	cmp	r3, #82	; 0x52
 8003e62:	d112      	bne.n	8003e8a <ledStatus+0x3a>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <ledStatus+0xcc>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	2120      	movs	r1, #32
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 fff1 	bl	8004e52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8003e70:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <ledStatus+0xd0>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	2104      	movs	r1, #4
 8003e76:	0018      	movs	r0, r3
 8003e78:	f000 ffeb 	bl	8004e52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8003e7c:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <ledStatus+0xd0>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2101      	movs	r1, #1
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 ffe5 	bl	8004e52 <HAL_GPIO_WritePin>
	else if(cmd == 'W'){
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
	}
}
 8003e88:	e043      	b.n	8003f12 <ledStatus+0xc2>
	else if(cmd == 'B'){
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b42      	cmp	r3, #66	; 0x42
 8003e90:	d112      	bne.n	8003eb8 <ledStatus+0x68>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <ledStatus+0xcc>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	2120      	movs	r1, #32
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f000 ffda 	bl	8004e52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <ledStatus+0xd0>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 ffd4 	bl	8004e52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <ledStatus+0xd0>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	2101      	movs	r1, #1
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 ffce 	bl	8004e52 <HAL_GPIO_WritePin>
}
 8003eb6:	e02c      	b.n	8003f12 <ledStatus+0xc2>
	else if(cmd == 'G'){
 8003eb8:	1dfb      	adds	r3, r7, #7
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b47      	cmp	r3, #71	; 0x47
 8003ebe:	d112      	bne.n	8003ee6 <ledStatus+0x96>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8003ec0:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <ledStatus+0xcc>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2120      	movs	r1, #32
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 ffc3 	bl	8004e52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <ledStatus+0xd0>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	2104      	movs	r1, #4
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 ffbd 	bl	8004e52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <ledStatus+0xd0>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	2101      	movs	r1, #1
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 ffb7 	bl	8004e52 <HAL_GPIO_WritePin>
}
 8003ee4:	e015      	b.n	8003f12 <ledStatus+0xc2>
	else if(cmd == 'W'){
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b57      	cmp	r3, #87	; 0x57
 8003eec:	d111      	bne.n	8003f12 <ledStatus+0xc2>
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <ledStatus+0xcc>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2120      	movs	r1, #32
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f000 ffac 	bl	8004e52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <ledStatus+0xd0>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	2104      	movs	r1, #4
 8003f00:	0018      	movs	r0, r3
 8003f02:	f000 ffa6 	bl	8004e52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <ledStatus+0xd0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f000 ffa0 	bl	8004e52 <HAL_GPIO_WritePin>
}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b002      	add	sp, #8
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	50000800 	.word	0x50000800
 8003f20:	50000400 	.word	0x50000400

08003f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f28:	f000 fbfe 	bl	8004728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f2c:	f000 f85c 	bl	8003fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f30:	f000 f95c 	bl	80041ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003f34:	f000 f92a 	bl	800418c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003f38:	f000 f8ea 	bl	8004110 <MX_TIM6_Init>
  MX_IWDG_Init();
 8003f3c:	f000 f8c8 	bl	80040d0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  printf("-----Welcome to Agriconnect-----\n");
 8003f40:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <main+0x98>)
 8003f42:	0018      	movs	r0, r3
 8003f44:	f003 ff56 	bl	8007df4 <puts>
  printf("-----Hello Cricket-----\n");
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <main+0x9c>)
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f003 ff52 	bl	8007df4 <puts>
#if SAVE_LOAD
    read_flash_payload();
#endif

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)rxBuffer, 150);
 8003f50:	491c      	ldr	r1, [pc, #112]	; (8003fc4 <main+0xa0>)
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <main+0xa4>)
 8003f54:	2296      	movs	r2, #150	; 0x96
 8003f56:	0018      	movs	r0, r3
 8003f58:	f003 fcb8 	bl	80078cc <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <main+0xa8>)
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f001 ff10 	bl	8005d84 <HAL_TIM_Base_Start_IT>
  turnOnA76XX();
 8003f64:	f000 fa00 	bl	8004368 <turnOnA76XX>
  isPBDONE = event_wait_function();
 8003f68:	f7ff fd8c 	bl	8003a84 <event_wait_function>
 8003f6c:	0002      	movs	r2, r0
 8003f6e:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <main+0xac>)
 8003f70:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (!isConnectMQTT) {
 8003f72:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <main+0xb0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d104      	bne.n	8003f84 <main+0x60>
      isConnectMQTT = init_cricket();
 8003f7a:	f7ff fce9 	bl	8003950 <init_cricket>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <main+0xb0>)
 8003f82:	601a      	str	r2, [r3, #0]
    }
    if (update_status_to_server == 1) {
 8003f84:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <main+0xb4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10a      	bne.n	8003fa2 <main+0x7e>
        fn_update_status = update_status();
 8003f8c:	f7ff fc76 	bl	800387c <update_status>
 8003f90:	0003      	movs	r3, r0
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	4193      	sbcs	r3, r2
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <main+0xb8>)
 8003f9a:	701a      	strb	r2, [r3, #0]
        update_status_to_server = 0;
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <main+0xb4>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
    }
    if(update_10_minute>=3)
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <main+0xbc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	dde3      	ble.n	8003f72 <main+0x4e>
    {
	  //Data_Percentage_pin = Level_Pin();
	  rssi = read_signal_quality();
 8003faa:	f7fe ff59 	bl	8002e60 <read_signal_quality>
 8003fae:	0002      	movs	r2, r0
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <main+0xc0>)
 8003fb2:	601a      	str	r2, [r3, #0]
#if SAVE_LOAD
    	read_statusload();
#endif
    	update_10_minute=0;
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <main+0xbc>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
    if (!isConnectMQTT) {
 8003fba:	e7da      	b.n	8003f72 <main+0x4e>
 8003fbc:	0800a368 	.word	0x0800a368
 8003fc0:	0800a38c 	.word	0x0800a38c
 8003fc4:	200002e8 	.word	0x200002e8
 8003fc8:	200001e8 	.word	0x200001e8
 8003fcc:	200001a8 	.word	0x200001a8
 8003fd0:	200002e0 	.word	0x200002e0
 8003fd4:	20000420 	.word	0x20000420
 8003fd8:	20000424 	.word	0x20000424
 8003fdc:	2000042e 	.word	0x2000042e
 8003fe0:	200002d8 	.word	0x200002d8
 8003fe4:	20000060 	.word	0x20000060

08003fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b09b      	sub	sp, #108	; 0x6c
 8003fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fee:	2434      	movs	r4, #52	; 0x34
 8003ff0:	193b      	adds	r3, r7, r4
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	2334      	movs	r3, #52	; 0x34
 8003ff6:	001a      	movs	r2, r3
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	f004 f841 	bl	8008080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ffe:	2320      	movs	r3, #32
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	0018      	movs	r0, r3
 8004004:	2314      	movs	r3, #20
 8004006:	001a      	movs	r2, r3
 8004008:	2100      	movs	r1, #0
 800400a:	f004 f839 	bl	8008080 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800400e:	003b      	movs	r3, r7
 8004010:	0018      	movs	r0, r3
 8004012:	2320      	movs	r3, #32
 8004014:	001a      	movs	r2, r3
 8004016:	2100      	movs	r1, #0
 8004018:	f004 f832 	bl	8008080 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800401c:	4b2a      	ldr	r3, [pc, #168]	; (80040c8 <SystemClock_Config+0xe0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2a      	ldr	r2, [pc, #168]	; (80040cc <SystemClock_Config+0xe4>)
 8004022:	401a      	ands	r2, r3
 8004024:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <SystemClock_Config+0xe0>)
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	0109      	lsls	r1, r1, #4
 800402a:	430a      	orrs	r2, r1
 800402c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800402e:	193b      	adds	r3, r7, r4
 8004030:	2209      	movs	r2, #9
 8004032:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004034:	193b      	adds	r3, r7, r4
 8004036:	2280      	movs	r2, #128	; 0x80
 8004038:	0252      	lsls	r2, r2, #9
 800403a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800403c:	0021      	movs	r1, r4
 800403e:	187b      	adds	r3, r7, r1
 8004040:	2201      	movs	r2, #1
 8004042:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004044:	187b      	adds	r3, r7, r1
 8004046:	2202      	movs	r2, #2
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800404a:	187b      	adds	r3, r7, r1
 800404c:	2280      	movs	r2, #128	; 0x80
 800404e:	0252      	lsls	r2, r2, #9
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8004052:	187b      	adds	r3, r7, r1
 8004054:	22c0      	movs	r2, #192	; 0xc0
 8004056:	0312      	lsls	r2, r2, #12
 8004058:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800405a:	187b      	adds	r3, r7, r1
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	03d2      	lsls	r2, r2, #15
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004062:	187b      	adds	r3, r7, r1
 8004064:	0018      	movs	r0, r3
 8004066:	f000 ff63 	bl	8004f30 <HAL_RCC_OscConfig>
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d001      	beq.n	8004072 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800406e:	f000 f9b5 	bl	80043dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004072:	2120      	movs	r1, #32
 8004074:	187b      	adds	r3, r7, r1
 8004076:	220f      	movs	r2, #15
 8004078:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800407a:	187b      	adds	r3, r7, r1
 800407c:	2203      	movs	r2, #3
 800407e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004080:	187b      	adds	r3, r7, r1
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004086:	187b      	adds	r3, r7, r1
 8004088:	2200      	movs	r2, #0
 800408a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800408c:	187b      	adds	r3, r7, r1
 800408e:	2200      	movs	r2, #0
 8004090:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004092:	187b      	adds	r3, r7, r1
 8004094:	2101      	movs	r1, #1
 8004096:	0018      	movs	r0, r3
 8004098:	f001 fac6 	bl	8005628 <HAL_RCC_ClockConfig>
 800409c:	1e03      	subs	r3, r0, #0
 800409e:	d001      	beq.n	80040a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80040a0:	f000 f99c 	bl	80043dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040a4:	003b      	movs	r3, r7
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040aa:	003b      	movs	r3, r7
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040b0:	003b      	movs	r3, r7
 80040b2:	0018      	movs	r0, r3
 80040b4:	f001 fcdc 	bl	8005a70 <HAL_RCCEx_PeriphCLKConfig>
 80040b8:	1e03      	subs	r3, r0, #0
 80040ba:	d001      	beq.n	80040c0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80040bc:	f000 f98e 	bl	80043dc <Error_Handler>
  }
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b01b      	add	sp, #108	; 0x6c
 80040c6:	bd90      	pop	{r4, r7, pc}
 80040c8:	40007000 	.word	0x40007000
 80040cc:	ffffe7ff 	.word	0xffffe7ff

080040d0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <MX_IWDG_Init+0x34>)
 80040d6:	4a0c      	ldr	r2, [pc, #48]	; (8004108 <MX_IWDG_Init+0x38>)
 80040d8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <MX_IWDG_Init+0x34>)
 80040dc:	2206      	movs	r2, #6
 80040de:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80040e0:	4b08      	ldr	r3, [pc, #32]	; (8004104 <MX_IWDG_Init+0x34>)
 80040e2:	4a0a      	ldr	r2, [pc, #40]	; (800410c <MX_IWDG_Init+0x3c>)
 80040e4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <MX_IWDG_Init+0x34>)
 80040e8:	4a08      	ldr	r2, [pc, #32]	; (800410c <MX_IWDG_Init+0x3c>)
 80040ea:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <MX_IWDG_Init+0x34>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 fecc 	bl	8004e8c <HAL_IWDG_Init>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d001      	beq.n	80040fc <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80040f8:	f000 f970 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	20000198 	.word	0x20000198
 8004108:	40003000 	.word	0x40003000
 800410c:	00000fff 	.word	0x00000fff

08004110 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004116:	003b      	movs	r3, r7
 8004118:	0018      	movs	r0, r3
 800411a:	2308      	movs	r3, #8
 800411c:	001a      	movs	r2, r3
 800411e:	2100      	movs	r1, #0
 8004120:	f003 ffae 	bl	8008080 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004124:	4b15      	ldr	r3, [pc, #84]	; (800417c <MX_TIM6_Init+0x6c>)
 8004126:	4a16      	ldr	r2, [pc, #88]	; (8004180 <MX_TIM6_Init+0x70>)
 8004128:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 800412a:	4b14      	ldr	r3, [pc, #80]	; (800417c <MX_TIM6_Init+0x6c>)
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <MX_TIM6_Init+0x74>)
 800412e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <MX_TIM6_Init+0x6c>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <MX_TIM6_Init+0x6c>)
 8004138:	4a13      	ldr	r2, [pc, #76]	; (8004188 <MX_TIM6_Init+0x78>)
 800413a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <MX_TIM6_Init+0x6c>)
 800413e:	2200      	movs	r2, #0
 8004140:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <MX_TIM6_Init+0x6c>)
 8004144:	0018      	movs	r0, r3
 8004146:	f001 fddd 	bl	8005d04 <HAL_TIM_Base_Init>
 800414a:	1e03      	subs	r3, r0, #0
 800414c:	d001      	beq.n	8004152 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800414e:	f000 f945 	bl	80043dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004152:	003b      	movs	r3, r7
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004158:	003b      	movs	r3, r7
 800415a:	2200      	movs	r2, #0
 800415c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800415e:	003a      	movs	r2, r7
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <MX_TIM6_Init+0x6c>)
 8004162:	0011      	movs	r1, r2
 8004164:	0018      	movs	r0, r3
 8004166:	f001 ffc5 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d001      	beq.n	8004172 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800416e:	f000 f935 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b002      	add	sp, #8
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	200001a8 	.word	0x200001a8
 8004180:	40001000 	.word	0x40001000
 8004184:	00007cff 	.word	0x00007cff
 8004188:	00001387 	.word	0x00001387

0800418c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 8004192:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <MX_USART1_UART_Init+0x5c>)
 8004194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004196:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 8004198:	22e1      	movs	r2, #225	; 0xe1
 800419a:	0252      	lsls	r2, r2, #9
 800419c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800419e:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 80041b2:	220c      	movs	r2, #12
 80041b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 80041be:	2200      	movs	r2, #0
 80041c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <MX_USART1_UART_Init+0x58>)
 80041d0:	0018      	movs	r0, r3
 80041d2:	f001 ffed 	bl	80061b0 <HAL_UART_Init>
 80041d6:	1e03      	subs	r3, r0, #0
 80041d8:	d001      	beq.n	80041de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80041da:	f000 f8ff 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200001e8 	.word	0x200001e8
 80041e8:	40013800 	.word	0x40013800

080041ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b08b      	sub	sp, #44	; 0x2c
 80041f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f2:	2414      	movs	r4, #20
 80041f4:	193b      	adds	r3, r7, r4
 80041f6:	0018      	movs	r0, r3
 80041f8:	2314      	movs	r3, #20
 80041fa:	001a      	movs	r2, r3
 80041fc:	2100      	movs	r1, #0
 80041fe:	f003 ff3f 	bl	8008080 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004202:	4b54      	ldr	r3, [pc, #336]	; (8004354 <MX_GPIO_Init+0x168>)
 8004204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004206:	4b53      	ldr	r3, [pc, #332]	; (8004354 <MX_GPIO_Init+0x168>)
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	430a      	orrs	r2, r1
 800420c:	62da      	str	r2, [r3, #44]	; 0x2c
 800420e:	4b51      	ldr	r3, [pc, #324]	; (8004354 <MX_GPIO_Init+0x168>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	2280      	movs	r2, #128	; 0x80
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	4b4e      	ldr	r3, [pc, #312]	; (8004354 <MX_GPIO_Init+0x168>)
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	4b4d      	ldr	r3, [pc, #308]	; (8004354 <MX_GPIO_Init+0x168>)
 8004220:	2104      	movs	r1, #4
 8004222:	430a      	orrs	r2, r1
 8004224:	62da      	str	r2, [r3, #44]	; 0x2c
 8004226:	4b4b      	ldr	r3, [pc, #300]	; (8004354 <MX_GPIO_Init+0x168>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	2204      	movs	r2, #4
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004232:	4b48      	ldr	r3, [pc, #288]	; (8004354 <MX_GPIO_Init+0x168>)
 8004234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004236:	4b47      	ldr	r3, [pc, #284]	; (8004354 <MX_GPIO_Init+0x168>)
 8004238:	2102      	movs	r1, #2
 800423a:	430a      	orrs	r2, r1
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c
 800423e:	4b45      	ldr	r3, [pc, #276]	; (8004354 <MX_GPIO_Init+0x168>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	2202      	movs	r2, #2
 8004244:	4013      	ands	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800424a:	4b42      	ldr	r3, [pc, #264]	; (8004354 <MX_GPIO_Init+0x168>)
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	4b41      	ldr	r3, [pc, #260]	; (8004354 <MX_GPIO_Init+0x168>)
 8004250:	2101      	movs	r1, #1
 8004252:	430a      	orrs	r2, r1
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c
 8004256:	4b3f      	ldr	r3, [pc, #252]	; (8004354 <MX_GPIO_Init+0x168>)
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	2201      	movs	r2, #1
 800425c:	4013      	ands	r3, r2
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004262:	4b3c      	ldr	r3, [pc, #240]	; (8004354 <MX_GPIO_Init+0x168>)
 8004264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004266:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <MX_GPIO_Init+0x168>)
 8004268:	2108      	movs	r1, #8
 800426a:	430a      	orrs	r2, r1
 800426c:	62da      	str	r2, [r3, #44]	; 0x2c
 800426e:	4b39      	ldr	r3, [pc, #228]	; (8004354 <MX_GPIO_Init+0x168>)
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	2208      	movs	r2, #8
 8004274:	4013      	ands	r3, r2
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|PAYLOAD_2_Pin|PAYLOAD_3_Pin|PAYLOAD_4_Pin, GPIO_PIN_RESET);
 800427a:	23e1      	movs	r3, #225	; 0xe1
 800427c:	015b      	lsls	r3, r3, #5
 800427e:	4836      	ldr	r0, [pc, #216]	; (8004358 <MX_GPIO_Init+0x16c>)
 8004280:	2200      	movs	r2, #0
 8004282:	0019      	movs	r1, r3
 8004284:	f000 fde5 	bl	8004e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|A76XX_PWRKEY_Pin|LED_RED_Pin|GPIO_PIN_12
 8004288:	4934      	ldr	r1, [pc, #208]	; (800435c <MX_GPIO_Init+0x170>)
 800428a:	4b35      	ldr	r3, [pc, #212]	; (8004360 <MX_GPIO_Init+0x174>)
 800428c:	2200      	movs	r2, #0
 800428e:	0018      	movs	r0, r3
 8004290:	f000 fddf 	bl	8004e52 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|PAYLOAD_6_Pin|PAYLOAD_7_Pin|PAYLOAD_8_Pin
                          |PAYLOAD_9_Pin|PAYLOAD_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|PAYLOAD_1_Pin, GPIO_PIN_RESET);
 8004294:	2388      	movs	r3, #136	; 0x88
 8004296:	0219      	lsls	r1, r3, #8
 8004298:	23a0      	movs	r3, #160	; 0xa0
 800429a:	05db      	lsls	r3, r3, #23
 800429c:	2200      	movs	r2, #0
 800429e:	0018      	movs	r0, r3
 80042a0:	f000 fdd7 	bl	8004e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAYLOAD_5_GPIO_Port, PAYLOAD_5_Pin, GPIO_PIN_RESET);
 80042a4:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <MX_GPIO_Init+0x178>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	2104      	movs	r1, #4
 80042aa:	0018      	movs	r0, r3
 80042ac:	f000 fdd1 	bl	8004e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin PAYLOAD_2_Pin PAYLOAD_3_Pin PAYLOAD_4_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|PAYLOAD_2_Pin|PAYLOAD_3_Pin|PAYLOAD_4_Pin;
 80042b0:	193b      	adds	r3, r7, r4
 80042b2:	22e1      	movs	r2, #225	; 0xe1
 80042b4:	0152      	lsls	r2, r2, #5
 80042b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042b8:	193b      	adds	r3, r7, r4
 80042ba:	2201      	movs	r2, #1
 80042bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	193b      	adds	r3, r7, r4
 80042c0:	2200      	movs	r2, #0
 80042c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c4:	193b      	adds	r3, r7, r4
 80042c6:	2200      	movs	r2, #0
 80042c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ca:	193b      	adds	r3, r7, r4
 80042cc:	4a22      	ldr	r2, [pc, #136]	; (8004358 <MX_GPIO_Init+0x16c>)
 80042ce:	0019      	movs	r1, r3
 80042d0:	0010      	movs	r0, r2
 80042d2:	f000 fc23 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin A76XX_PWRKEY_Pin LED_RED_Pin PB12
                           PB14 PAYLOAD_6_Pin PAYLOAD_7_Pin PAYLOAD_8_Pin
                           PAYLOAD_9_Pin PAYLOAD_10_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|A76XX_PWRKEY_Pin|LED_RED_Pin|GPIO_PIN_12
 80042d6:	193b      	adds	r3, r7, r4
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <MX_GPIO_Init+0x170>)
 80042da:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|PAYLOAD_6_Pin|PAYLOAD_7_Pin|PAYLOAD_8_Pin
                          |PAYLOAD_9_Pin|PAYLOAD_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042dc:	193b      	adds	r3, r7, r4
 80042de:	2201      	movs	r2, #1
 80042e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e2:	193b      	adds	r3, r7, r4
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e8:	193b      	adds	r3, r7, r4
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ee:	193b      	adds	r3, r7, r4
 80042f0:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <MX_GPIO_Init+0x174>)
 80042f2:	0019      	movs	r1, r3
 80042f4:	0010      	movs	r0, r2
 80042f6:	f000 fc11 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin PAYLOAD_1_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|PAYLOAD_1_Pin;
 80042fa:	0021      	movs	r1, r4
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	2288      	movs	r2, #136	; 0x88
 8004300:	0212      	lsls	r2, r2, #8
 8004302:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004304:	000c      	movs	r4, r1
 8004306:	193b      	adds	r3, r7, r4
 8004308:	2201      	movs	r2, #1
 800430a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	193b      	adds	r3, r7, r4
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004312:	193b      	adds	r3, r7, r4
 8004314:	2200      	movs	r2, #0
 8004316:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004318:	193a      	adds	r2, r7, r4
 800431a:	23a0      	movs	r3, #160	; 0xa0
 800431c:	05db      	lsls	r3, r3, #23
 800431e:	0011      	movs	r1, r2
 8004320:	0018      	movs	r0, r3
 8004322:	f000 fbfb 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PAYLOAD_5_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_5_Pin;
 8004326:	0021      	movs	r1, r4
 8004328:	187b      	adds	r3, r7, r1
 800432a:	2204      	movs	r2, #4
 800432c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800432e:	187b      	adds	r3, r7, r1
 8004330:	2201      	movs	r2, #1
 8004332:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004334:	187b      	adds	r3, r7, r1
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433a:	187b      	adds	r3, r7, r1
 800433c:	2200      	movs	r2, #0
 800433e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PAYLOAD_5_GPIO_Port, &GPIO_InitStruct);
 8004340:	187b      	adds	r3, r7, r1
 8004342:	4a08      	ldr	r2, [pc, #32]	; (8004364 <MX_GPIO_Init+0x178>)
 8004344:	0019      	movs	r1, r3
 8004346:	0010      	movs	r0, r2
 8004348:	f000 fbe8 	bl	8004b1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b00b      	add	sp, #44	; 0x2c
 8004352:	bd90      	pop	{r4, r7, pc}
 8004354:	40021000 	.word	0x40021000
 8004358:	50000800 	.word	0x50000800
 800435c:	000050ff 	.word	0x000050ff
 8004360:	50000400 	.word	0x50000400
 8004364:	50000c00 	.word	0x50000c00

08004368 <turnOnA76XX>:

/* USER CODE BEGIN 4 */
void turnOnA76XX(void) {
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
	ledStatus('R');
 800436c:	2052      	movs	r0, #82	; 0x52
 800436e:	f7ff fd6f 	bl	8003e50 <ledStatus>
  printf("Enable SIMCOM\n");
 8004372:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <turnOnA76XX+0x68>)
 8004374:	0018      	movs	r0, r3
 8004376:	f003 fd3d 	bl	8007df4 <puts>
  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, SET);
 800437a:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <turnOnA76XX+0x6c>)
 800437c:	2201      	movs	r2, #1
 800437e:	2102      	movs	r1, #2
 8004380:	0018      	movs	r0, r3
 8004382:	f000 fd66 	bl	8004e52 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <turnOnA76XX+0x70>)
 8004388:	0018      	movs	r0, r3
 800438a:	f000 fa3d 	bl	8004808 <HAL_Delay>
  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, RESET);
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <turnOnA76XX+0x6c>)
 8004390:	2200      	movs	r2, #0
 8004392:	2102      	movs	r1, #2
 8004394:	0018      	movs	r0, r3
 8004396:	f000 fd5c 	bl	8004e52 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 800439a:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <turnOnA76XX+0x70>)
 800439c:	0018      	movs	r0, r3
 800439e:	f000 fa33 	bl	8004808 <HAL_Delay>
  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, SET);
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <turnOnA76XX+0x6c>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	2102      	movs	r1, #2
 80043a8:	0018      	movs	r0, r3
 80043aa:	f000 fd52 	bl	8004e52 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80043ae:	20c8      	movs	r0, #200	; 0xc8
 80043b0:	f000 fa2a 	bl	8004808 <HAL_Delay>
  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, RESET);
 80043b4:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <turnOnA76XX+0x6c>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	2102      	movs	r1, #2
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 fd49 	bl	8004e52 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80043c0:	23fa      	movs	r3, #250	; 0xfa
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	0018      	movs	r0, r3
 80043c6:	f000 fa1f 	bl	8004808 <HAL_Delay>
//    HAL_Delay(3500);
//    HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, RESET);
//    HAL_Delay(200);
//    HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, SET);
//    HAL_Delay(1000);
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	0800a3a4 	.word	0x0800a3a4
 80043d4:	50000400 	.word	0x50000400
 80043d8:	00000bb8 	.word	0x00000bb8

080043dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80043e0:	b672      	cpsid	i
}
 80043e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80043e4:	e7fe      	b.n	80043e4 <Error_Handler+0x8>
	...

080043e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ec:	4b07      	ldr	r3, [pc, #28]	; (800440c <HAL_MspInit+0x24>)
 80043ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_MspInit+0x24>)
 80043f2:	2101      	movs	r1, #1
 80043f4:	430a      	orrs	r2, r1
 80043f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <HAL_MspInit+0x24>)
 80043fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <HAL_MspInit+0x24>)
 80043fe:	2180      	movs	r1, #128	; 0x80
 8004400:	0549      	lsls	r1, r1, #21
 8004402:	430a      	orrs	r2, r1
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000

08004410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <HAL_TIM_Base_MspInit+0x38>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10d      	bne.n	800443e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_TIM_Base_MspInit+0x3c>)
 8004424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_TIM_Base_MspInit+0x3c>)
 8004428:	2110      	movs	r1, #16
 800442a:	430a      	orrs	r2, r1
 800442c:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	2011      	movs	r0, #17
 8004434:	f000 fab8 	bl	80049a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004438:	2011      	movs	r0, #17
 800443a:	f000 faca 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b002      	add	sp, #8
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	40001000 	.word	0x40001000
 800444c:	40021000 	.word	0x40021000

08004450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004450:	b590      	push	{r4, r7, lr}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004458:	240c      	movs	r4, #12
 800445a:	193b      	adds	r3, r7, r4
 800445c:	0018      	movs	r0, r3
 800445e:	2314      	movs	r3, #20
 8004460:	001a      	movs	r2, r3
 8004462:	2100      	movs	r1, #0
 8004464:	f003 fe0c 	bl	8008080 <memset>
  if(huart->Instance==USART1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <HAL_UART_MspInit+0x90>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d132      	bne.n	80044d8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <HAL_UART_MspInit+0x94>)
 8004474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004476:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_UART_MspInit+0x94>)
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	01c9      	lsls	r1, r1, #7
 800447c:	430a      	orrs	r2, r1
 800447e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <HAL_UART_MspInit+0x94>)
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <HAL_UART_MspInit+0x94>)
 8004486:	2101      	movs	r1, #1
 8004488:	430a      	orrs	r2, r1
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_UART_MspInit+0x94>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	2201      	movs	r2, #1
 8004492:	4013      	ands	r3, r2
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004498:	193b      	adds	r3, r7, r4
 800449a:	22c0      	movs	r2, #192	; 0xc0
 800449c:	00d2      	lsls	r2, r2, #3
 800449e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a0:	0021      	movs	r1, r4
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	2202      	movs	r2, #2
 80044a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	187b      	adds	r3, r7, r1
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	2203      	movs	r2, #3
 80044b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80044b4:	187b      	adds	r3, r7, r1
 80044b6:	2204      	movs	r2, #4
 80044b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ba:	187a      	adds	r2, r7, r1
 80044bc:	23a0      	movs	r3, #160	; 0xa0
 80044be:	05db      	lsls	r3, r3, #23
 80044c0:	0011      	movs	r1, r2
 80044c2:	0018      	movs	r0, r3
 80044c4:	f000 fb2a 	bl	8004b1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044c8:	2200      	movs	r2, #0
 80044ca:	2100      	movs	r1, #0
 80044cc:	201b      	movs	r0, #27
 80044ce:	f000 fa6b 	bl	80049a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044d2:	201b      	movs	r0, #27
 80044d4:	f000 fa7d 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b009      	add	sp, #36	; 0x24
 80044de:	bd90      	pop	{r4, r7, pc}
 80044e0:	40013800 	.word	0x40013800
 80044e4:	40021000 	.word	0x40021000

080044e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044ec:	e7fe      	b.n	80044ec <NMI_Handler+0x4>

080044ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044f2:	e7fe      	b.n	80044f2 <HardFault_Handler+0x4>

080044f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800450c:	f000 f960 	bl	80047d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  countSystick++;
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <SysTick_Handler+0x54>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <SysTick_Handler+0x54>)
 8004518:	601a      	str	r2, [r3, #0]
  if(countSystick>TIME_SYSTICK){
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <SysTick_Handler+0x54>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2bc8      	cmp	r3, #200	; 0xc8
 8004520:	dd07      	ble.n	8004532 <SysTick_Handler+0x2a>
  	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, SET);
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	0119      	lsls	r1, r3, #4
 8004526:	23a0      	movs	r3, #160	; 0xa0
 8004528:	05db      	lsls	r3, r3, #23
 800452a:	2201      	movs	r2, #1
 800452c:	0018      	movs	r0, r3
 800452e:	f000 fc90 	bl	8004e52 <HAL_GPIO_WritePin>
  }
  if(countSystick>TIME_SYSTICK*2){
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <SysTick_Handler+0x54>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	23c8      	movs	r3, #200	; 0xc8
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	429a      	cmp	r2, r3
 800453c:	dd0a      	ble.n	8004554 <SysTick_Handler+0x4c>
  	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, RESET);
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	0119      	lsls	r1, r3, #4
 8004542:	23a0      	movs	r3, #160	; 0xa0
 8004544:	05db      	lsls	r3, r3, #23
 8004546:	2200      	movs	r2, #0
 8004548:	0018      	movs	r0, r3
 800454a:	f000 fc82 	bl	8004e52 <HAL_GPIO_WritePin>
  	countSystick=0;
 800454e:	4b03      	ldr	r3, [pc, #12]	; (800455c <SysTick_Handler+0x54>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	20000430 	.word	0x20000430

08004560 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <TIM6_IRQHandler+0x14>)
 8004566:	0018      	movs	r0, r3
 8004568:	f001 fc5e 	bl	8005e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	200001a8 	.word	0x200001a8

08004578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <USART1_IRQHandler+0x14>)
 800457e:	0018      	movs	r0, r3
 8004580:	f001 ff0a 	bl	8006398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
 // HAL_UART_Receive_IT(&huart1, &r, 1);
  /* USER CODE END USART1_IRQn 1 */
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	200001e8 	.word	0x200001e8

08004590 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e00a      	b.n	80045b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045a2:	e000      	b.n	80045a6 <_read+0x16>
 80045a4:	bf00      	nop
 80045a6:	0001      	movs	r1, r0
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	60ba      	str	r2, [r7, #8]
 80045ae:	b2ca      	uxtb	r2, r1
 80045b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3301      	adds	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	dbf0      	blt.n	80045a2 <_read+0x12>
  }

  return len;
 80045c0:	687b      	ldr	r3, [r7, #4]
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b006      	add	sp, #24
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e009      	b.n	80045f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	60ba      	str	r2, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	0018      	movs	r0, r3
 80045e6:	e000      	b.n	80045ea <_write+0x20>
 80045e8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	3301      	adds	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	dbf1      	blt.n	80045dc <_write+0x12>
  }
  return len;
 80045f8:	687b      	ldr	r3, [r7, #4]
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b006      	add	sp, #24
 8004600:	bd80      	pop	{r7, pc}

08004602 <_close>:

int _close(int file)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800460a:	2301      	movs	r3, #1
 800460c:	425b      	negs	r3, r3
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}

08004616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	0192      	lsls	r2, r2, #6
 8004626:	605a      	str	r2, [r3, #4]
  return 0;
 8004628:	2300      	movs	r3, #0
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b002      	add	sp, #8
 8004630:	bd80      	pop	{r7, pc}

08004632 <_isatty>:

int _isatty(int file)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800463a:	2301      	movs	r3, #1
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004650:	2300      	movs	r3, #0
}
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	b004      	add	sp, #16
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004664:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <_sbrk+0x5c>)
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <_sbrk+0x60>)
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <_sbrk+0x64>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <_sbrk+0x64>)
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <_sbrk+0x68>)
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <_sbrk+0x64>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	18d3      	adds	r3, r2, r3
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d207      	bcs.n	800469c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800468c:	f003 fd76 	bl	800817c <__errno>
 8004690:	0003      	movs	r3, r0
 8004692:	220c      	movs	r2, #12
 8004694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004696:	2301      	movs	r3, #1
 8004698:	425b      	negs	r3, r3
 800469a:	e009      	b.n	80046b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <_sbrk+0x64>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <_sbrk+0x64>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	18d2      	adds	r2, r2, r3
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <_sbrk+0x64>)
 80046ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80046ae:	68fb      	ldr	r3, [r7, #12]
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b006      	add	sp, #24
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20005000 	.word	0x20005000
 80046bc:	00000400 	.word	0x00000400
 80046c0:	20000434 	.word	0x20000434
 80046c4:	20000588 	.word	0x20000588

080046c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80046d4:	480d      	ldr	r0, [pc, #52]	; (800470c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80046d6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80046d8:	f7ff fff6 	bl	80046c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046dc:	480c      	ldr	r0, [pc, #48]	; (8004710 <LoopForever+0x6>)
  ldr r1, =_edata
 80046de:	490d      	ldr	r1, [pc, #52]	; (8004714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80046e0:	4a0d      	ldr	r2, [pc, #52]	; (8004718 <LoopForever+0xe>)
  movs r3, #0
 80046e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046e4:	e002      	b.n	80046ec <LoopCopyDataInit>

080046e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ea:	3304      	adds	r3, #4

080046ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046f0:	d3f9      	bcc.n	80046e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <LoopForever+0x12>)
  ldr r4, =_ebss
 80046f4:	4c0a      	ldr	r4, [pc, #40]	; (8004720 <LoopForever+0x16>)
  movs r3, #0
 80046f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046f8:	e001      	b.n	80046fe <LoopFillZerobss>

080046fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046fc:	3204      	adds	r2, #4

080046fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004700:	d3fb      	bcc.n	80046fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004702:	f003 fd41 	bl	8008188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004706:	f7ff fc0d 	bl	8003f24 <main>

0800470a <LoopForever>:

LoopForever:
    b LoopForever
 800470a:	e7fe      	b.n	800470a <LoopForever>
   ldr   r0, =_estack
 800470c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004714:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8004718:	0800a680 	.word	0x0800a680
  ldr r2, =_sbss
 800471c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8004720:	20000588 	.word	0x20000588

08004724 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004724:	e7fe      	b.n	8004724 <ADC1_COMP_IRQHandler>
	...

08004728 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800472e:	1dfb      	adds	r3, r7, #7
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_Init+0x3c>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <HAL_Init+0x3c>)
 800473a:	2140      	movs	r1, #64	; 0x40
 800473c:	430a      	orrs	r2, r1
 800473e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004740:	2003      	movs	r0, #3
 8004742:	f000 f811 	bl	8004768 <HAL_InitTick>
 8004746:	1e03      	subs	r3, r0, #0
 8004748:	d003      	beq.n	8004752 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800474a:	1dfb      	adds	r3, r7, #7
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	e001      	b.n	8004756 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004752:	f7ff fe49 	bl	80043e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004756:	1dfb      	adds	r3, r7, #7
 8004758:	781b      	ldrb	r3, [r3, #0]
}
 800475a:	0018      	movs	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	b002      	add	sp, #8
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	40022000 	.word	0x40022000

08004768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <HAL_InitTick+0x5c>)
 8004772:	681c      	ldr	r4, [r3, #0]
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <HAL_InitTick+0x60>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	0019      	movs	r1, r3
 800477a:	23fa      	movs	r3, #250	; 0xfa
 800477c:	0098      	lsls	r0, r3, #2
 800477e:	f7fb fcd5 	bl	800012c <__udivsi3>
 8004782:	0003      	movs	r3, r0
 8004784:	0019      	movs	r1, r3
 8004786:	0020      	movs	r0, r4
 8004788:	f7fb fcd0 	bl	800012c <__udivsi3>
 800478c:	0003      	movs	r3, r0
 800478e:	0018      	movs	r0, r3
 8004790:	f000 f92f 	bl	80049f2 <HAL_SYSTICK_Config>
 8004794:	1e03      	subs	r3, r0, #0
 8004796:	d001      	beq.n	800479c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e00f      	b.n	80047bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d80b      	bhi.n	80047ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	2301      	movs	r3, #1
 80047a6:	425b      	negs	r3, r3
 80047a8:	2200      	movs	r2, #0
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 f8fc 	bl	80049a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_InitTick+0x64>)
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b003      	add	sp, #12
 80047c2:	bd90      	pop	{r4, r7, pc}
 80047c4:	20000064 	.word	0x20000064
 80047c8:	2000006c 	.word	0x2000006c
 80047cc:	20000068 	.word	0x20000068

080047d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_IncTick+0x1c>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	001a      	movs	r2, r3
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_IncTick+0x20>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	18d2      	adds	r2, r2, r3
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <HAL_IncTick+0x20>)
 80047e2:	601a      	str	r2, [r3, #0]
}
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	2000006c 	.word	0x2000006c
 80047f0:	20000438 	.word	0x20000438

080047f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  return uwTick;
 80047f8:	4b02      	ldr	r3, [pc, #8]	; (8004804 <HAL_GetTick+0x10>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	20000438 	.word	0x20000438

08004808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004810:	f7ff fff0 	bl	80047f4 <HAL_GetTick>
 8004814:	0003      	movs	r3, r0
 8004816:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	d005      	beq.n	800482e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004822:	4b0a      	ldr	r3, [pc, #40]	; (800484c <HAL_Delay+0x44>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	001a      	movs	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	189b      	adds	r3, r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	f7ff ffe0 	bl	80047f4 <HAL_GetTick>
 8004834:	0002      	movs	r2, r0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	429a      	cmp	r2, r3
 800483e:	d8f7      	bhi.n	8004830 <HAL_Delay+0x28>
  {
  }
}
 8004840:	46c0      	nop			; (mov r8, r8)
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b004      	add	sp, #16
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	2000006c 	.word	0x2000006c

08004850 <__NVIC_EnableIRQ>:
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	0002      	movs	r2, r0
 8004858:	1dfb      	adds	r3, r7, #7
 800485a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b7f      	cmp	r3, #127	; 0x7f
 8004862:	d809      	bhi.n	8004878 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004864:	1dfb      	adds	r3, r7, #7
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	001a      	movs	r2, r3
 800486a:	231f      	movs	r3, #31
 800486c:	401a      	ands	r2, r3
 800486e:	4b04      	ldr	r3, [pc, #16]	; (8004880 <__NVIC_EnableIRQ+0x30>)
 8004870:	2101      	movs	r1, #1
 8004872:	4091      	lsls	r1, r2
 8004874:	000a      	movs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b002      	add	sp, #8
 800487e:	bd80      	pop	{r7, pc}
 8004880:	e000e100 	.word	0xe000e100

08004884 <__NVIC_SetPriority>:
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	0002      	movs	r2, r0
 800488c:	6039      	str	r1, [r7, #0]
 800488e:	1dfb      	adds	r3, r7, #7
 8004890:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004892:	1dfb      	adds	r3, r7, #7
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b7f      	cmp	r3, #127	; 0x7f
 8004898:	d828      	bhi.n	80048ec <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800489a:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <__NVIC_SetPriority+0xd4>)
 800489c:	1dfb      	adds	r3, r7, #7
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b25b      	sxtb	r3, r3
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	33c0      	adds	r3, #192	; 0xc0
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	589b      	ldr	r3, [r3, r2]
 80048aa:	1dfa      	adds	r2, r7, #7
 80048ac:	7812      	ldrb	r2, [r2, #0]
 80048ae:	0011      	movs	r1, r2
 80048b0:	2203      	movs	r2, #3
 80048b2:	400a      	ands	r2, r1
 80048b4:	00d2      	lsls	r2, r2, #3
 80048b6:	21ff      	movs	r1, #255	; 0xff
 80048b8:	4091      	lsls	r1, r2
 80048ba:	000a      	movs	r2, r1
 80048bc:	43d2      	mvns	r2, r2
 80048be:	401a      	ands	r2, r3
 80048c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	019b      	lsls	r3, r3, #6
 80048c6:	22ff      	movs	r2, #255	; 0xff
 80048c8:	401a      	ands	r2, r3
 80048ca:	1dfb      	adds	r3, r7, #7
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	0018      	movs	r0, r3
 80048d0:	2303      	movs	r3, #3
 80048d2:	4003      	ands	r3, r0
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048d8:	481f      	ldr	r0, [pc, #124]	; (8004958 <__NVIC_SetPriority+0xd4>)
 80048da:	1dfb      	adds	r3, r7, #7
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	430a      	orrs	r2, r1
 80048e4:	33c0      	adds	r3, #192	; 0xc0
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	501a      	str	r2, [r3, r0]
}
 80048ea:	e031      	b.n	8004950 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048ec:	4a1b      	ldr	r2, [pc, #108]	; (800495c <__NVIC_SetPriority+0xd8>)
 80048ee:	1dfb      	adds	r3, r7, #7
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	0019      	movs	r1, r3
 80048f4:	230f      	movs	r3, #15
 80048f6:	400b      	ands	r3, r1
 80048f8:	3b08      	subs	r3, #8
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	3306      	adds	r3, #6
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	18d3      	adds	r3, r2, r3
 8004902:	3304      	adds	r3, #4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1dfa      	adds	r2, r7, #7
 8004908:	7812      	ldrb	r2, [r2, #0]
 800490a:	0011      	movs	r1, r2
 800490c:	2203      	movs	r2, #3
 800490e:	400a      	ands	r2, r1
 8004910:	00d2      	lsls	r2, r2, #3
 8004912:	21ff      	movs	r1, #255	; 0xff
 8004914:	4091      	lsls	r1, r2
 8004916:	000a      	movs	r2, r1
 8004918:	43d2      	mvns	r2, r2
 800491a:	401a      	ands	r2, r3
 800491c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	019b      	lsls	r3, r3, #6
 8004922:	22ff      	movs	r2, #255	; 0xff
 8004924:	401a      	ands	r2, r3
 8004926:	1dfb      	adds	r3, r7, #7
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	0018      	movs	r0, r3
 800492c:	2303      	movs	r3, #3
 800492e:	4003      	ands	r3, r0
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004934:	4809      	ldr	r0, [pc, #36]	; (800495c <__NVIC_SetPriority+0xd8>)
 8004936:	1dfb      	adds	r3, r7, #7
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	001c      	movs	r4, r3
 800493c:	230f      	movs	r3, #15
 800493e:	4023      	ands	r3, r4
 8004940:	3b08      	subs	r3, #8
 8004942:	089b      	lsrs	r3, r3, #2
 8004944:	430a      	orrs	r2, r1
 8004946:	3306      	adds	r3, #6
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	18c3      	adds	r3, r0, r3
 800494c:	3304      	adds	r3, #4
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b003      	add	sp, #12
 8004956:	bd90      	pop	{r4, r7, pc}
 8004958:	e000e100 	.word	0xe000e100
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	1e5a      	subs	r2, r3, #1
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	045b      	lsls	r3, r3, #17
 8004970:	429a      	cmp	r2, r3
 8004972:	d301      	bcc.n	8004978 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004974:	2301      	movs	r3, #1
 8004976:	e010      	b.n	800499a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004978:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <SysTick_Config+0x44>)
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	3a01      	subs	r2, #1
 800497e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004980:	2301      	movs	r3, #1
 8004982:	425b      	negs	r3, r3
 8004984:	2103      	movs	r1, #3
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff ff7c 	bl	8004884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <SysTick_Config+0x44>)
 800498e:	2200      	movs	r2, #0
 8004990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004992:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <SysTick_Config+0x44>)
 8004994:	2207      	movs	r2, #7
 8004996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004998:	2300      	movs	r3, #0
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	e000e010 	.word	0xe000e010

080049a8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	210f      	movs	r1, #15
 80049b4:	187b      	adds	r3, r7, r1
 80049b6:	1c02      	adds	r2, r0, #0
 80049b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	187b      	adds	r3, r7, r1
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b25b      	sxtb	r3, r3
 80049c2:	0011      	movs	r1, r2
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7ff ff5d 	bl	8004884 <__NVIC_SetPriority>
}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b004      	add	sp, #16
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	0002      	movs	r2, r0
 80049da:	1dfb      	adds	r3, r7, #7
 80049dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	b25b      	sxtb	r3, r3
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7ff ff33 	bl	8004850 <__NVIC_EnableIRQ>
}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7ff ffaf 	bl	8004960 <SysTick_Config>
 8004a02:	0003      	movs	r3, r0
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b002      	add	sp, #8
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	230f      	movs	r3, #15
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2225      	movs	r2, #37	; 0x25
 8004a20:	5c9b      	ldrb	r3, [r3, r2]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d008      	beq.n	8004a3a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2224      	movs	r2, #36	; 0x24
 8004a32:	2100      	movs	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e024      	b.n	8004a84 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	210e      	movs	r1, #14
 8004a46:	438a      	bics	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2101      	movs	r1, #1
 8004a56:	438a      	bics	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	221c      	movs	r2, #28
 8004a60:	401a      	ands	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	2101      	movs	r1, #1
 8004a68:	4091      	lsls	r1, r2
 8004a6a:	000a      	movs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2225      	movs	r2, #37	; 0x25
 8004a72:	2101      	movs	r1, #1
 8004a74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2224      	movs	r2, #36	; 0x24
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	5499      	strb	r1, [r3, r2]

    return status;
 8004a7e:	230f      	movs	r3, #15
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b004      	add	sp, #16
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	210f      	movs	r1, #15
 8004a96:	187b      	adds	r3, r7, r1
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2225      	movs	r2, #37	; 0x25
 8004aa0:	5c9b      	ldrb	r3, [r3, r2]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d006      	beq.n	8004ab6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2204      	movs	r2, #4
 8004aac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e02a      	b.n	8004b0c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	210e      	movs	r1, #14
 8004ac2:	438a      	bics	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	438a      	bics	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	221c      	movs	r2, #28
 8004adc:	401a      	ands	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4091      	lsls	r1, r2
 8004ae6:	000a      	movs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2225      	movs	r2, #37	; 0x25
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2224      	movs	r2, #36	; 0x24
 8004af6:	2100      	movs	r1, #0
 8004af8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	0010      	movs	r0, r2
 8004b0a:	4798      	blx	r3
    }
  }
  return status;
 8004b0c:	230f      	movs	r3, #15
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	781b      	ldrb	r3, [r3, #0]
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004b32:	e155      	b.n	8004de0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4091      	lsls	r1, r2
 8004b3e:	000a      	movs	r2, r1
 8004b40:	4013      	ands	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d100      	bne.n	8004b4c <HAL_GPIO_Init+0x30>
 8004b4a:	e146      	b.n	8004dda <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2203      	movs	r2, #3
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d005      	beq.n	8004b64 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d130      	bne.n	8004bc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	2203      	movs	r2, #3
 8004b70:	409a      	lsls	r2, r3
 8004b72:	0013      	movs	r3, r2
 8004b74:	43da      	mvns	r2, r3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	409a      	lsls	r2, r3
 8004b86:	0013      	movs	r3, r2
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	0013      	movs	r3, r2
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	091b      	lsrs	r3, r3, #4
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	401a      	ands	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	0013      	movs	r3, r2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d017      	beq.n	8004c02 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	2203      	movs	r2, #3
 8004bde:	409a      	lsls	r2, r3
 8004be0:	0013      	movs	r3, r2
 8004be2:	43da      	mvns	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	0013      	movs	r3, r2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2203      	movs	r2, #3
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d123      	bne.n	8004c56 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	08da      	lsrs	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3208      	adds	r2, #8
 8004c16:	0092      	lsls	r2, r2, #2
 8004c18:	58d3      	ldr	r3, [r2, r3]
 8004c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2207      	movs	r2, #7
 8004c20:	4013      	ands	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	220f      	movs	r2, #15
 8004c26:	409a      	lsls	r2, r3
 8004c28:	0013      	movs	r3, r2
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2107      	movs	r1, #7
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	0013      	movs	r3, r2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	08da      	lsrs	r2, r3, #3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3208      	adds	r2, #8
 8004c50:	0092      	lsls	r2, r2, #2
 8004c52:	6939      	ldr	r1, [r7, #16]
 8004c54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	2203      	movs	r2, #3
 8004c62:	409a      	lsls	r2, r3
 8004c64:	0013      	movs	r3, r2
 8004c66:	43da      	mvns	r2, r3
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2203      	movs	r2, #3
 8004c74:	401a      	ands	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	0013      	movs	r3, r2
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	23c0      	movs	r3, #192	; 0xc0
 8004c90:	029b      	lsls	r3, r3, #10
 8004c92:	4013      	ands	r3, r2
 8004c94:	d100      	bne.n	8004c98 <HAL_GPIO_Init+0x17c>
 8004c96:	e0a0      	b.n	8004dda <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c98:	4b57      	ldr	r3, [pc, #348]	; (8004df8 <HAL_GPIO_Init+0x2dc>)
 8004c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c9c:	4b56      	ldr	r3, [pc, #344]	; (8004df8 <HAL_GPIO_Init+0x2dc>)
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ca4:	4a55      	ldr	r2, [pc, #340]	; (8004dfc <HAL_GPIO_Init+0x2e0>)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	089b      	lsrs	r3, r3, #2
 8004caa:	3302      	adds	r3, #2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	589b      	ldr	r3, [r3, r2]
 8004cb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	220f      	movs	r2, #15
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	0013      	movs	r3, r2
 8004cc0:	43da      	mvns	r2, r3
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	23a0      	movs	r3, #160	; 0xa0
 8004ccc:	05db      	lsls	r3, r3, #23
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d01f      	beq.n	8004d12 <HAL_GPIO_Init+0x1f6>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a4a      	ldr	r2, [pc, #296]	; (8004e00 <HAL_GPIO_Init+0x2e4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d019      	beq.n	8004d0e <HAL_GPIO_Init+0x1f2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a49      	ldr	r2, [pc, #292]	; (8004e04 <HAL_GPIO_Init+0x2e8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_GPIO_Init+0x1ee>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a48      	ldr	r2, [pc, #288]	; (8004e08 <HAL_GPIO_Init+0x2ec>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00d      	beq.n	8004d06 <HAL_GPIO_Init+0x1ea>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a47      	ldr	r2, [pc, #284]	; (8004e0c <HAL_GPIO_Init+0x2f0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <HAL_GPIO_Init+0x1e6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a46      	ldr	r2, [pc, #280]	; (8004e10 <HAL_GPIO_Init+0x2f4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_GPIO_Init+0x1e2>
 8004cfa:	2305      	movs	r3, #5
 8004cfc:	e00a      	b.n	8004d14 <HAL_GPIO_Init+0x1f8>
 8004cfe:	2306      	movs	r3, #6
 8004d00:	e008      	b.n	8004d14 <HAL_GPIO_Init+0x1f8>
 8004d02:	2304      	movs	r3, #4
 8004d04:	e006      	b.n	8004d14 <HAL_GPIO_Init+0x1f8>
 8004d06:	2303      	movs	r3, #3
 8004d08:	e004      	b.n	8004d14 <HAL_GPIO_Init+0x1f8>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e002      	b.n	8004d14 <HAL_GPIO_Init+0x1f8>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <HAL_GPIO_Init+0x1f8>
 8004d12:	2300      	movs	r3, #0
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	2103      	movs	r1, #3
 8004d18:	400a      	ands	r2, r1
 8004d1a:	0092      	lsls	r2, r2, #2
 8004d1c:	4093      	lsls	r3, r2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d24:	4935      	ldr	r1, [pc, #212]	; (8004dfc <HAL_GPIO_Init+0x2e0>)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	089b      	lsrs	r3, r3, #2
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d32:	4b38      	ldr	r3, [pc, #224]	; (8004e14 <HAL_GPIO_Init+0x2f8>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	43da      	mvns	r2, r3
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	2380      	movs	r3, #128	; 0x80
 8004d48:	035b      	lsls	r3, r3, #13
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <HAL_GPIO_Init+0x2f8>)
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004d5c:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <HAL_GPIO_Init+0x2f8>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43da      	mvns	r2, r3
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	2380      	movs	r3, #128	; 0x80
 8004d72:	039b      	lsls	r3, r3, #14
 8004d74:	4013      	ands	r3, r2
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d80:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <HAL_GPIO_Init+0x2f8>)
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004d86:	4b23      	ldr	r3, [pc, #140]	; (8004e14 <HAL_GPIO_Init+0x2f8>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	43da      	mvns	r2, r3
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4013      	ands	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004daa:	4b1a      	ldr	r3, [pc, #104]	; (8004e14 <HAL_GPIO_Init+0x2f8>)
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004db0:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <HAL_GPIO_Init+0x2f8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	43da      	mvns	r2, r3
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	025b      	lsls	r3, r3, #9
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_GPIO_Init+0x2f8>)
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	40da      	lsrs	r2, r3
 8004de8:	1e13      	subs	r3, r2, #0
 8004dea:	d000      	beq.n	8004dee <HAL_GPIO_Init+0x2d2>
 8004dec:	e6a2      	b.n	8004b34 <HAL_GPIO_Init+0x18>
  }
}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	46c0      	nop			; (mov r8, r8)
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b006      	add	sp, #24
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	50000400 	.word	0x50000400
 8004e04:	50000800 	.word	0x50000800
 8004e08:	50000c00 	.word	0x50000c00
 8004e0c:	50001000 	.word	0x50001000
 8004e10:	50001c00 	.word	0x50001c00
 8004e14:	40010400 	.word	0x40010400

08004e18 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	000a      	movs	r2, r1
 8004e22:	1cbb      	adds	r3, r7, #2
 8004e24:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	1cba      	adds	r2, r7, #2
 8004e2c:	8812      	ldrh	r2, [r2, #0]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004e32:	230f      	movs	r3, #15
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e003      	b.n	8004e44 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e3c:	230f      	movs	r3, #15
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004e44:	230f      	movs	r3, #15
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	781b      	ldrb	r3, [r3, #0]
}
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b004      	add	sp, #16
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	0008      	movs	r0, r1
 8004e5c:	0011      	movs	r1, r2
 8004e5e:	1cbb      	adds	r3, r7, #2
 8004e60:	1c02      	adds	r2, r0, #0
 8004e62:	801a      	strh	r2, [r3, #0]
 8004e64:	1c7b      	adds	r3, r7, #1
 8004e66:	1c0a      	adds	r2, r1, #0
 8004e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e6a:	1c7b      	adds	r3, r7, #1
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d004      	beq.n	8004e7c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e72:	1cbb      	adds	r3, r7, #2
 8004e74:	881a      	ldrh	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004e7a:	e003      	b.n	8004e84 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004e7c:	1cbb      	adds	r3, r7, #2
 8004e7e:	881a      	ldrh	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e84:	46c0      	nop			; (mov r8, r8)
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b002      	add	sp, #8
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e03d      	b.n	8004f1a <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <HAL_IWDG_Init+0x98>)
 8004ea4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_IWDG_Init+0x9c>)
 8004eac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6852      	ldr	r2, [r2, #4]
 8004eb6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6892      	ldr	r2, [r2, #8]
 8004ec0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004ec2:	f7ff fc97 	bl	80047f4 <HAL_GetTick>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004eca:	e00e      	b.n	8004eea <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004ecc:	f7ff fc92 	bl	80047f4 <HAL_GetTick>
 8004ed0:	0002      	movs	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed8:	d907      	bls.n	8004eea <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d001      	beq.n	8004eea <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e017      	b.n	8004f1a <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d1ea      	bne.n	8004ecc <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d005      	beq.n	8004f10 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68d2      	ldr	r2, [r2, #12]
 8004f0c:	611a      	str	r2, [r3, #16]
 8004f0e:	e003      	b.n	8004f18 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a05      	ldr	r2, [pc, #20]	; (8004f2c <HAL_IWDG_Init+0xa0>)
 8004f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b004      	add	sp, #16
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	0000cccc 	.word	0x0000cccc
 8004f28:	00005555 	.word	0x00005555
 8004f2c:	0000aaaa 	.word	0x0000aaaa

08004f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f30:	b5b0      	push	{r4, r5, r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f000 fb6c 	bl	800561c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f44:	4bc8      	ldr	r3, [pc, #800]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	220c      	movs	r2, #12
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f4e:	4bc6      	ldr	r3, [pc, #792]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	025b      	lsls	r3, r3, #9
 8004f56:	4013      	ands	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4013      	ands	r3, r2
 8004f62:	d100      	bne.n	8004f66 <HAL_RCC_OscConfig+0x36>
 8004f64:	e07d      	b.n	8005062 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d007      	beq.n	8004f7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d112      	bne.n	8004f98 <HAL_RCC_OscConfig+0x68>
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	025b      	lsls	r3, r3, #9
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d10d      	bne.n	8004f98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	4bba      	ldr	r3, [pc, #744]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	029b      	lsls	r3, r3, #10
 8004f84:	4013      	ands	r3, r2
 8004f86:	d100      	bne.n	8004f8a <HAL_RCC_OscConfig+0x5a>
 8004f88:	e06a      	b.n	8005060 <HAL_RCC_OscConfig+0x130>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d166      	bne.n	8005060 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f000 fb42 	bl	800561c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	025b      	lsls	r3, r3, #9
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d107      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x84>
 8004fa4:	4bb0      	ldr	r3, [pc, #704]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4baf      	ldr	r3, [pc, #700]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004faa:	2180      	movs	r1, #128	; 0x80
 8004fac:	0249      	lsls	r1, r1, #9
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	e027      	b.n	8005004 <HAL_RCC_OscConfig+0xd4>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	23a0      	movs	r3, #160	; 0xa0
 8004fba:	02db      	lsls	r3, r3, #11
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d10e      	bne.n	8004fde <HAL_RCC_OscConfig+0xae>
 8004fc0:	4ba9      	ldr	r3, [pc, #676]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4ba8      	ldr	r3, [pc, #672]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004fc6:	2180      	movs	r1, #128	; 0x80
 8004fc8:	02c9      	lsls	r1, r1, #11
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	4ba6      	ldr	r3, [pc, #664]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4ba5      	ldr	r3, [pc, #660]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004fd4:	2180      	movs	r1, #128	; 0x80
 8004fd6:	0249      	lsls	r1, r1, #9
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e012      	b.n	8005004 <HAL_RCC_OscConfig+0xd4>
 8004fde:	4ba2      	ldr	r3, [pc, #648]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4ba1      	ldr	r3, [pc, #644]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004fe4:	49a1      	ldr	r1, [pc, #644]	; (800526c <HAL_RCC_OscConfig+0x33c>)
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	4b9f      	ldr	r3, [pc, #636]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	025b      	lsls	r3, r3, #9
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4b9b      	ldr	r3, [pc, #620]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b9a      	ldr	r3, [pc, #616]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8004ffe:	499c      	ldr	r1, [pc, #624]	; (8005270 <HAL_RCC_OscConfig+0x340>)
 8005000:	400a      	ands	r2, r1
 8005002:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d014      	beq.n	8005036 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7ff fbf2 	bl	80047f4 <HAL_GetTick>
 8005010:	0003      	movs	r3, r0
 8005012:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005016:	f7ff fbed 	bl	80047f4 <HAL_GetTick>
 800501a:	0002      	movs	r2, r0
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b64      	cmp	r3, #100	; 0x64
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e2f9      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005028:	4b8f      	ldr	r3, [pc, #572]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	029b      	lsls	r3, r3, #10
 8005030:	4013      	ands	r3, r2
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0xe6>
 8005034:	e015      	b.n	8005062 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005036:	f7ff fbdd 	bl	80047f4 <HAL_GetTick>
 800503a:	0003      	movs	r3, r0
 800503c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005040:	f7ff fbd8 	bl	80047f4 <HAL_GetTick>
 8005044:	0002      	movs	r2, r0
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b64      	cmp	r3, #100	; 0x64
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e2e4      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005052:	4b85      	ldr	r3, [pc, #532]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	029b      	lsls	r3, r3, #10
 800505a:	4013      	ands	r3, r2
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x110>
 800505e:	e000      	b.n	8005062 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005060:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2202      	movs	r2, #2
 8005068:	4013      	ands	r3, r2
 800506a:	d100      	bne.n	800506e <HAL_RCC_OscConfig+0x13e>
 800506c:	e099      	b.n	80051a2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	2220      	movs	r2, #32
 8005078:	4013      	ands	r3, r2
 800507a:	d009      	beq.n	8005090 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800507c:	4b7a      	ldr	r3, [pc, #488]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b79      	ldr	r3, [pc, #484]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8005082:	2120      	movs	r1, #32
 8005084:	430a      	orrs	r2, r1
 8005086:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	2220      	movs	r2, #32
 800508c:	4393      	bics	r3, r2
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d005      	beq.n	80050a2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	d13e      	bne.n	800511a <HAL_RCC_OscConfig+0x1ea>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d13b      	bne.n	800511a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80050a2:	4b71      	ldr	r3, [pc, #452]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2204      	movs	r2, #4
 80050a8:	4013      	ands	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_RCC_OscConfig+0x186>
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e2b2      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b6:	4b6c      	ldr	r3, [pc, #432]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4a6e      	ldr	r2, [pc, #440]	; (8005274 <HAL_RCC_OscConfig+0x344>)
 80050bc:	4013      	ands	r3, r2
 80050be:	0019      	movs	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	021a      	lsls	r2, r3, #8
 80050c6:	4b68      	ldr	r3, [pc, #416]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80050cc:	4b66      	ldr	r3, [pc, #408]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2209      	movs	r2, #9
 80050d2:	4393      	bics	r3, r2
 80050d4:	0019      	movs	r1, r3
 80050d6:	4b64      	ldr	r3, [pc, #400]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80050d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050da:	430a      	orrs	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050de:	f000 fbeb 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 80050e2:	0001      	movs	r1, r0
 80050e4:	4b60      	ldr	r3, [pc, #384]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	220f      	movs	r2, #15
 80050ec:	4013      	ands	r3, r2
 80050ee:	4a62      	ldr	r2, [pc, #392]	; (8005278 <HAL_RCC_OscConfig+0x348>)
 80050f0:	5cd3      	ldrb	r3, [r2, r3]
 80050f2:	000a      	movs	r2, r1
 80050f4:	40da      	lsrs	r2, r3
 80050f6:	4b61      	ldr	r3, [pc, #388]	; (800527c <HAL_RCC_OscConfig+0x34c>)
 80050f8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80050fa:	4b61      	ldr	r3, [pc, #388]	; (8005280 <HAL_RCC_OscConfig+0x350>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2513      	movs	r5, #19
 8005100:	197c      	adds	r4, r7, r5
 8005102:	0018      	movs	r0, r3
 8005104:	f7ff fb30 	bl	8004768 <HAL_InitTick>
 8005108:	0003      	movs	r3, r0
 800510a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800510c:	197b      	adds	r3, r7, r5
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d046      	beq.n	80051a2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8005114:	197b      	adds	r3, r7, r5
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	e280      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d027      	beq.n	8005170 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005120:	4b51      	ldr	r3, [pc, #324]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2209      	movs	r2, #9
 8005126:	4393      	bics	r3, r2
 8005128:	0019      	movs	r1, r3
 800512a:	4b4f      	ldr	r3, [pc, #316]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 800512c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512e:	430a      	orrs	r2, r1
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7ff fb5f 	bl	80047f4 <HAL_GetTick>
 8005136:	0003      	movs	r3, r0
 8005138:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513c:	f7ff fb5a 	bl	80047f4 <HAL_GetTick>
 8005140:	0002      	movs	r2, r0
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e266      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800514e:	4b46      	ldr	r3, [pc, #280]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2204      	movs	r2, #4
 8005154:	4013      	ands	r3, r2
 8005156:	d0f1      	beq.n	800513c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005158:	4b43      	ldr	r3, [pc, #268]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4a45      	ldr	r2, [pc, #276]	; (8005274 <HAL_RCC_OscConfig+0x344>)
 800515e:	4013      	ands	r3, r2
 8005160:	0019      	movs	r1, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	021a      	lsls	r2, r3, #8
 8005168:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	e018      	b.n	80051a2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005170:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b3c      	ldr	r3, [pc, #240]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8005176:	2101      	movs	r1, #1
 8005178:	438a      	bics	r2, r1
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7ff fb3a 	bl	80047f4 <HAL_GetTick>
 8005180:	0003      	movs	r3, r0
 8005182:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005186:	f7ff fb35 	bl	80047f4 <HAL_GetTick>
 800518a:	0002      	movs	r2, r0
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e241      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005198:	4b33      	ldr	r3, [pc, #204]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2204      	movs	r2, #4
 800519e:	4013      	ands	r3, r2
 80051a0:	d1f1      	bne.n	8005186 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2210      	movs	r2, #16
 80051a8:	4013      	ands	r3, r2
 80051aa:	d100      	bne.n	80051ae <HAL_RCC_OscConfig+0x27e>
 80051ac:	e0a1      	b.n	80052f2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d140      	bne.n	8005236 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051b4:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4013      	ands	r3, r2
 80051be:	d005      	beq.n	80051cc <HAL_RCC_OscConfig+0x29c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e227      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051cc:	4b26      	ldr	r3, [pc, #152]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <HAL_RCC_OscConfig+0x354>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	0019      	movs	r1, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1a      	ldr	r2, [r3, #32]
 80051da:	4b23      	ldr	r3, [pc, #140]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051e0:	4b21      	ldr	r3, [pc, #132]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	0a19      	lsrs	r1, r3, #8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	061a      	lsls	r2, r3, #24
 80051ee:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	0b5b      	lsrs	r3, r3, #13
 80051fa:	3301      	adds	r3, #1
 80051fc:	2280      	movs	r2, #128	; 0x80
 80051fe:	0212      	lsls	r2, r2, #8
 8005200:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005202:	4b19      	ldr	r3, [pc, #100]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	210f      	movs	r1, #15
 800520a:	400b      	ands	r3, r1
 800520c:	491a      	ldr	r1, [pc, #104]	; (8005278 <HAL_RCC_OscConfig+0x348>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005212:	4b1a      	ldr	r3, [pc, #104]	; (800527c <HAL_RCC_OscConfig+0x34c>)
 8005214:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005216:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <HAL_RCC_OscConfig+0x350>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2513      	movs	r5, #19
 800521c:	197c      	adds	r4, r7, r5
 800521e:	0018      	movs	r0, r3
 8005220:	f7ff faa2 	bl	8004768 <HAL_InitTick>
 8005224:	0003      	movs	r3, r0
 8005226:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005228:	197b      	adds	r3, r7, r5
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d060      	beq.n	80052f2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8005230:	197b      	adds	r3, r7, r5
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	e1f2      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d03f      	beq.n	80052be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_RCC_OscConfig+0x338>)
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	0049      	lsls	r1, r1, #1
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7ff fad2 	bl	80047f4 <HAL_GetTick>
 8005250:	0003      	movs	r3, r0
 8005252:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005254:	e018      	b.n	8005288 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005256:	f7ff facd 	bl	80047f4 <HAL_GetTick>
 800525a:	0002      	movs	r2, r0
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d911      	bls.n	8005288 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e1d9      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
 8005268:	40021000 	.word	0x40021000
 800526c:	fffeffff 	.word	0xfffeffff
 8005270:	fffbffff 	.word	0xfffbffff
 8005274:	ffffe0ff 	.word	0xffffe0ff
 8005278:	0800a4b4 	.word	0x0800a4b4
 800527c:	20000064 	.word	0x20000064
 8005280:	20000068 	.word	0x20000068
 8005284:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005288:	4bc9      	ldr	r3, [pc, #804]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4013      	ands	r3, r2
 8005292:	d0e0      	beq.n	8005256 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005294:	4bc6      	ldr	r3, [pc, #792]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4ac6      	ldr	r2, [pc, #792]	; (80055b4 <HAL_RCC_OscConfig+0x684>)
 800529a:	4013      	ands	r3, r2
 800529c:	0019      	movs	r1, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1a      	ldr	r2, [r3, #32]
 80052a2:	4bc3      	ldr	r3, [pc, #780]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052a8:	4bc1      	ldr	r3, [pc, #772]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	0a19      	lsrs	r1, r3, #8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	061a      	lsls	r2, r3, #24
 80052b6:	4bbe      	ldr	r3, [pc, #760]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	e019      	b.n	80052f2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052be:	4bbc      	ldr	r3, [pc, #752]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4bbb      	ldr	r3, [pc, #748]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80052c4:	49bc      	ldr	r1, [pc, #752]	; (80055b8 <HAL_RCC_OscConfig+0x688>)
 80052c6:	400a      	ands	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ca:	f7ff fa93 	bl	80047f4 <HAL_GetTick>
 80052ce:	0003      	movs	r3, r0
 80052d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052d4:	f7ff fa8e 	bl	80047f4 <HAL_GetTick>
 80052d8:	0002      	movs	r2, r0
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e19a      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80052e6:	4bb2      	ldr	r3, [pc, #712]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4013      	ands	r3, r2
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2208      	movs	r2, #8
 80052f8:	4013      	ands	r3, r2
 80052fa:	d036      	beq.n	800536a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d019      	beq.n	8005338 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005304:	4baa      	ldr	r3, [pc, #680]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005308:	4ba9      	ldr	r3, [pc, #676]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800530a:	2101      	movs	r1, #1
 800530c:	430a      	orrs	r2, r1
 800530e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005310:	f7ff fa70 	bl	80047f4 <HAL_GetTick>
 8005314:	0003      	movs	r3, r0
 8005316:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800531a:	f7ff fa6b 	bl	80047f4 <HAL_GetTick>
 800531e:	0002      	movs	r2, r0
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e177      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800532c:	4ba0      	ldr	r3, [pc, #640]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800532e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005330:	2202      	movs	r2, #2
 8005332:	4013      	ands	r3, r2
 8005334:	d0f1      	beq.n	800531a <HAL_RCC_OscConfig+0x3ea>
 8005336:	e018      	b.n	800536a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005338:	4b9d      	ldr	r3, [pc, #628]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800533a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800533c:	4b9c      	ldr	r3, [pc, #624]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800533e:	2101      	movs	r1, #1
 8005340:	438a      	bics	r2, r1
 8005342:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005344:	f7ff fa56 	bl	80047f4 <HAL_GetTick>
 8005348:	0003      	movs	r3, r0
 800534a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800534e:	f7ff fa51 	bl	80047f4 <HAL_GetTick>
 8005352:	0002      	movs	r2, r0
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e15d      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005360:	4b93      	ldr	r3, [pc, #588]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005364:	2202      	movs	r2, #2
 8005366:	4013      	ands	r3, r2
 8005368:	d1f1      	bne.n	800534e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2204      	movs	r2, #4
 8005370:	4013      	ands	r3, r2
 8005372:	d100      	bne.n	8005376 <HAL_RCC_OscConfig+0x446>
 8005374:	e0ae      	b.n	80054d4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005376:	2023      	movs	r0, #35	; 0x23
 8005378:	183b      	adds	r3, r7, r0
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537e:	4b8c      	ldr	r3, [pc, #560]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	055b      	lsls	r3, r3, #21
 8005386:	4013      	ands	r3, r2
 8005388:	d109      	bne.n	800539e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	4b89      	ldr	r3, [pc, #548]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800538c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538e:	4b88      	ldr	r3, [pc, #544]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	0549      	lsls	r1, r1, #21
 8005394:	430a      	orrs	r2, r1
 8005396:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005398:	183b      	adds	r3, r7, r0
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539e:	4b87      	ldr	r3, [pc, #540]	; (80055bc <HAL_RCC_OscConfig+0x68c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	4013      	ands	r3, r2
 80053a8:	d11a      	bne.n	80053e0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053aa:	4b84      	ldr	r3, [pc, #528]	; (80055bc <HAL_RCC_OscConfig+0x68c>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b83      	ldr	r3, [pc, #524]	; (80055bc <HAL_RCC_OscConfig+0x68c>)
 80053b0:	2180      	movs	r1, #128	; 0x80
 80053b2:	0049      	lsls	r1, r1, #1
 80053b4:	430a      	orrs	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053b8:	f7ff fa1c 	bl	80047f4 <HAL_GetTick>
 80053bc:	0003      	movs	r3, r0
 80053be:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c2:	f7ff fa17 	bl	80047f4 <HAL_GetTick>
 80053c6:	0002      	movs	r2, r0
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b64      	cmp	r3, #100	; 0x64
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e123      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d4:	4b79      	ldr	r3, [pc, #484]	; (80055bc <HAL_RCC_OscConfig+0x68c>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	4013      	ands	r3, r2
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	2380      	movs	r3, #128	; 0x80
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_OscConfig+0x4cc>
 80053ec:	4b70      	ldr	r3, [pc, #448]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80053ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053f0:	4b6f      	ldr	r3, [pc, #444]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	0049      	lsls	r1, r1, #1
 80053f6:	430a      	orrs	r2, r1
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50
 80053fa:	e031      	b.n	8005460 <HAL_RCC_OscConfig+0x530>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10c      	bne.n	800541e <HAL_RCC_OscConfig+0x4ee>
 8005404:	4b6a      	ldr	r3, [pc, #424]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005408:	4b69      	ldr	r3, [pc, #420]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800540a:	496b      	ldr	r1, [pc, #428]	; (80055b8 <HAL_RCC_OscConfig+0x688>)
 800540c:	400a      	ands	r2, r1
 800540e:	651a      	str	r2, [r3, #80]	; 0x50
 8005410:	4b67      	ldr	r3, [pc, #412]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005414:	4b66      	ldr	r3, [pc, #408]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005416:	496a      	ldr	r1, [pc, #424]	; (80055c0 <HAL_RCC_OscConfig+0x690>)
 8005418:	400a      	ands	r2, r1
 800541a:	651a      	str	r2, [r3, #80]	; 0x50
 800541c:	e020      	b.n	8005460 <HAL_RCC_OscConfig+0x530>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	23a0      	movs	r3, #160	; 0xa0
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	429a      	cmp	r2, r3
 8005428:	d10e      	bne.n	8005448 <HAL_RCC_OscConfig+0x518>
 800542a:	4b61      	ldr	r3, [pc, #388]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800542c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800542e:	4b60      	ldr	r3, [pc, #384]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005430:	2180      	movs	r1, #128	; 0x80
 8005432:	00c9      	lsls	r1, r1, #3
 8005434:	430a      	orrs	r2, r1
 8005436:	651a      	str	r2, [r3, #80]	; 0x50
 8005438:	4b5d      	ldr	r3, [pc, #372]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800543a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800543c:	4b5c      	ldr	r3, [pc, #368]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800543e:	2180      	movs	r1, #128	; 0x80
 8005440:	0049      	lsls	r1, r1, #1
 8005442:	430a      	orrs	r2, r1
 8005444:	651a      	str	r2, [r3, #80]	; 0x50
 8005446:	e00b      	b.n	8005460 <HAL_RCC_OscConfig+0x530>
 8005448:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800544a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800544c:	4b58      	ldr	r3, [pc, #352]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800544e:	495a      	ldr	r1, [pc, #360]	; (80055b8 <HAL_RCC_OscConfig+0x688>)
 8005450:	400a      	ands	r2, r1
 8005452:	651a      	str	r2, [r3, #80]	; 0x50
 8005454:	4b56      	ldr	r3, [pc, #344]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005458:	4b55      	ldr	r3, [pc, #340]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800545a:	4959      	ldr	r1, [pc, #356]	; (80055c0 <HAL_RCC_OscConfig+0x690>)
 800545c:	400a      	ands	r2, r1
 800545e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d015      	beq.n	8005494 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005468:	f7ff f9c4 	bl	80047f4 <HAL_GetTick>
 800546c:	0003      	movs	r3, r0
 800546e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005470:	e009      	b.n	8005486 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7ff f9bf 	bl	80047f4 <HAL_GetTick>
 8005476:	0002      	movs	r2, r0
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	4a51      	ldr	r2, [pc, #324]	; (80055c4 <HAL_RCC_OscConfig+0x694>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0ca      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005486:	4b4a      	ldr	r3, [pc, #296]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4013      	ands	r3, r2
 8005490:	d0ef      	beq.n	8005472 <HAL_RCC_OscConfig+0x542>
 8005492:	e014      	b.n	80054be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005494:	f7ff f9ae 	bl	80047f4 <HAL_GetTick>
 8005498:	0003      	movs	r3, r0
 800549a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800549c:	e009      	b.n	80054b2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7ff f9a9 	bl	80047f4 <HAL_GetTick>
 80054a2:	0002      	movs	r2, r0
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	4a46      	ldr	r2, [pc, #280]	; (80055c4 <HAL_RCC_OscConfig+0x694>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e0b4      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054b2:	4b3f      	ldr	r3, [pc, #252]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80054b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4013      	ands	r3, r2
 80054bc:	d1ef      	bne.n	800549e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054be:	2323      	movs	r3, #35	; 0x23
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d105      	bne.n	80054d4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c8:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80054ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054cc:	4b38      	ldr	r3, [pc, #224]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80054ce:	493e      	ldr	r1, [pc, #248]	; (80055c8 <HAL_RCC_OscConfig+0x698>)
 80054d0:	400a      	ands	r2, r1
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d100      	bne.n	80054de <HAL_RCC_OscConfig+0x5ae>
 80054dc:	e09d      	b.n	800561a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2b0c      	cmp	r3, #12
 80054e2:	d100      	bne.n	80054e6 <HAL_RCC_OscConfig+0x5b6>
 80054e4:	e076      	b.n	80055d4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d145      	bne.n	800557a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ee:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80054f4:	4935      	ldr	r1, [pc, #212]	; (80055cc <HAL_RCC_OscConfig+0x69c>)
 80054f6:	400a      	ands	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fa:	f7ff f97b 	bl	80047f4 <HAL_GetTick>
 80054fe:	0003      	movs	r3, r0
 8005500:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005504:	f7ff f976 	bl	80047f4 <HAL_GetTick>
 8005508:	0002      	movs	r2, r0
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e082      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005516:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	2380      	movs	r3, #128	; 0x80
 800551c:	049b      	lsls	r3, r3, #18
 800551e:	4013      	ands	r3, r2
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005522:	4b23      	ldr	r3, [pc, #140]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	4a2a      	ldr	r2, [pc, #168]	; (80055d0 <HAL_RCC_OscConfig+0x6a0>)
 8005528:	4013      	ands	r3, r2
 800552a:	0019      	movs	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	431a      	orrs	r2, r3
 800553c:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800553e:	430a      	orrs	r2, r1
 8005540:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005542:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005548:	2180      	movs	r1, #128	; 0x80
 800554a:	0449      	lsls	r1, r1, #17
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005550:	f7ff f950 	bl	80047f4 <HAL_GetTick>
 8005554:	0003      	movs	r3, r0
 8005556:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555a:	f7ff f94b 	bl	80047f4 <HAL_GetTick>
 800555e:	0002      	movs	r2, r0
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e057      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800556c:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	049b      	lsls	r3, r3, #18
 8005574:	4013      	ands	r3, r2
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x62a>
 8005578:	e04f      	b.n	800561a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800557a:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 8005580:	4912      	ldr	r1, [pc, #72]	; (80055cc <HAL_RCC_OscConfig+0x69c>)
 8005582:	400a      	ands	r2, r1
 8005584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005586:	f7ff f935 	bl	80047f4 <HAL_GetTick>
 800558a:	0003      	movs	r3, r0
 800558c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005590:	f7ff f930 	bl	80047f4 <HAL_GetTick>
 8005594:	0002      	movs	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e03c      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055a2:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <HAL_RCC_OscConfig+0x680>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	2380      	movs	r3, #128	; 0x80
 80055a8:	049b      	lsls	r3, r3, #18
 80055aa:	4013      	ands	r3, r2
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x660>
 80055ae:	e034      	b.n	800561a <HAL_RCC_OscConfig+0x6ea>
 80055b0:	40021000 	.word	0x40021000
 80055b4:	ffff1fff 	.word	0xffff1fff
 80055b8:	fffffeff 	.word	0xfffffeff
 80055bc:	40007000 	.word	0x40007000
 80055c0:	fffffbff 	.word	0xfffffbff
 80055c4:	00001388 	.word	0x00001388
 80055c8:	efffffff 	.word	0xefffffff
 80055cc:	feffffff 	.word	0xfeffffff
 80055d0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e01d      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <HAL_RCC_OscConfig+0x6f4>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	025b      	lsls	r3, r3, #9
 80055ec:	401a      	ands	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d10f      	bne.n	8005616 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	23f0      	movs	r3, #240	; 0xf0
 80055fa:	039b      	lsls	r3, r3, #14
 80055fc:	401a      	ands	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d107      	bne.n	8005616 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	23c0      	movs	r3, #192	; 0xc0
 800560a:	041b      	lsls	r3, r3, #16
 800560c:	401a      	ands	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005612:	429a      	cmp	r2, r3
 8005614:	d001      	beq.n	800561a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	b00a      	add	sp, #40	; 0x28
 8005622:	bdb0      	pop	{r4, r5, r7, pc}
 8005624:	40021000 	.word	0x40021000

08005628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005628:	b5b0      	push	{r4, r5, r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e128      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800563c:	4b96      	ldr	r3, [pc, #600]	; (8005898 <HAL_RCC_ClockConfig+0x270>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2201      	movs	r2, #1
 8005642:	4013      	ands	r3, r2
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d91e      	bls.n	8005688 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b93      	ldr	r3, [pc, #588]	; (8005898 <HAL_RCC_ClockConfig+0x270>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2201      	movs	r2, #1
 8005650:	4393      	bics	r3, r2
 8005652:	0019      	movs	r1, r3
 8005654:	4b90      	ldr	r3, [pc, #576]	; (8005898 <HAL_RCC_ClockConfig+0x270>)
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800565c:	f7ff f8ca 	bl	80047f4 <HAL_GetTick>
 8005660:	0003      	movs	r3, r0
 8005662:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005664:	e009      	b.n	800567a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005666:	f7ff f8c5 	bl	80047f4 <HAL_GetTick>
 800566a:	0002      	movs	r2, r0
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	4a8a      	ldr	r2, [pc, #552]	; (800589c <HAL_RCC_ClockConfig+0x274>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e109      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b87      	ldr	r3, [pc, #540]	; (8005898 <HAL_RCC_ClockConfig+0x270>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2201      	movs	r2, #1
 8005680:	4013      	ands	r3, r2
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d1ee      	bne.n	8005666 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2202      	movs	r2, #2
 800568e:	4013      	ands	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005692:	4b83      	ldr	r3, [pc, #524]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	22f0      	movs	r2, #240	; 0xf0
 8005698:	4393      	bics	r3, r2
 800569a:	0019      	movs	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	4b7f      	ldr	r3, [pc, #508]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 80056a2:	430a      	orrs	r2, r1
 80056a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2201      	movs	r2, #1
 80056ac:	4013      	ands	r3, r2
 80056ae:	d100      	bne.n	80056b2 <HAL_RCC_ClockConfig+0x8a>
 80056b0:	e089      	b.n	80057c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d107      	bne.n	80056ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056ba:	4b79      	ldr	r3, [pc, #484]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	4013      	ands	r3, r2
 80056c4:	d120      	bne.n	8005708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e0e1      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d107      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056d2:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	2380      	movs	r3, #128	; 0x80
 80056d8:	049b      	lsls	r3, r3, #18
 80056da:	4013      	ands	r3, r2
 80056dc:	d114      	bne.n	8005708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0d5      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d106      	bne.n	80056f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ea:	4b6d      	ldr	r3, [pc, #436]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2204      	movs	r2, #4
 80056f0:	4013      	ands	r3, r2
 80056f2:	d109      	bne.n	8005708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0ca      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056f8:	4b69      	ldr	r3, [pc, #420]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4013      	ands	r3, r2
 8005702:	d101      	bne.n	8005708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0c2      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005708:	4b65      	ldr	r3, [pc, #404]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2203      	movs	r2, #3
 800570e:	4393      	bics	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	4b62      	ldr	r3, [pc, #392]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 8005718:	430a      	orrs	r2, r1
 800571a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800571c:	f7ff f86a 	bl	80047f4 <HAL_GetTick>
 8005720:	0003      	movs	r3, r0
 8005722:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d111      	bne.n	8005750 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800572c:	e009      	b.n	8005742 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800572e:	f7ff f861 	bl	80047f4 <HAL_GetTick>
 8005732:	0002      	movs	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	4a58      	ldr	r2, [pc, #352]	; (800589c <HAL_RCC_ClockConfig+0x274>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e0a5      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005742:	4b57      	ldr	r3, [pc, #348]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	220c      	movs	r2, #12
 8005748:	4013      	ands	r3, r2
 800574a:	2b08      	cmp	r3, #8
 800574c:	d1ef      	bne.n	800572e <HAL_RCC_ClockConfig+0x106>
 800574e:	e03a      	b.n	80057c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d111      	bne.n	800577c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005758:	e009      	b.n	800576e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800575a:	f7ff f84b 	bl	80047f4 <HAL_GetTick>
 800575e:	0002      	movs	r2, r0
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	4a4d      	ldr	r2, [pc, #308]	; (800589c <HAL_RCC_ClockConfig+0x274>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e08f      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800576e:	4b4c      	ldr	r3, [pc, #304]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	220c      	movs	r2, #12
 8005774:	4013      	ands	r3, r2
 8005776:	2b0c      	cmp	r3, #12
 8005778:	d1ef      	bne.n	800575a <HAL_RCC_ClockConfig+0x132>
 800577a:	e024      	b.n	80057c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d11b      	bne.n	80057bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005784:	e009      	b.n	800579a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005786:	f7ff f835 	bl	80047f4 <HAL_GetTick>
 800578a:	0002      	movs	r2, r0
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	4a42      	ldr	r2, [pc, #264]	; (800589c <HAL_RCC_ClockConfig+0x274>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e079      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800579a:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	220c      	movs	r2, #12
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d1ef      	bne.n	8005786 <HAL_RCC_ClockConfig+0x15e>
 80057a6:	e00e      	b.n	80057c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a8:	f7ff f824 	bl	80047f4 <HAL_GetTick>
 80057ac:	0002      	movs	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	4a3a      	ldr	r2, [pc, #232]	; (800589c <HAL_RCC_ClockConfig+0x274>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e068      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80057bc:	4b38      	ldr	r3, [pc, #224]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	220c      	movs	r2, #12
 80057c2:	4013      	ands	r3, r2
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057c6:	4b34      	ldr	r3, [pc, #208]	; (8005898 <HAL_RCC_ClockConfig+0x270>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2201      	movs	r2, #1
 80057cc:	4013      	ands	r3, r2
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d21e      	bcs.n	8005812 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d4:	4b30      	ldr	r3, [pc, #192]	; (8005898 <HAL_RCC_ClockConfig+0x270>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	4393      	bics	r3, r2
 80057dc:	0019      	movs	r1, r3
 80057de:	4b2e      	ldr	r3, [pc, #184]	; (8005898 <HAL_RCC_ClockConfig+0x270>)
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057e6:	f7ff f805 	bl	80047f4 <HAL_GetTick>
 80057ea:	0003      	movs	r3, r0
 80057ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	e009      	b.n	8005804 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f0:	f7ff f800 	bl	80047f4 <HAL_GetTick>
 80057f4:	0002      	movs	r2, r0
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	4a28      	ldr	r2, [pc, #160]	; (800589c <HAL_RCC_ClockConfig+0x274>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e044      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005804:	4b24      	ldr	r3, [pc, #144]	; (8005898 <HAL_RCC_ClockConfig+0x270>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2201      	movs	r2, #1
 800580a:	4013      	ands	r3, r2
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d1ee      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2204      	movs	r2, #4
 8005818:	4013      	ands	r3, r2
 800581a:	d009      	beq.n	8005830 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800581c:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4a20      	ldr	r2, [pc, #128]	; (80058a4 <HAL_RCC_ClockConfig+0x27c>)
 8005822:	4013      	ands	r3, r2
 8005824:	0019      	movs	r1, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800582c:	430a      	orrs	r2, r1
 800582e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2208      	movs	r2, #8
 8005836:	4013      	ands	r3, r2
 8005838:	d00a      	beq.n	8005850 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800583a:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4a1a      	ldr	r2, [pc, #104]	; (80058a8 <HAL_RCC_ClockConfig+0x280>)
 8005840:	4013      	ands	r3, r2
 8005842:	0019      	movs	r1, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	00da      	lsls	r2, r3, #3
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800584c:	430a      	orrs	r2, r1
 800584e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005850:	f000 f832 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8005854:	0001      	movs	r1, r0
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	091b      	lsrs	r3, r3, #4
 800585c:	220f      	movs	r2, #15
 800585e:	4013      	ands	r3, r2
 8005860:	4a12      	ldr	r2, [pc, #72]	; (80058ac <HAL_RCC_ClockConfig+0x284>)
 8005862:	5cd3      	ldrb	r3, [r2, r3]
 8005864:	000a      	movs	r2, r1
 8005866:	40da      	lsrs	r2, r3
 8005868:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <HAL_RCC_ClockConfig+0x288>)
 800586a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <HAL_RCC_ClockConfig+0x28c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	250b      	movs	r5, #11
 8005872:	197c      	adds	r4, r7, r5
 8005874:	0018      	movs	r0, r3
 8005876:	f7fe ff77 	bl	8004768 <HAL_InitTick>
 800587a:	0003      	movs	r3, r0
 800587c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800587e:	197b      	adds	r3, r7, r5
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005886:	197b      	adds	r3, r7, r5
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	e000      	b.n	800588e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b004      	add	sp, #16
 8005894:	bdb0      	pop	{r4, r5, r7, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	40022000 	.word	0x40022000
 800589c:	00001388 	.word	0x00001388
 80058a0:	40021000 	.word	0x40021000
 80058a4:	fffff8ff 	.word	0xfffff8ff
 80058a8:	ffffc7ff 	.word	0xffffc7ff
 80058ac:	0800a4b4 	.word	0x0800a4b4
 80058b0:	20000064 	.word	0x20000064
 80058b4:	20000068 	.word	0x20000068

080058b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b8:	b5b0      	push	{r4, r5, r7, lr}
 80058ba:	b08e      	sub	sp, #56	; 0x38
 80058bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80058be:	4b4c      	ldr	r3, [pc, #304]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c6:	230c      	movs	r3, #12
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b0c      	cmp	r3, #12
 80058cc:	d014      	beq.n	80058f8 <HAL_RCC_GetSysClockFreq+0x40>
 80058ce:	d900      	bls.n	80058d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80058d0:	e07b      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x112>
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d002      	beq.n	80058dc <HAL_RCC_GetSysClockFreq+0x24>
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d00b      	beq.n	80058f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80058da:	e076      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80058dc:	4b44      	ldr	r3, [pc, #272]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2210      	movs	r2, #16
 80058e2:	4013      	ands	r3, r2
 80058e4:	d002      	beq.n	80058ec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80058e6:	4b43      	ldr	r3, [pc, #268]	; (80059f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80058e8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80058ea:	e07c      	b.n	80059e6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80058ec:	4b42      	ldr	r3, [pc, #264]	; (80059f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80058ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058f0:	e079      	b.n	80059e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058f2:	4b42      	ldr	r3, [pc, #264]	; (80059fc <HAL_RCC_GetSysClockFreq+0x144>)
 80058f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058f6:	e076      	b.n	80059e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80058f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fa:	0c9a      	lsrs	r2, r3, #18
 80058fc:	230f      	movs	r3, #15
 80058fe:	401a      	ands	r2, r3
 8005900:	4b3f      	ldr	r3, [pc, #252]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x148>)
 8005902:	5c9b      	ldrb	r3, [r3, r2]
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	0d9a      	lsrs	r2, r3, #22
 800590a:	2303      	movs	r3, #3
 800590c:	4013      	ands	r3, r2
 800590e:	3301      	adds	r3, #1
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005912:	4b37      	ldr	r3, [pc, #220]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	025b      	lsls	r3, r3, #9
 800591a:	4013      	ands	r3, r2
 800591c:	d01a      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	4a35      	ldr	r2, [pc, #212]	; (80059fc <HAL_RCC_GetSysClockFreq+0x144>)
 8005928:	2300      	movs	r3, #0
 800592a:	69b8      	ldr	r0, [r7, #24]
 800592c:	69f9      	ldr	r1, [r7, #28]
 800592e:	f7fa fd21 	bl	8000374 <__aeabi_lmul>
 8005932:	0002      	movs	r2, r0
 8005934:	000b      	movs	r3, r1
 8005936:	0010      	movs	r0, r2
 8005938:	0019      	movs	r1, r3
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f7fa fcf5 	bl	8000334 <__aeabi_uldivmod>
 800594a:	0002      	movs	r2, r0
 800594c:	000b      	movs	r3, r1
 800594e:	0013      	movs	r3, r2
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
 8005952:	e037      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005954:	4b26      	ldr	r3, [pc, #152]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2210      	movs	r2, #16
 800595a:	4013      	ands	r3, r2
 800595c:	d01a      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	4a23      	ldr	r2, [pc, #140]	; (80059f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005968:	2300      	movs	r3, #0
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	f7fa fd01 	bl	8000374 <__aeabi_lmul>
 8005972:	0002      	movs	r2, r0
 8005974:	000b      	movs	r3, r1
 8005976:	0010      	movs	r0, r2
 8005978:	0019      	movs	r1, r3
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	2300      	movs	r3, #0
 8005980:	607b      	str	r3, [r7, #4]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f7fa fcd5 	bl	8000334 <__aeabi_uldivmod>
 800598a:	0002      	movs	r2, r0
 800598c:	000b      	movs	r3, r1
 800598e:	0013      	movs	r3, r2
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
 8005992:	e017      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	0018      	movs	r0, r3
 8005998:	2300      	movs	r3, #0
 800599a:	0019      	movs	r1, r3
 800599c:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <HAL_RCC_GetSysClockFreq+0x140>)
 800599e:	2300      	movs	r3, #0
 80059a0:	f7fa fce8 	bl	8000374 <__aeabi_lmul>
 80059a4:	0002      	movs	r2, r0
 80059a6:	000b      	movs	r3, r1
 80059a8:	0010      	movs	r0, r2
 80059aa:	0019      	movs	r1, r3
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	001c      	movs	r4, r3
 80059b0:	2300      	movs	r3, #0
 80059b2:	001d      	movs	r5, r3
 80059b4:	0022      	movs	r2, r4
 80059b6:	002b      	movs	r3, r5
 80059b8:	f7fa fcbc 	bl	8000334 <__aeabi_uldivmod>
 80059bc:	0002      	movs	r2, r0
 80059be:	000b      	movs	r3, r1
 80059c0:	0013      	movs	r3, r2
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80059c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059c8:	e00d      	b.n	80059e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80059ca:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	0b5b      	lsrs	r3, r3, #13
 80059d0:	2207      	movs	r2, #7
 80059d2:	4013      	ands	r3, r2
 80059d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	3301      	adds	r3, #1
 80059da:	2280      	movs	r2, #128	; 0x80
 80059dc:	0212      	lsls	r2, r2, #8
 80059de:	409a      	lsls	r2, r3
 80059e0:	0013      	movs	r3, r2
 80059e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059e4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b00e      	add	sp, #56	; 0x38
 80059ee:	bdb0      	pop	{r4, r5, r7, pc}
 80059f0:	40021000 	.word	0x40021000
 80059f4:	003d0900 	.word	0x003d0900
 80059f8:	00f42400 	.word	0x00f42400
 80059fc:	007a1200 	.word	0x007a1200
 8005a00:	0800a4cc 	.word	0x0800a4cc

08005a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a08:	4b02      	ldr	r3, [pc, #8]	; (8005a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
}
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	20000064 	.word	0x20000064

08005a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a1c:	f7ff fff2 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 8005a20:	0001      	movs	r1, r0
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	2207      	movs	r2, #7
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a2e:	5cd3      	ldrb	r3, [r2, r3]
 8005a30:	40d9      	lsrs	r1, r3
 8005a32:	000b      	movs	r3, r1
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	0800a4c4 	.word	0x0800a4c4

08005a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a48:	f7ff ffdc 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 8005a4c:	0001      	movs	r1, r0
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	0adb      	lsrs	r3, r3, #11
 8005a54:	2207      	movs	r2, #7
 8005a56:	4013      	ands	r3, r2
 8005a58:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a5a:	5cd3      	ldrb	r3, [r2, r3]
 8005a5c:	40d9      	lsrs	r1, r3
 8005a5e:	000b      	movs	r3, r1
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	0800a4c4 	.word	0x0800a4c4

08005a70 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005a78:	2017      	movs	r0, #23
 8005a7a:	183b      	adds	r3, r7, r0
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2220      	movs	r2, #32
 8005a86:	4013      	ands	r3, r2
 8005a88:	d100      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005a8a:	e0c7      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a8c:	4b93      	ldr	r3, [pc, #588]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	055b      	lsls	r3, r3, #21
 8005a94:	4013      	ands	r3, r2
 8005a96:	d109      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a98:	4b90      	ldr	r3, [pc, #576]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9c:	4b8f      	ldr	r3, [pc, #572]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005a9e:	2180      	movs	r1, #128	; 0x80
 8005aa0:	0549      	lsls	r1, r1, #21
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005aa6:	183b      	adds	r3, r7, r0
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aac:	4b8c      	ldr	r3, [pc, #560]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d11a      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab8:	4b89      	ldr	r3, [pc, #548]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4b88      	ldr	r3, [pc, #544]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005abe:	2180      	movs	r1, #128	; 0x80
 8005ac0:	0049      	lsls	r1, r1, #1
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac6:	f7fe fe95 	bl	80047f4 <HAL_GetTick>
 8005aca:	0003      	movs	r3, r0
 8005acc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ace:	e008      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad0:	f7fe fe90 	bl	80047f4 <HAL_GetTick>
 8005ad4:	0002      	movs	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e0f8      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae2:	4b7f      	ldr	r3, [pc, #508]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4013      	ands	r3, r2
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005aee:	4b7b      	ldr	r3, [pc, #492]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	23c0      	movs	r3, #192	; 0xc0
 8005af4:	039b      	lsls	r3, r3, #14
 8005af6:	4013      	ands	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	23c0      	movs	r3, #192	; 0xc0
 8005b00:	039b      	lsls	r3, r3, #14
 8005b02:	4013      	ands	r3, r2
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d013      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	23c0      	movs	r3, #192	; 0xc0
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	401a      	ands	r2, r3
 8005b14:	23c0      	movs	r3, #192	; 0xc0
 8005b16:	029b      	lsls	r3, r3, #10
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d10a      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b1c:	4b6f      	ldr	r3, [pc, #444]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	029b      	lsls	r3, r3, #10
 8005b24:	401a      	ands	r2, r3
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	029b      	lsls	r3, r3, #10
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d101      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e0d0      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005b32:	4b6a      	ldr	r3, [pc, #424]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b36:	23c0      	movs	r3, #192	; 0xc0
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d03b      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	23c0      	movs	r3, #192	; 0xc0
 8005b4a:	029b      	lsls	r3, r3, #10
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d033      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d02e      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b5e:	4b5f      	ldr	r3, [pc, #380]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b62:	4a60      	ldr	r2, [pc, #384]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b68:	4b5c      	ldr	r3, [pc, #368]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b6c:	4b5b      	ldr	r3, [pc, #364]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b6e:	2180      	movs	r1, #128	; 0x80
 8005b70:	0309      	lsls	r1, r1, #12
 8005b72:	430a      	orrs	r2, r1
 8005b74:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b76:	4b59      	ldr	r3, [pc, #356]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b7a:	4b58      	ldr	r3, [pc, #352]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b7c:	495a      	ldr	r1, [pc, #360]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005b7e:	400a      	ands	r2, r1
 8005b80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b82:	4b56      	ldr	r3, [pc, #344]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d014      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b92:	f7fe fe2f 	bl	80047f4 <HAL_GetTick>
 8005b96:	0003      	movs	r3, r0
 8005b98:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b9a:	e009      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b9c:	f7fe fe2a 	bl	80047f4 <HAL_GetTick>
 8005ba0:	0002      	movs	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	4a51      	ldr	r2, [pc, #324]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e091      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bb0:	4b4a      	ldr	r3, [pc, #296]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d0ef      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d01f      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	23c0      	movs	r3, #192	; 0xc0
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	401a      	ands	r2, r3
 8005bd0:	23c0      	movs	r3, #192	; 0xc0
 8005bd2:	029b      	lsls	r3, r3, #10
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d10c      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005bd8:	4b40      	ldr	r3, [pc, #256]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a44      	ldr	r2, [pc, #272]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	0019      	movs	r1, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	23c0      	movs	r3, #192	; 0xc0
 8005be8:	039b      	lsls	r3, r3, #14
 8005bea:	401a      	ands	r2, r3
 8005bec:	4b3b      	ldr	r3, [pc, #236]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	4b3a      	ldr	r3, [pc, #232]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005bf4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	23c0      	movs	r3, #192	; 0xc0
 8005bfc:	029b      	lsls	r3, r3, #10
 8005bfe:	401a      	ands	r2, r3
 8005c00:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c02:	430a      	orrs	r2, r1
 8005c04:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c06:	2317      	movs	r3, #23
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d105      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c10:	4b32      	ldr	r3, [pc, #200]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c14:	4b31      	ldr	r3, [pc, #196]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c16:	4937      	ldr	r1, [pc, #220]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c18:	400a      	ands	r2, r1
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	4013      	ands	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c26:	4b2d      	ldr	r3, [pc, #180]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	4393      	bics	r3, r2
 8005c2e:	0019      	movs	r1, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c36:	430a      	orrs	r2, r1
 8005c38:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	4013      	ands	r3, r2
 8005c42:	d009      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c44:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c48:	220c      	movs	r2, #12
 8005c4a:	4393      	bics	r3, r2
 8005c4c:	0019      	movs	r1, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	4b22      	ldr	r3, [pc, #136]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c54:	430a      	orrs	r2, r1
 8005c56:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d009      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c62:	4b1e      	ldr	r3, [pc, #120]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c66:	4a24      	ldr	r2, [pc, #144]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c72:	430a      	orrs	r2, r1
 8005c74:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c80:	4b16      	ldr	r3, [pc, #88]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c84:	4a1d      	ldr	r2, [pc, #116]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695a      	ldr	r2, [r3, #20]
 8005c8e:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c90:	430a      	orrs	r2, r1
 8005c92:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ca0:	4b0e      	ldr	r3, [pc, #56]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca4:	4a0f      	ldr	r2, [pc, #60]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	0019      	movs	r1, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d009      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005cbe:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc2:	4a0f      	ldr	r2, [pc, #60]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b006      	add	sp, #24
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	40007000 	.word	0x40007000
 8005ce4:	fffcffff 	.word	0xfffcffff
 8005ce8:	fff7ffff 	.word	0xfff7ffff
 8005cec:	00001388 	.word	0x00001388
 8005cf0:	ffcfffff 	.word	0xffcfffff
 8005cf4:	efffffff 	.word	0xefffffff
 8005cf8:	fffff3ff 	.word	0xfffff3ff
 8005cfc:	ffffcfff 	.word	0xffffcfff
 8005d00:	fff3ffff 	.word	0xfff3ffff

08005d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e032      	b.n	8005d7c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2239      	movs	r2, #57	; 0x39
 8005d1a:	5c9b      	ldrb	r3, [r3, r2]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d107      	bne.n	8005d32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2238      	movs	r2, #56	; 0x38
 8005d26:	2100      	movs	r1, #0
 8005d28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f7fe fb6f 	bl	8004410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2239      	movs	r2, #57	; 0x39
 8005d36:	2102      	movs	r1, #2
 8005d38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3304      	adds	r3, #4
 8005d42:	0019      	movs	r1, r3
 8005d44:	0010      	movs	r0, r2
 8005d46:	f000 f977 	bl	8006038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	223e      	movs	r2, #62	; 0x3e
 8005d4e:	2101      	movs	r1, #1
 8005d50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	223a      	movs	r2, #58	; 0x3a
 8005d56:	2101      	movs	r1, #1
 8005d58:	5499      	strb	r1, [r3, r2]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	223b      	movs	r2, #59	; 0x3b
 8005d5e:	2101      	movs	r1, #1
 8005d60:	5499      	strb	r1, [r3, r2]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	223c      	movs	r2, #60	; 0x3c
 8005d66:	2101      	movs	r1, #1
 8005d68:	5499      	strb	r1, [r3, r2]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	223d      	movs	r2, #61	; 0x3d
 8005d6e:	2101      	movs	r1, #1
 8005d70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2239      	movs	r2, #57	; 0x39
 8005d76:	2101      	movs	r1, #1
 8005d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b002      	add	sp, #8
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2239      	movs	r2, #57	; 0x39
 8005d90:	5c9b      	ldrb	r3, [r3, r2]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d001      	beq.n	8005d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e03b      	b.n	8005e14 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2239      	movs	r2, #57	; 0x39
 8005da0:	2102      	movs	r1, #2
 8005da2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2101      	movs	r1, #1
 8005db0:	430a      	orrs	r2, r1
 8005db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	2380      	movs	r3, #128	; 0x80
 8005dba:	05db      	lsls	r3, r3, #23
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d00e      	beq.n	8005dde <HAL_TIM_Base_Start_IT+0x5a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <HAL_TIM_Base_Start_IT+0x98>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_TIM_Base_Start_IT+0x5a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <HAL_TIM_Base_Start_IT+0x9c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_TIM_Base_Start_IT+0x5a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <HAL_TIM_Base_Start_IT+0xa0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d111      	bne.n	8005e02 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2207      	movs	r2, #7
 8005de6:	4013      	ands	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b06      	cmp	r3, #6
 8005dee:	d010      	beq.n	8005e12 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e00:	e007      	b.n	8005e12 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	0018      	movs	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b004      	add	sp, #16
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40010800 	.word	0x40010800
 8005e24:	40011400 	.word	0x40011400

08005e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2202      	movs	r2, #2
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d124      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2202      	movs	r2, #2
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d11d      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2203      	movs	r2, #3
 8005e52:	4252      	negs	r2, r2
 8005e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2203      	movs	r2, #3
 8005e64:	4013      	ands	r3, r2
 8005e66:	d004      	beq.n	8005e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f000 f8cc 	bl	8006008 <HAL_TIM_IC_CaptureCallback>
 8005e70:	e007      	b.n	8005e82 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0018      	movs	r0, r3
 8005e76:	f000 f8bf 	bl	8005ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 f8cb 	bl	8006018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2204      	movs	r2, #4
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d125      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d11e      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2205      	movs	r2, #5
 8005eaa:	4252      	negs	r2, r2
 8005eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	23c0      	movs	r3, #192	; 0xc0
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 f89f 	bl	8006008 <HAL_TIM_IC_CaptureCallback>
 8005eca:	e007      	b.n	8005edc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f000 f892 	bl	8005ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f000 f89e 	bl	8006018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d124      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d11d      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2209      	movs	r2, #9
 8005f04:	4252      	negs	r2, r2
 8005f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2204      	movs	r2, #4
 8005f0c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	2203      	movs	r2, #3
 8005f16:	4013      	ands	r3, r2
 8005f18:	d004      	beq.n	8005f24 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f000 f873 	bl	8006008 <HAL_TIM_IC_CaptureCallback>
 8005f22:	e007      	b.n	8005f34 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 f866 	bl	8005ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f000 f872 	bl	8006018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2210      	movs	r2, #16
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d125      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d11e      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2211      	movs	r2, #17
 8005f5c:	4252      	negs	r2, r2
 8005f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2208      	movs	r2, #8
 8005f64:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69da      	ldr	r2, [r3, #28]
 8005f6c:	23c0      	movs	r3, #192	; 0xc0
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4013      	ands	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 f846 	bl	8006008 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e007      	b.n	8005f8e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f839 	bl	8005ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 f845 	bl	8006018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d10f      	bne.n	8005fc2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d108      	bne.n	8005fc2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	4252      	negs	r2, r2
 8005fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7fd ff19 	bl	8003df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2240      	movs	r2, #64	; 0x40
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	d10f      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	2240      	movs	r2, #64	; 0x40
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b40      	cmp	r3, #64	; 0x40
 8005fdc:	d108      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2241      	movs	r2, #65	; 0x41
 8005fe4:	4252      	negs	r2, r2
 8005fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	0018      	movs	r0, r3
 8005fec:	f000 f81c 	bl	8006028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ff0:	46c0      	nop			; (mov r8, r8)
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b002      	add	sp, #8
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006000:	46c0      	nop			; (mov r8, r8)
 8006002:	46bd      	mov	sp, r7
 8006004:	b002      	add	sp, #8
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	b002      	add	sp, #8
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006020:	46c0      	nop			; (mov r8, r8)
 8006022:	46bd      	mov	sp, r7
 8006024:	b002      	add	sp, #8
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}

08006038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	2380      	movs	r3, #128	; 0x80
 800604c:	05db      	lsls	r3, r3, #23
 800604e:	429a      	cmp	r2, r3
 8006050:	d00b      	beq.n	800606a <TIM_Base_SetConfig+0x32>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a23      	ldr	r2, [pc, #140]	; (80060e4 <TIM_Base_SetConfig+0xac>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d007      	beq.n	800606a <TIM_Base_SetConfig+0x32>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <TIM_Base_SetConfig+0xb0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_Base_SetConfig+0x32>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a21      	ldr	r2, [pc, #132]	; (80060ec <TIM_Base_SetConfig+0xb4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d108      	bne.n	800607c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2270      	movs	r2, #112	; 0x70
 800606e:	4393      	bics	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	05db      	lsls	r3, r3, #23
 8006082:	429a      	cmp	r2, r3
 8006084:	d00b      	beq.n	800609e <TIM_Base_SetConfig+0x66>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <TIM_Base_SetConfig+0xac>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d007      	beq.n	800609e <TIM_Base_SetConfig+0x66>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <TIM_Base_SetConfig+0xb0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_Base_SetConfig+0x66>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a14      	ldr	r2, [pc, #80]	; (80060ec <TIM_Base_SetConfig+0xb4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d108      	bne.n	80060b0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4a13      	ldr	r2, [pc, #76]	; (80060f0 <TIM_Base_SetConfig+0xb8>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	4393      	bics	r3, r2
 80060b6:	001a      	movs	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	615a      	str	r2, [r3, #20]
}
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b004      	add	sp, #16
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40010800 	.word	0x40010800
 80060ec:	40011400 	.word	0x40011400
 80060f0:	fffffcff 	.word	0xfffffcff

080060f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2238      	movs	r2, #56	; 0x38
 8006102:	5c9b      	ldrb	r3, [r3, r2]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006108:	2302      	movs	r3, #2
 800610a:	e047      	b.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2238      	movs	r2, #56	; 0x38
 8006110:	2101      	movs	r1, #1
 8006112:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2239      	movs	r2, #57	; 0x39
 8006118:	2102      	movs	r1, #2
 800611a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2270      	movs	r2, #112	; 0x70
 8006130:	4393      	bics	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	05db      	lsls	r3, r3, #23
 800614e:	429a      	cmp	r2, r3
 8006150:	d00e      	beq.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d009      	beq.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a11      	ldr	r2, [pc, #68]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d004      	beq.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a10      	ldr	r2, [pc, #64]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d10c      	bne.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2280      	movs	r2, #128	; 0x80
 8006174:	4393      	bics	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2239      	movs	r2, #57	; 0x39
 800618e:	2101      	movs	r1, #1
 8006190:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2238      	movs	r2, #56	; 0x38
 8006196:	2100      	movs	r1, #0
 8006198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	0018      	movs	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	b004      	add	sp, #16
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40010800 	.word	0x40010800
 80061ac:	40011400 	.word	0x40011400

080061b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e044      	b.n	800624c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2278      	movs	r2, #120	; 0x78
 80061ce:	2100      	movs	r1, #0
 80061d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7fe f93b 	bl	8004450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2224      	movs	r2, #36	; 0x24
 80061de:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2101      	movs	r1, #1
 80061ec:	438a      	bics	r2, r1
 80061ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f000 fbca 	bl	800698c <UART_SetConfig>
 80061f8:	0003      	movs	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e024      	b.n	800624c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	0018      	movs	r0, r3
 800620e:	f000 fe5b 	bl	8006ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	490d      	ldr	r1, [pc, #52]	; (8006254 <HAL_UART_Init+0xa4>)
 800621e:	400a      	ands	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	212a      	movs	r1, #42	; 0x2a
 800622e:	438a      	bics	r2, r1
 8006230:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2101      	movs	r1, #1
 800623e:	430a      	orrs	r2, r1
 8006240:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	0018      	movs	r0, r3
 8006246:	f000 fef3 	bl	8007030 <UART_CheckIdleState>
 800624a:	0003      	movs	r3, r0
}
 800624c:	0018      	movs	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	b002      	add	sp, #8
 8006252:	bd80      	pop	{r7, pc}
 8006254:	ffffb7ff 	.word	0xffffb7ff

08006258 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	1dbb      	adds	r3, r7, #6
 8006266:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800626c:	2b20      	cmp	r3, #32
 800626e:	d000      	beq.n	8006272 <HAL_UART_Transmit+0x1a>
 8006270:	e08c      	b.n	800638c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_UART_Transmit+0x28>
 8006278:	1dbb      	adds	r3, r7, #6
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e084      	b.n	800638e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	2380      	movs	r3, #128	; 0x80
 800628a:	015b      	lsls	r3, r3, #5
 800628c:	429a      	cmp	r2, r3
 800628e:	d109      	bne.n	80062a4 <HAL_UART_Transmit+0x4c>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d105      	bne.n	80062a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2201      	movs	r2, #1
 800629c:	4013      	ands	r3, r2
 800629e:	d001      	beq.n	80062a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e074      	b.n	800638e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2284      	movs	r2, #132	; 0x84
 80062a8:	2100      	movs	r1, #0
 80062aa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2221      	movs	r2, #33	; 0x21
 80062b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062b2:	f7fe fa9f 	bl	80047f4 <HAL_GetTick>
 80062b6:	0003      	movs	r3, r0
 80062b8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1dba      	adds	r2, r7, #6
 80062be:	2150      	movs	r1, #80	; 0x50
 80062c0:	8812      	ldrh	r2, [r2, #0]
 80062c2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1dba      	adds	r2, r7, #6
 80062c8:	2152      	movs	r1, #82	; 0x52
 80062ca:	8812      	ldrh	r2, [r2, #0]
 80062cc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	2380      	movs	r3, #128	; 0x80
 80062d4:	015b      	lsls	r3, r3, #5
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d108      	bne.n	80062ec <HAL_UART_Transmit+0x94>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	e003      	b.n	80062f4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062f4:	e02f      	b.n	8006356 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	0013      	movs	r3, r2
 8006300:	2200      	movs	r2, #0
 8006302:	2180      	movs	r1, #128	; 0x80
 8006304:	f000 ff3c 	bl	8007180 <UART_WaitOnFlagUntilTimeout>
 8006308:	1e03      	subs	r3, r0, #0
 800630a:	d004      	beq.n	8006316 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e03b      	b.n	800638e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	001a      	movs	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	05d2      	lsls	r2, r2, #23
 8006328:	0dd2      	lsrs	r2, r2, #23
 800632a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	3302      	adds	r3, #2
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e007      	b.n	8006344 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3301      	adds	r3, #1
 8006342:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2252      	movs	r2, #82	; 0x52
 8006348:	5a9b      	ldrh	r3, [r3, r2]
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b299      	uxth	r1, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2252      	movs	r2, #82	; 0x52
 8006354:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2252      	movs	r2, #82	; 0x52
 800635a:	5a9b      	ldrh	r3, [r3, r2]
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1c9      	bne.n	80062f6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	0013      	movs	r3, r2
 800636c:	2200      	movs	r2, #0
 800636e:	2140      	movs	r1, #64	; 0x40
 8006370:	f000 ff06 	bl	8007180 <UART_WaitOnFlagUntilTimeout>
 8006374:	1e03      	subs	r3, r0, #0
 8006376:	d004      	beq.n	8006382 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e005      	b.n	800638e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	e000      	b.n	800638e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
  }
}
 800638e:	0018      	movs	r0, r3
 8006390:	46bd      	mov	sp, r7
 8006392:	b008      	add	sp, #32
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006398:	b590      	push	{r4, r7, lr}
 800639a:	b0ab      	sub	sp, #172	; 0xac
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	22a4      	movs	r2, #164	; 0xa4
 80063a8:	18b9      	adds	r1, r7, r2
 80063aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	20a0      	movs	r0, #160	; 0xa0
 80063b4:	1839      	adds	r1, r7, r0
 80063b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	219c      	movs	r1, #156	; 0x9c
 80063c0:	1879      	adds	r1, r7, r1
 80063c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063c4:	0011      	movs	r1, r2
 80063c6:	18bb      	adds	r3, r7, r2
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a99      	ldr	r2, [pc, #612]	; (8006630 <HAL_UART_IRQHandler+0x298>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	2298      	movs	r2, #152	; 0x98
 80063d0:	18bc      	adds	r4, r7, r2
 80063d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80063d4:	18bb      	adds	r3, r7, r2
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d114      	bne.n	8006406 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063dc:	187b      	adds	r3, r7, r1
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2220      	movs	r2, #32
 80063e2:	4013      	ands	r3, r2
 80063e4:	d00f      	beq.n	8006406 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063e6:	183b      	adds	r3, r7, r0
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2220      	movs	r2, #32
 80063ec:	4013      	ands	r3, r2
 80063ee:	d00a      	beq.n	8006406 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d100      	bne.n	80063fa <HAL_UART_IRQHandler+0x62>
 80063f8:	e2a0      	b.n	800693c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	0010      	movs	r0, r2
 8006402:	4798      	blx	r3
      }
      return;
 8006404:	e29a      	b.n	800693c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006406:	2398      	movs	r3, #152	; 0x98
 8006408:	18fb      	adds	r3, r7, r3
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d100      	bne.n	8006412 <HAL_UART_IRQHandler+0x7a>
 8006410:	e114      	b.n	800663c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006412:	239c      	movs	r3, #156	; 0x9c
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2201      	movs	r2, #1
 800641a:	4013      	ands	r3, r2
 800641c:	d106      	bne.n	800642c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800641e:	23a0      	movs	r3, #160	; 0xa0
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a83      	ldr	r2, [pc, #524]	; (8006634 <HAL_UART_IRQHandler+0x29c>)
 8006426:	4013      	ands	r3, r2
 8006428:	d100      	bne.n	800642c <HAL_UART_IRQHandler+0x94>
 800642a:	e107      	b.n	800663c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800642c:	23a4      	movs	r3, #164	; 0xa4
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2201      	movs	r2, #1
 8006434:	4013      	ands	r3, r2
 8006436:	d012      	beq.n	800645e <HAL_UART_IRQHandler+0xc6>
 8006438:	23a0      	movs	r3, #160	; 0xa0
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	4013      	ands	r3, r2
 8006444:	d00b      	beq.n	800645e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2201      	movs	r2, #1
 800644c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2284      	movs	r2, #132	; 0x84
 8006452:	589b      	ldr	r3, [r3, r2]
 8006454:	2201      	movs	r2, #1
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2184      	movs	r1, #132	; 0x84
 800645c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800645e:	23a4      	movs	r3, #164	; 0xa4
 8006460:	18fb      	adds	r3, r7, r3
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2202      	movs	r2, #2
 8006466:	4013      	ands	r3, r2
 8006468:	d011      	beq.n	800648e <HAL_UART_IRQHandler+0xf6>
 800646a:	239c      	movs	r3, #156	; 0x9c
 800646c:	18fb      	adds	r3, r7, r3
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2201      	movs	r2, #1
 8006472:	4013      	ands	r3, r2
 8006474:	d00b      	beq.n	800648e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2202      	movs	r2, #2
 800647c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2284      	movs	r2, #132	; 0x84
 8006482:	589b      	ldr	r3, [r3, r2]
 8006484:	2204      	movs	r2, #4
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2184      	movs	r1, #132	; 0x84
 800648c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800648e:	23a4      	movs	r3, #164	; 0xa4
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2204      	movs	r2, #4
 8006496:	4013      	ands	r3, r2
 8006498:	d011      	beq.n	80064be <HAL_UART_IRQHandler+0x126>
 800649a:	239c      	movs	r3, #156	; 0x9c
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2201      	movs	r2, #1
 80064a2:	4013      	ands	r3, r2
 80064a4:	d00b      	beq.n	80064be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2204      	movs	r2, #4
 80064ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2284      	movs	r2, #132	; 0x84
 80064b2:	589b      	ldr	r3, [r3, r2]
 80064b4:	2202      	movs	r2, #2
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2184      	movs	r1, #132	; 0x84
 80064bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064be:	23a4      	movs	r3, #164	; 0xa4
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2208      	movs	r2, #8
 80064c6:	4013      	ands	r3, r2
 80064c8:	d017      	beq.n	80064fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064ca:	23a0      	movs	r3, #160	; 0xa0
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2220      	movs	r2, #32
 80064d2:	4013      	ands	r3, r2
 80064d4:	d105      	bne.n	80064e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064d6:	239c      	movs	r3, #156	; 0x9c
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2201      	movs	r2, #1
 80064de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064e0:	d00b      	beq.n	80064fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2208      	movs	r2, #8
 80064e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2284      	movs	r2, #132	; 0x84
 80064ee:	589b      	ldr	r3, [r3, r2]
 80064f0:	2208      	movs	r2, #8
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2184      	movs	r1, #132	; 0x84
 80064f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064fa:	23a4      	movs	r3, #164	; 0xa4
 80064fc:	18fb      	adds	r3, r7, r3
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	4013      	ands	r3, r2
 8006506:	d013      	beq.n	8006530 <HAL_UART_IRQHandler+0x198>
 8006508:	23a0      	movs	r3, #160	; 0xa0
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	2380      	movs	r3, #128	; 0x80
 8006510:	04db      	lsls	r3, r3, #19
 8006512:	4013      	ands	r3, r2
 8006514:	d00c      	beq.n	8006530 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2280      	movs	r2, #128	; 0x80
 800651c:	0112      	lsls	r2, r2, #4
 800651e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2284      	movs	r2, #132	; 0x84
 8006524:	589b      	ldr	r3, [r3, r2]
 8006526:	2220      	movs	r2, #32
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2184      	movs	r1, #132	; 0x84
 800652e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2284      	movs	r2, #132	; 0x84
 8006534:	589b      	ldr	r3, [r3, r2]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d100      	bne.n	800653c <HAL_UART_IRQHandler+0x1a4>
 800653a:	e201      	b.n	8006940 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800653c:	23a4      	movs	r3, #164	; 0xa4
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2220      	movs	r2, #32
 8006544:	4013      	ands	r3, r2
 8006546:	d00e      	beq.n	8006566 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006548:	23a0      	movs	r3, #160	; 0xa0
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2220      	movs	r2, #32
 8006550:	4013      	ands	r3, r2
 8006552:	d008      	beq.n	8006566 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	0010      	movs	r0, r2
 8006564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2284      	movs	r2, #132	; 0x84
 800656a:	589b      	ldr	r3, [r3, r2]
 800656c:	2194      	movs	r1, #148	; 0x94
 800656e:	187a      	adds	r2, r7, r1
 8006570:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2240      	movs	r2, #64	; 0x40
 800657a:	4013      	ands	r3, r2
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d004      	beq.n	800658a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006580:	187b      	adds	r3, r7, r1
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2228      	movs	r2, #40	; 0x28
 8006586:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006588:	d047      	beq.n	800661a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	0018      	movs	r0, r3
 800658e:	f000 ff2b 	bl	80073e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2240      	movs	r2, #64	; 0x40
 800659a:	4013      	ands	r3, r2
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d137      	bne.n	8006610 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a0:	f3ef 8310 	mrs	r3, PRIMASK
 80065a4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80065a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a8:	2090      	movs	r0, #144	; 0x90
 80065aa:	183a      	adds	r2, r7, r0
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	2301      	movs	r3, #1
 80065b0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065b4:	f383 8810 	msr	PRIMASK, r3
}
 80065b8:	46c0      	nop			; (mov r8, r8)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2140      	movs	r1, #64	; 0x40
 80065c6:	438a      	bics	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	183b      	adds	r3, r7, r0
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065d2:	f383 8810 	msr	PRIMASK, r3
}
 80065d6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d012      	beq.n	8006606 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e4:	4a14      	ldr	r2, [pc, #80]	; (8006638 <HAL_UART_IRQHandler+0x2a0>)
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7fe fa4d 	bl	8004a8c <HAL_DMA_Abort_IT>
 80065f2:	1e03      	subs	r3, r0, #0
 80065f4:	d01a      	beq.n	800662c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006600:	0018      	movs	r0, r3
 8006602:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006604:	e012      	b.n	800662c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f000 f9b7 	bl	800697c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660e:	e00d      	b.n	800662c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	0018      	movs	r0, r3
 8006614:	f000 f9b2 	bl	800697c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006618:	e008      	b.n	800662c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	0018      	movs	r0, r3
 800661e:	f000 f9ad 	bl	800697c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2284      	movs	r2, #132	; 0x84
 8006626:	2100      	movs	r1, #0
 8006628:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800662a:	e189      	b.n	8006940 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	46c0      	nop			; (mov r8, r8)
    return;
 800662e:	e187      	b.n	8006940 <HAL_UART_IRQHandler+0x5a8>
 8006630:	0000080f 	.word	0x0000080f
 8006634:	04000120 	.word	0x04000120
 8006638:	080074b1 	.word	0x080074b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006640:	2b01      	cmp	r3, #1
 8006642:	d000      	beq.n	8006646 <HAL_UART_IRQHandler+0x2ae>
 8006644:	e13b      	b.n	80068be <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006646:	23a4      	movs	r3, #164	; 0xa4
 8006648:	18fb      	adds	r3, r7, r3
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2210      	movs	r2, #16
 800664e:	4013      	ands	r3, r2
 8006650:	d100      	bne.n	8006654 <HAL_UART_IRQHandler+0x2bc>
 8006652:	e134      	b.n	80068be <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006654:	23a0      	movs	r3, #160	; 0xa0
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2210      	movs	r2, #16
 800665c:	4013      	ands	r3, r2
 800665e:	d100      	bne.n	8006662 <HAL_UART_IRQHandler+0x2ca>
 8006660:	e12d      	b.n	80068be <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2210      	movs	r2, #16
 8006668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2240      	movs	r2, #64	; 0x40
 8006672:	4013      	ands	r3, r2
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d000      	beq.n	800667a <HAL_UART_IRQHandler+0x2e2>
 8006678:	e0a1      	b.n	80067be <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	217e      	movs	r1, #126	; 0x7e
 8006684:	187b      	adds	r3, r7, r1
 8006686:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006688:	187b      	adds	r3, r7, r1
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d100      	bne.n	8006692 <HAL_UART_IRQHandler+0x2fa>
 8006690:	e158      	b.n	8006944 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2258      	movs	r2, #88	; 0x58
 8006696:	5a9b      	ldrh	r3, [r3, r2]
 8006698:	187a      	adds	r2, r7, r1
 800669a:	8812      	ldrh	r2, [r2, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d300      	bcc.n	80066a2 <HAL_UART_IRQHandler+0x30a>
 80066a0:	e150      	b.n	8006944 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	187a      	adds	r2, r7, r1
 80066a6:	215a      	movs	r1, #90	; 0x5a
 80066a8:	8812      	ldrh	r2, [r2, #0]
 80066aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2220      	movs	r2, #32
 80066b6:	4013      	ands	r3, r2
 80066b8:	d16f      	bne.n	800679a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ba:	f3ef 8310 	mrs	r3, PRIMASK
 80066be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80066c4:	2301      	movs	r3, #1
 80066c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	f383 8810 	msr	PRIMASK, r3
}
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	499e      	ldr	r1, [pc, #632]	; (8006954 <HAL_UART_IRQHandler+0x5bc>)
 80066dc:	400a      	ands	r2, r1
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e6:	f383 8810 	msr	PRIMASK, r3
}
 80066ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ec:	f3ef 8310 	mrs	r3, PRIMASK
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80066f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f4:	677b      	str	r3, [r7, #116]	; 0x74
 80066f6:	2301      	movs	r3, #1
 80066f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fc:	f383 8810 	msr	PRIMASK, r3
}
 8006700:	46c0      	nop			; (mov r8, r8)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2101      	movs	r1, #1
 800670e:	438a      	bics	r2, r1
 8006710:	609a      	str	r2, [r3, #8]
 8006712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006714:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006718:	f383 8810 	msr	PRIMASK, r3
}
 800671c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671e:	f3ef 8310 	mrs	r3, PRIMASK
 8006722:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006724:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006726:	673b      	str	r3, [r7, #112]	; 0x70
 8006728:	2301      	movs	r3, #1
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672e:	f383 8810 	msr	PRIMASK, r3
}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2140      	movs	r1, #64	; 0x40
 8006740:	438a      	bics	r2, r1
 8006742:	609a      	str	r2, [r3, #8]
 8006744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006746:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674a:	f383 8810 	msr	PRIMASK, r3
}
 800674e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2280      	movs	r2, #128	; 0x80
 8006754:	2120      	movs	r1, #32
 8006756:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675e:	f3ef 8310 	mrs	r3, PRIMASK
 8006762:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006764:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006768:	2301      	movs	r3, #1
 800676a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800676e:	f383 8810 	msr	PRIMASK, r3
}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2110      	movs	r1, #16
 8006780:	438a      	bics	r2, r1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006786:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800678a:	f383 8810 	msr	PRIMASK, r3
}
 800678e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006794:	0018      	movs	r0, r3
 8006796:	f7fe f939 	bl	8004a0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2258      	movs	r2, #88	; 0x58
 80067a4:	5a9a      	ldrh	r2, [r3, r2]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	215a      	movs	r1, #90	; 0x5a
 80067aa:	5a5b      	ldrh	r3, [r3, r1]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	0011      	movs	r1, r2
 80067b6:	0018      	movs	r0, r3
 80067b8:	f7fd f9c0 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067bc:	e0c2      	b.n	8006944 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2258      	movs	r2, #88	; 0x58
 80067c2:	5a99      	ldrh	r1, [r3, r2]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	225a      	movs	r2, #90	; 0x5a
 80067c8:	5a9b      	ldrh	r3, [r3, r2]
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	208e      	movs	r0, #142	; 0x8e
 80067ce:	183b      	adds	r3, r7, r0
 80067d0:	1a8a      	subs	r2, r1, r2
 80067d2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	225a      	movs	r2, #90	; 0x5a
 80067d8:	5a9b      	ldrh	r3, [r3, r2]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d100      	bne.n	80067e2 <HAL_UART_IRQHandler+0x44a>
 80067e0:	e0b2      	b.n	8006948 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80067e2:	183b      	adds	r3, r7, r0
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d100      	bne.n	80067ec <HAL_UART_IRQHandler+0x454>
 80067ea:	e0ad      	b.n	8006948 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ec:	f3ef 8310 	mrs	r3, PRIMASK
 80067f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80067f2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f4:	2488      	movs	r4, #136	; 0x88
 80067f6:	193a      	adds	r2, r7, r4
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	2301      	movs	r3, #1
 80067fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f383 8810 	msr	PRIMASK, r3
}
 8006804:	46c0      	nop			; (mov r8, r8)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4951      	ldr	r1, [pc, #324]	; (8006958 <HAL_UART_IRQHandler+0x5c0>)
 8006812:	400a      	ands	r2, r1
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	193b      	adds	r3, r7, r4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f383 8810 	msr	PRIMASK, r3
}
 8006822:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006824:	f3ef 8310 	mrs	r3, PRIMASK
 8006828:	61bb      	str	r3, [r7, #24]
  return(result);
 800682a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682c:	2484      	movs	r4, #132	; 0x84
 800682e:	193a      	adds	r2, r7, r4
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	2301      	movs	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f383 8810 	msr	PRIMASK, r3
}
 800683c:	46c0      	nop			; (mov r8, r8)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2101      	movs	r1, #1
 800684a:	438a      	bics	r2, r1
 800684c:	609a      	str	r2, [r3, #8]
 800684e:	193b      	adds	r3, r7, r4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	f383 8810 	msr	PRIMASK, r3
}
 800685a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2280      	movs	r2, #128	; 0x80
 8006860:	2120      	movs	r1, #32
 8006862:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006870:	f3ef 8310 	mrs	r3, PRIMASK
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006878:	2480      	movs	r4, #128	; 0x80
 800687a:	193a      	adds	r2, r7, r4
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	2301      	movs	r3, #1
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	f383 8810 	msr	PRIMASK, r3
}
 8006888:	46c0      	nop			; (mov r8, r8)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2110      	movs	r1, #16
 8006896:	438a      	bics	r2, r1
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	193b      	adds	r3, r7, r4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	f383 8810 	msr	PRIMASK, r3
}
 80068a6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ae:	183b      	adds	r3, r7, r0
 80068b0:	881a      	ldrh	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0011      	movs	r1, r2
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7fd f940 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068bc:	e044      	b.n	8006948 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068be:	23a4      	movs	r3, #164	; 0xa4
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	035b      	lsls	r3, r3, #13
 80068c8:	4013      	ands	r3, r2
 80068ca:	d010      	beq.n	80068ee <HAL_UART_IRQHandler+0x556>
 80068cc:	239c      	movs	r3, #156	; 0x9c
 80068ce:	18fb      	adds	r3, r7, r3
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	2380      	movs	r3, #128	; 0x80
 80068d4:	03db      	lsls	r3, r3, #15
 80068d6:	4013      	ands	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2280      	movs	r2, #128	; 0x80
 80068e0:	0352      	lsls	r2, r2, #13
 80068e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	0018      	movs	r0, r3
 80068e8:	f000 ffe8 	bl	80078bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ec:	e02f      	b.n	800694e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068ee:	23a4      	movs	r3, #164	; 0xa4
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2280      	movs	r2, #128	; 0x80
 80068f6:	4013      	ands	r3, r2
 80068f8:	d00f      	beq.n	800691a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068fa:	23a0      	movs	r3, #160	; 0xa0
 80068fc:	18fb      	adds	r3, r7, r3
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2280      	movs	r2, #128	; 0x80
 8006902:	4013      	ands	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01e      	beq.n	800694c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	0010      	movs	r0, r2
 8006916:	4798      	blx	r3
    }
    return;
 8006918:	e018      	b.n	800694c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800691a:	23a4      	movs	r3, #164	; 0xa4
 800691c:	18fb      	adds	r3, r7, r3
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2240      	movs	r2, #64	; 0x40
 8006922:	4013      	ands	r3, r2
 8006924:	d013      	beq.n	800694e <HAL_UART_IRQHandler+0x5b6>
 8006926:	23a0      	movs	r3, #160	; 0xa0
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2240      	movs	r2, #64	; 0x40
 800692e:	4013      	ands	r3, r2
 8006930:	d00d      	beq.n	800694e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 fdd2 	bl	80074de <UART_EndTransmit_IT>
    return;
 800693a:	e008      	b.n	800694e <HAL_UART_IRQHandler+0x5b6>
      return;
 800693c:	46c0      	nop			; (mov r8, r8)
 800693e:	e006      	b.n	800694e <HAL_UART_IRQHandler+0x5b6>
    return;
 8006940:	46c0      	nop			; (mov r8, r8)
 8006942:	e004      	b.n	800694e <HAL_UART_IRQHandler+0x5b6>
      return;
 8006944:	46c0      	nop			; (mov r8, r8)
 8006946:	e002      	b.n	800694e <HAL_UART_IRQHandler+0x5b6>
      return;
 8006948:	46c0      	nop			; (mov r8, r8)
 800694a:	e000      	b.n	800694e <HAL_UART_IRQHandler+0x5b6>
    return;
 800694c:	46c0      	nop			; (mov r8, r8)
  }

}
 800694e:	46bd      	mov	sp, r7
 8006950:	b02b      	add	sp, #172	; 0xac
 8006952:	bd90      	pop	{r4, r7, pc}
 8006954:	fffffeff 	.word	0xfffffeff
 8006958:	fffffedf 	.word	0xfffffedf

0800695c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006964:	46c0      	nop			; (mov r8, r8)
 8006966:	46bd      	mov	sp, r7
 8006968:	b002      	add	sp, #8
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006974:	46c0      	nop			; (mov r8, r8)
 8006976:	46bd      	mov	sp, r7
 8006978:	b002      	add	sp, #8
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006984:	46c0      	nop			; (mov r8, r8)
 8006986:	46bd      	mov	sp, r7
 8006988:	b002      	add	sp, #8
 800698a:	bd80      	pop	{r7, pc}

0800698c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800698c:	b5b0      	push	{r4, r5, r7, lr}
 800698e:	b08e      	sub	sp, #56	; 0x38
 8006990:	af00      	add	r7, sp, #0
 8006992:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006994:	231a      	movs	r3, #26
 8006996:	2218      	movs	r2, #24
 8006998:	189b      	adds	r3, r3, r2
 800699a:	19db      	adds	r3, r3, r7
 800699c:	2200      	movs	r2, #0
 800699e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	431a      	orrs	r2, r3
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4ac3      	ldr	r2, [pc, #780]	; (8006ccc <UART_SetConfig+0x340>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	0019      	movs	r1, r3
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ca:	430a      	orrs	r2, r1
 80069cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	4abe      	ldr	r2, [pc, #760]	; (8006cd0 <UART_SetConfig+0x344>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	0019      	movs	r1, r3
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4ab8      	ldr	r2, [pc, #736]	; (8006cd4 <UART_SetConfig+0x348>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069fc:	4313      	orrs	r3, r2
 80069fe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	4ab4      	ldr	r2, [pc, #720]	; (8006cd8 <UART_SetConfig+0x34c>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4ab0      	ldr	r2, [pc, #704]	; (8006cdc <UART_SetConfig+0x350>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d131      	bne.n	8006a84 <UART_SetConfig+0xf8>
 8006a20:	4baf      	ldr	r3, [pc, #700]	; (8006ce0 <UART_SetConfig+0x354>)
 8006a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a24:	2203      	movs	r2, #3
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d01d      	beq.n	8006a68 <UART_SetConfig+0xdc>
 8006a2c:	d823      	bhi.n	8006a76 <UART_SetConfig+0xea>
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d00c      	beq.n	8006a4c <UART_SetConfig+0xc0>
 8006a32:	d820      	bhi.n	8006a76 <UART_SetConfig+0xea>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <UART_SetConfig+0xb2>
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d00e      	beq.n	8006a5a <UART_SetConfig+0xce>
 8006a3c:	e01b      	b.n	8006a76 <UART_SetConfig+0xea>
 8006a3e:	231b      	movs	r3, #27
 8006a40:	2218      	movs	r2, #24
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	19db      	adds	r3, r3, r7
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e0b4      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006a4c:	231b      	movs	r3, #27
 8006a4e:	2218      	movs	r2, #24
 8006a50:	189b      	adds	r3, r3, r2
 8006a52:	19db      	adds	r3, r3, r7
 8006a54:	2202      	movs	r2, #2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	e0ad      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006a5a:	231b      	movs	r3, #27
 8006a5c:	2218      	movs	r2, #24
 8006a5e:	189b      	adds	r3, r3, r2
 8006a60:	19db      	adds	r3, r3, r7
 8006a62:	2204      	movs	r2, #4
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e0a6      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006a68:	231b      	movs	r3, #27
 8006a6a:	2218      	movs	r2, #24
 8006a6c:	189b      	adds	r3, r3, r2
 8006a6e:	19db      	adds	r3, r3, r7
 8006a70:	2208      	movs	r2, #8
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	e09f      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006a76:	231b      	movs	r3, #27
 8006a78:	2218      	movs	r2, #24
 8006a7a:	189b      	adds	r3, r3, r2
 8006a7c:	19db      	adds	r3, r3, r7
 8006a7e:	2210      	movs	r2, #16
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	e098      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a96      	ldr	r2, [pc, #600]	; (8006ce4 <UART_SetConfig+0x358>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d131      	bne.n	8006af2 <UART_SetConfig+0x166>
 8006a8e:	4b94      	ldr	r3, [pc, #592]	; (8006ce0 <UART_SetConfig+0x354>)
 8006a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a92:	220c      	movs	r2, #12
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b0c      	cmp	r3, #12
 8006a98:	d01d      	beq.n	8006ad6 <UART_SetConfig+0x14a>
 8006a9a:	d823      	bhi.n	8006ae4 <UART_SetConfig+0x158>
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d00c      	beq.n	8006aba <UART_SetConfig+0x12e>
 8006aa0:	d820      	bhi.n	8006ae4 <UART_SetConfig+0x158>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <UART_SetConfig+0x120>
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d00e      	beq.n	8006ac8 <UART_SetConfig+0x13c>
 8006aaa:	e01b      	b.n	8006ae4 <UART_SetConfig+0x158>
 8006aac:	231b      	movs	r3, #27
 8006aae:	2218      	movs	r2, #24
 8006ab0:	189b      	adds	r3, r3, r2
 8006ab2:	19db      	adds	r3, r3, r7
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	e07d      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006aba:	231b      	movs	r3, #27
 8006abc:	2218      	movs	r2, #24
 8006abe:	189b      	adds	r3, r3, r2
 8006ac0:	19db      	adds	r3, r3, r7
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e076      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006ac8:	231b      	movs	r3, #27
 8006aca:	2218      	movs	r2, #24
 8006acc:	189b      	adds	r3, r3, r2
 8006ace:	19db      	adds	r3, r3, r7
 8006ad0:	2204      	movs	r2, #4
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e06f      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006ad6:	231b      	movs	r3, #27
 8006ad8:	2218      	movs	r2, #24
 8006ada:	189b      	adds	r3, r3, r2
 8006adc:	19db      	adds	r3, r3, r7
 8006ade:	2208      	movs	r2, #8
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	e068      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006ae4:	231b      	movs	r3, #27
 8006ae6:	2218      	movs	r2, #24
 8006ae8:	189b      	adds	r3, r3, r2
 8006aea:	19db      	adds	r3, r3, r7
 8006aec:	2210      	movs	r2, #16
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	e061      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a7c      	ldr	r2, [pc, #496]	; (8006ce8 <UART_SetConfig+0x35c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d106      	bne.n	8006b0a <UART_SetConfig+0x17e>
 8006afc:	231b      	movs	r3, #27
 8006afe:	2218      	movs	r2, #24
 8006b00:	189b      	adds	r3, r3, r2
 8006b02:	19db      	adds	r3, r3, r7
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	e055      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a77      	ldr	r2, [pc, #476]	; (8006cec <UART_SetConfig+0x360>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d106      	bne.n	8006b22 <UART_SetConfig+0x196>
 8006b14:	231b      	movs	r3, #27
 8006b16:	2218      	movs	r2, #24
 8006b18:	189b      	adds	r3, r3, r2
 8006b1a:	19db      	adds	r3, r3, r7
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e049      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a6b      	ldr	r2, [pc, #428]	; (8006cd4 <UART_SetConfig+0x348>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d13e      	bne.n	8006baa <UART_SetConfig+0x21e>
 8006b2c:	4b6c      	ldr	r3, [pc, #432]	; (8006ce0 <UART_SetConfig+0x354>)
 8006b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b30:	23c0      	movs	r3, #192	; 0xc0
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	4013      	ands	r3, r2
 8006b36:	22c0      	movs	r2, #192	; 0xc0
 8006b38:	0112      	lsls	r2, r2, #4
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d027      	beq.n	8006b8e <UART_SetConfig+0x202>
 8006b3e:	22c0      	movs	r2, #192	; 0xc0
 8006b40:	0112      	lsls	r2, r2, #4
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d82a      	bhi.n	8006b9c <UART_SetConfig+0x210>
 8006b46:	2280      	movs	r2, #128	; 0x80
 8006b48:	0112      	lsls	r2, r2, #4
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d011      	beq.n	8006b72 <UART_SetConfig+0x1e6>
 8006b4e:	2280      	movs	r2, #128	; 0x80
 8006b50:	0112      	lsls	r2, r2, #4
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d822      	bhi.n	8006b9c <UART_SetConfig+0x210>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <UART_SetConfig+0x1d8>
 8006b5a:	2280      	movs	r2, #128	; 0x80
 8006b5c:	00d2      	lsls	r2, r2, #3
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <UART_SetConfig+0x1f4>
 8006b62:	e01b      	b.n	8006b9c <UART_SetConfig+0x210>
 8006b64:	231b      	movs	r3, #27
 8006b66:	2218      	movs	r2, #24
 8006b68:	189b      	adds	r3, r3, r2
 8006b6a:	19db      	adds	r3, r3, r7
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	e021      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006b72:	231b      	movs	r3, #27
 8006b74:	2218      	movs	r2, #24
 8006b76:	189b      	adds	r3, r3, r2
 8006b78:	19db      	adds	r3, r3, r7
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e01a      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006b80:	231b      	movs	r3, #27
 8006b82:	2218      	movs	r2, #24
 8006b84:	189b      	adds	r3, r3, r2
 8006b86:	19db      	adds	r3, r3, r7
 8006b88:	2204      	movs	r2, #4
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e013      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006b8e:	231b      	movs	r3, #27
 8006b90:	2218      	movs	r2, #24
 8006b92:	189b      	adds	r3, r3, r2
 8006b94:	19db      	adds	r3, r3, r7
 8006b96:	2208      	movs	r2, #8
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	e00c      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006b9c:	231b      	movs	r3, #27
 8006b9e:	2218      	movs	r2, #24
 8006ba0:	189b      	adds	r3, r3, r2
 8006ba2:	19db      	adds	r3, r3, r7
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	e005      	b.n	8006bb6 <UART_SetConfig+0x22a>
 8006baa:	231b      	movs	r3, #27
 8006bac:	2218      	movs	r2, #24
 8006bae:	189b      	adds	r3, r3, r2
 8006bb0:	19db      	adds	r3, r3, r7
 8006bb2:	2210      	movs	r2, #16
 8006bb4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a46      	ldr	r2, [pc, #280]	; (8006cd4 <UART_SetConfig+0x348>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d000      	beq.n	8006bc2 <UART_SetConfig+0x236>
 8006bc0:	e09a      	b.n	8006cf8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bc2:	231b      	movs	r3, #27
 8006bc4:	2218      	movs	r2, #24
 8006bc6:	189b      	adds	r3, r3, r2
 8006bc8:	19db      	adds	r3, r3, r7
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d01d      	beq.n	8006c0c <UART_SetConfig+0x280>
 8006bd0:	dc20      	bgt.n	8006c14 <UART_SetConfig+0x288>
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d015      	beq.n	8006c02 <UART_SetConfig+0x276>
 8006bd6:	dc1d      	bgt.n	8006c14 <UART_SetConfig+0x288>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <UART_SetConfig+0x256>
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d005      	beq.n	8006bec <UART_SetConfig+0x260>
 8006be0:	e018      	b.n	8006c14 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be2:	f7fe ff19 	bl	8005a18 <HAL_RCC_GetPCLK1Freq>
 8006be6:	0003      	movs	r3, r0
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bea:	e01c      	b.n	8006c26 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bec:	4b3c      	ldr	r3, [pc, #240]	; (8006ce0 <UART_SetConfig+0x354>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d002      	beq.n	8006bfc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006bf6:	4b3e      	ldr	r3, [pc, #248]	; (8006cf0 <UART_SetConfig+0x364>)
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bfa:	e014      	b.n	8006c26 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006bfc:	4b3d      	ldr	r3, [pc, #244]	; (8006cf4 <UART_SetConfig+0x368>)
 8006bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c00:	e011      	b.n	8006c26 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c02:	f7fe fe59 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8006c06:	0003      	movs	r3, r0
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c0a:	e00c      	b.n	8006c26 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0c:	2380      	movs	r3, #128	; 0x80
 8006c0e:	021b      	lsls	r3, r3, #8
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c12:	e008      	b.n	8006c26 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c18:	231a      	movs	r3, #26
 8006c1a:	2218      	movs	r2, #24
 8006c1c:	189b      	adds	r3, r3, r2
 8006c1e:	19db      	adds	r3, r3, r7
 8006c20:	2201      	movs	r2, #1
 8006c22:	701a      	strb	r2, [r3, #0]
        break;
 8006c24:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d100      	bne.n	8006c2e <UART_SetConfig+0x2a2>
 8006c2c:	e133      	b.n	8006e96 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	0013      	movs	r3, r2
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	189b      	adds	r3, r3, r2
 8006c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d305      	bcc.n	8006c4a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d906      	bls.n	8006c58 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006c4a:	231a      	movs	r3, #26
 8006c4c:	2218      	movs	r2, #24
 8006c4e:	189b      	adds	r3, r3, r2
 8006c50:	19db      	adds	r3, r3, r7
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e11e      	b.n	8006e96 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	6939      	ldr	r1, [r7, #16]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	000b      	movs	r3, r1
 8006c66:	0e1b      	lsrs	r3, r3, #24
 8006c68:	0010      	movs	r0, r2
 8006c6a:	0205      	lsls	r5, r0, #8
 8006c6c:	431d      	orrs	r5, r3
 8006c6e:	000b      	movs	r3, r1
 8006c70:	021c      	lsls	r4, r3, #8
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	1900      	adds	r0, r0, r4
 8006c84:	4169      	adcs	r1, r5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	607b      	str	r3, [r7, #4]
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f7f9 fb4e 	bl	8000334 <__aeabi_uldivmod>
 8006c98:	0002      	movs	r2, r0
 8006c9a:	000b      	movs	r3, r1
 8006c9c:	0013      	movs	r3, r2
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca2:	23c0      	movs	r3, #192	; 0xc0
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d309      	bcc.n	8006cbe <UART_SetConfig+0x332>
 8006caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cac:	2380      	movs	r3, #128	; 0x80
 8006cae:	035b      	lsls	r3, r3, #13
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d204      	bcs.n	8006cbe <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cba:	60da      	str	r2, [r3, #12]
 8006cbc:	e0eb      	b.n	8006e96 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006cbe:	231a      	movs	r3, #26
 8006cc0:	2218      	movs	r2, #24
 8006cc2:	189b      	adds	r3, r3, r2
 8006cc4:	19db      	adds	r3, r3, r7
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	e0e4      	b.n	8006e96 <UART_SetConfig+0x50a>
 8006ccc:	efff69f3 	.word	0xefff69f3
 8006cd0:	ffffcfff 	.word	0xffffcfff
 8006cd4:	40004800 	.word	0x40004800
 8006cd8:	fffff4ff 	.word	0xfffff4ff
 8006cdc:	40013800 	.word	0x40013800
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	40004400 	.word	0x40004400
 8006ce8:	40004c00 	.word	0x40004c00
 8006cec:	40005000 	.word	0x40005000
 8006cf0:	003d0900 	.word	0x003d0900
 8006cf4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d000      	beq.n	8006d06 <UART_SetConfig+0x37a>
 8006d04:	e070      	b.n	8006de8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006d06:	231b      	movs	r3, #27
 8006d08:	2218      	movs	r2, #24
 8006d0a:	189b      	adds	r3, r3, r2
 8006d0c:	19db      	adds	r3, r3, r7
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d822      	bhi.n	8006d5a <UART_SetConfig+0x3ce>
 8006d14:	009a      	lsls	r2, r3, #2
 8006d16:	4b67      	ldr	r3, [pc, #412]	; (8006eb4 <UART_SetConfig+0x528>)
 8006d18:	18d3      	adds	r3, r2, r3
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d1e:	f7fe fe7b 	bl	8005a18 <HAL_RCC_GetPCLK1Freq>
 8006d22:	0003      	movs	r3, r0
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d26:	e021      	b.n	8006d6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d28:	f7fe fe8c 	bl	8005a44 <HAL_RCC_GetPCLK2Freq>
 8006d2c:	0003      	movs	r3, r0
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d30:	e01c      	b.n	8006d6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d32:	4b61      	ldr	r3, [pc, #388]	; (8006eb8 <UART_SetConfig+0x52c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2210      	movs	r2, #16
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d002      	beq.n	8006d42 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d3c:	4b5f      	ldr	r3, [pc, #380]	; (8006ebc <UART_SetConfig+0x530>)
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d40:	e014      	b.n	8006d6c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006d42:	4b5f      	ldr	r3, [pc, #380]	; (8006ec0 <UART_SetConfig+0x534>)
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d46:	e011      	b.n	8006d6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d48:	f7fe fdb6 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8006d4c:	0003      	movs	r3, r0
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d50:	e00c      	b.n	8006d6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d52:	2380      	movs	r3, #128	; 0x80
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d58:	e008      	b.n	8006d6c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d5e:	231a      	movs	r3, #26
 8006d60:	2218      	movs	r2, #24
 8006d62:	189b      	adds	r3, r3, r2
 8006d64:	19db      	adds	r3, r3, r7
 8006d66:	2201      	movs	r2, #1
 8006d68:	701a      	strb	r2, [r3, #0]
        break;
 8006d6a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d100      	bne.n	8006d74 <UART_SetConfig+0x3e8>
 8006d72:	e090      	b.n	8006e96 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	005a      	lsls	r2, r3, #1
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	18d2      	adds	r2, r2, r3
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	0019      	movs	r1, r3
 8006d86:	0010      	movs	r0, r2
 8006d88:	f7f9 f9d0 	bl	800012c <__udivsi3>
 8006d8c:	0003      	movs	r3, r0
 8006d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	2b0f      	cmp	r3, #15
 8006d94:	d921      	bls.n	8006dda <UART_SetConfig+0x44e>
 8006d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d98:	2380      	movs	r3, #128	; 0x80
 8006d9a:	025b      	lsls	r3, r3, #9
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d21c      	bcs.n	8006dda <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	200e      	movs	r0, #14
 8006da6:	2418      	movs	r4, #24
 8006da8:	1903      	adds	r3, r0, r4
 8006daa:	19db      	adds	r3, r3, r7
 8006dac:	210f      	movs	r1, #15
 8006dae:	438a      	bics	r2, r1
 8006db0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2207      	movs	r2, #7
 8006dba:	4013      	ands	r3, r2
 8006dbc:	b299      	uxth	r1, r3
 8006dbe:	1903      	adds	r3, r0, r4
 8006dc0:	19db      	adds	r3, r3, r7
 8006dc2:	1902      	adds	r2, r0, r4
 8006dc4:	19d2      	adds	r2, r2, r7
 8006dc6:	8812      	ldrh	r2, [r2, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	1902      	adds	r2, r0, r4
 8006dd2:	19d2      	adds	r2, r2, r7
 8006dd4:	8812      	ldrh	r2, [r2, #0]
 8006dd6:	60da      	str	r2, [r3, #12]
 8006dd8:	e05d      	b.n	8006e96 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006dda:	231a      	movs	r3, #26
 8006ddc:	2218      	movs	r2, #24
 8006dde:	189b      	adds	r3, r3, r2
 8006de0:	19db      	adds	r3, r3, r7
 8006de2:	2201      	movs	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	e056      	b.n	8006e96 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006de8:	231b      	movs	r3, #27
 8006dea:	2218      	movs	r2, #24
 8006dec:	189b      	adds	r3, r3, r2
 8006dee:	19db      	adds	r3, r3, r7
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d822      	bhi.n	8006e3c <UART_SetConfig+0x4b0>
 8006df6:	009a      	lsls	r2, r3, #2
 8006df8:	4b32      	ldr	r3, [pc, #200]	; (8006ec4 <UART_SetConfig+0x538>)
 8006dfa:	18d3      	adds	r3, r2, r3
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e00:	f7fe fe0a 	bl	8005a18 <HAL_RCC_GetPCLK1Freq>
 8006e04:	0003      	movs	r3, r0
 8006e06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e08:	e021      	b.n	8006e4e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e0a:	f7fe fe1b 	bl	8005a44 <HAL_RCC_GetPCLK2Freq>
 8006e0e:	0003      	movs	r3, r0
 8006e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e12:	e01c      	b.n	8006e4e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e14:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <UART_SetConfig+0x52c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2210      	movs	r2, #16
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	d002      	beq.n	8006e24 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006e1e:	4b27      	ldr	r3, [pc, #156]	; (8006ebc <UART_SetConfig+0x530>)
 8006e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e22:	e014      	b.n	8006e4e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006e24:	4b26      	ldr	r3, [pc, #152]	; (8006ec0 <UART_SetConfig+0x534>)
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e28:	e011      	b.n	8006e4e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2a:	f7fe fd45 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8006e2e:	0003      	movs	r3, r0
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e32:	e00c      	b.n	8006e4e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e3a:	e008      	b.n	8006e4e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e40:	231a      	movs	r3, #26
 8006e42:	2218      	movs	r2, #24
 8006e44:	189b      	adds	r3, r3, r2
 8006e46:	19db      	adds	r3, r3, r7
 8006e48:	2201      	movs	r2, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
        break;
 8006e4c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d020      	beq.n	8006e96 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	085a      	lsrs	r2, r3, #1
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	18d2      	adds	r2, r2, r3
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	0019      	movs	r1, r3
 8006e64:	0010      	movs	r0, r2
 8006e66:	f7f9 f961 	bl	800012c <__udivsi3>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	2b0f      	cmp	r3, #15
 8006e72:	d90a      	bls.n	8006e8a <UART_SetConfig+0x4fe>
 8006e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	025b      	lsls	r3, r3, #9
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d205      	bcs.n	8006e8a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60da      	str	r2, [r3, #12]
 8006e88:	e005      	b.n	8006e96 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006e8a:	231a      	movs	r3, #26
 8006e8c:	2218      	movs	r2, #24
 8006e8e:	189b      	adds	r3, r3, r2
 8006e90:	19db      	adds	r3, r3, r7
 8006e92:	2201      	movs	r2, #1
 8006e94:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ea2:	231a      	movs	r3, #26
 8006ea4:	2218      	movs	r2, #24
 8006ea6:	189b      	adds	r3, r3, r2
 8006ea8:	19db      	adds	r3, r3, r7
 8006eaa:	781b      	ldrb	r3, [r3, #0]
}
 8006eac:	0018      	movs	r0, r3
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b00e      	add	sp, #56	; 0x38
 8006eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb4:	0800a4d8 	.word	0x0800a4d8
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	003d0900 	.word	0x003d0900
 8006ec0:	00f42400 	.word	0x00f42400
 8006ec4:	0800a4fc 	.word	0x0800a4fc

08006ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	d00b      	beq.n	8006ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4a4a      	ldr	r2, [pc, #296]	; (800700c <UART_AdvFeatureConfig+0x144>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	0019      	movs	r1, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d00b      	beq.n	8006f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4a43      	ldr	r2, [pc, #268]	; (8007010 <UART_AdvFeatureConfig+0x148>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	0019      	movs	r1, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	2204      	movs	r2, #4
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	d00b      	beq.n	8006f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4a3b      	ldr	r2, [pc, #236]	; (8007014 <UART_AdvFeatureConfig+0x14c>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	0019      	movs	r1, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2208      	movs	r2, #8
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d00b      	beq.n	8006f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	4a34      	ldr	r2, [pc, #208]	; (8007018 <UART_AdvFeatureConfig+0x150>)
 8006f48:	4013      	ands	r3, r2
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	2210      	movs	r2, #16
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d00b      	beq.n	8006f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4a2c      	ldr	r2, [pc, #176]	; (800701c <UART_AdvFeatureConfig+0x154>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	0019      	movs	r1, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	2220      	movs	r2, #32
 8006f80:	4013      	ands	r3, r2
 8006f82:	d00b      	beq.n	8006f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	4a25      	ldr	r2, [pc, #148]	; (8007020 <UART_AdvFeatureConfig+0x158>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	0019      	movs	r1, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	2240      	movs	r2, #64	; 0x40
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	d01d      	beq.n	8006fe2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <UART_AdvFeatureConfig+0x15c>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc2:	2380      	movs	r3, #128	; 0x80
 8006fc4:	035b      	lsls	r3, r3, #13
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d10b      	bne.n	8006fe2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	4a15      	ldr	r2, [pc, #84]	; (8007028 <UART_AdvFeatureConfig+0x160>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	0019      	movs	r1, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2280      	movs	r2, #128	; 0x80
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d00b      	beq.n	8007004 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	4a0e      	ldr	r2, [pc, #56]	; (800702c <UART_AdvFeatureConfig+0x164>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	0019      	movs	r1, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	605a      	str	r2, [r3, #4]
  }
}
 8007004:	46c0      	nop			; (mov r8, r8)
 8007006:	46bd      	mov	sp, r7
 8007008:	b002      	add	sp, #8
 800700a:	bd80      	pop	{r7, pc}
 800700c:	fffdffff 	.word	0xfffdffff
 8007010:	fffeffff 	.word	0xfffeffff
 8007014:	fffbffff 	.word	0xfffbffff
 8007018:	ffff7fff 	.word	0xffff7fff
 800701c:	ffffefff 	.word	0xffffefff
 8007020:	ffffdfff 	.word	0xffffdfff
 8007024:	ffefffff 	.word	0xffefffff
 8007028:	ff9fffff 	.word	0xff9fffff
 800702c:	fff7ffff 	.word	0xfff7ffff

08007030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b092      	sub	sp, #72	; 0x48
 8007034:	af02      	add	r7, sp, #8
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2284      	movs	r2, #132	; 0x84
 800703c:	2100      	movs	r1, #0
 800703e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007040:	f7fd fbd8 	bl	80047f4 <HAL_GetTick>
 8007044:	0003      	movs	r3, r0
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2208      	movs	r2, #8
 8007050:	4013      	ands	r3, r2
 8007052:	2b08      	cmp	r3, #8
 8007054:	d12c      	bne.n	80070b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007058:	2280      	movs	r2, #128	; 0x80
 800705a:	0391      	lsls	r1, r2, #14
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	4a46      	ldr	r2, [pc, #280]	; (8007178 <UART_CheckIdleState+0x148>)
 8007060:	9200      	str	r2, [sp, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	f000 f88c 	bl	8007180 <UART_WaitOnFlagUntilTimeout>
 8007068:	1e03      	subs	r3, r0, #0
 800706a:	d021      	beq.n	80070b0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706c:	f3ef 8310 	mrs	r3, PRIMASK
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38
 8007076:	2301      	movs	r3, #1
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	f383 8810 	msr	PRIMASK, r3
}
 8007080:	46c0      	nop			; (mov r8, r8)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2180      	movs	r1, #128	; 0x80
 800708e:	438a      	bics	r2, r1
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	f383 8810 	msr	PRIMASK, r3
}
 800709c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2278      	movs	r2, #120	; 0x78
 80070a8:	2100      	movs	r1, #0
 80070aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e05f      	b.n	8007170 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2204      	movs	r2, #4
 80070b8:	4013      	ands	r3, r2
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d146      	bne.n	800714c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c0:	2280      	movs	r2, #128	; 0x80
 80070c2:	03d1      	lsls	r1, r2, #15
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4a2c      	ldr	r2, [pc, #176]	; (8007178 <UART_CheckIdleState+0x148>)
 80070c8:	9200      	str	r2, [sp, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f000 f858 	bl	8007180 <UART_WaitOnFlagUntilTimeout>
 80070d0:	1e03      	subs	r3, r0, #0
 80070d2:	d03b      	beq.n	800714c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d4:	f3ef 8310 	mrs	r3, PRIMASK
 80070d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80070da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070dc:	637b      	str	r3, [r7, #52]	; 0x34
 80070de:	2301      	movs	r3, #1
 80070e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f383 8810 	msr	PRIMASK, r3
}
 80070e8:	46c0      	nop			; (mov r8, r8)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4921      	ldr	r1, [pc, #132]	; (800717c <UART_CheckIdleState+0x14c>)
 80070f6:	400a      	ands	r2, r1
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f383 8810 	msr	PRIMASK, r3
}
 8007104:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007106:	f3ef 8310 	mrs	r3, PRIMASK
 800710a:	61bb      	str	r3, [r7, #24]
  return(result);
 800710c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710e:	633b      	str	r3, [r7, #48]	; 0x30
 8007110:	2301      	movs	r3, #1
 8007112:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f383 8810 	msr	PRIMASK, r3
}
 800711a:	46c0      	nop			; (mov r8, r8)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2101      	movs	r1, #1
 8007128:	438a      	bics	r2, r1
 800712a:	609a      	str	r2, [r3, #8]
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	f383 8810 	msr	PRIMASK, r3
}
 8007136:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2280      	movs	r2, #128	; 0x80
 800713c:	2120      	movs	r1, #32
 800713e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2278      	movs	r2, #120	; 0x78
 8007144:	2100      	movs	r1, #0
 8007146:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e011      	b.n	8007170 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2280      	movs	r2, #128	; 0x80
 8007156:	2120      	movs	r1, #32
 8007158:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2278      	movs	r2, #120	; 0x78
 800716a:	2100      	movs	r1, #0
 800716c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	0018      	movs	r0, r3
 8007172:	46bd      	mov	sp, r7
 8007174:	b010      	add	sp, #64	; 0x40
 8007176:	bd80      	pop	{r7, pc}
 8007178:	01ffffff 	.word	0x01ffffff
 800717c:	fffffedf 	.word	0xfffffedf

08007180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	1dfb      	adds	r3, r7, #7
 800718e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007190:	e04b      	b.n	800722a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	3301      	adds	r3, #1
 8007196:	d048      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007198:	f7fd fb2c 	bl	80047f4 <HAL_GetTick>
 800719c:	0002      	movs	r2, r0
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d302      	bcc.n	80071ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e04b      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2204      	movs	r2, #4
 80071ba:	4013      	ands	r3, r2
 80071bc:	d035      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	2208      	movs	r2, #8
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d111      	bne.n	80071f0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2208      	movs	r2, #8
 80071d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	0018      	movs	r0, r3
 80071d8:	f000 f906 	bl	80073e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2284      	movs	r2, #132	; 0x84
 80071e0:	2108      	movs	r1, #8
 80071e2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2278      	movs	r2, #120	; 0x78
 80071e8:	2100      	movs	r1, #0
 80071ea:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e02c      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69da      	ldr	r2, [r3, #28]
 80071f6:	2380      	movs	r3, #128	; 0x80
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	401a      	ands	r2, r3
 80071fc:	2380      	movs	r3, #128	; 0x80
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	429a      	cmp	r2, r3
 8007202:	d112      	bne.n	800722a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2280      	movs	r2, #128	; 0x80
 800720a:	0112      	lsls	r2, r2, #4
 800720c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	0018      	movs	r0, r3
 8007212:	f000 f8e9 	bl	80073e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2284      	movs	r2, #132	; 0x84
 800721a:	2120      	movs	r1, #32
 800721c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2278      	movs	r2, #120	; 0x78
 8007222:	2100      	movs	r1, #0
 8007224:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e00f      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	4013      	ands	r3, r2
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	425a      	negs	r2, r3
 800723a:	4153      	adcs	r3, r2
 800723c:	b2db      	uxtb	r3, r3
 800723e:	001a      	movs	r2, r3
 8007240:	1dfb      	adds	r3, r7, #7
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d0a4      	beq.n	8007192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	0018      	movs	r0, r3
 800724c:	46bd      	mov	sp, r7
 800724e:	b004      	add	sp, #16
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b090      	sub	sp, #64	; 0x40
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	1dbb      	adds	r3, r7, #6
 8007260:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	1dba      	adds	r2, r7, #6
 800726c:	2158      	movs	r1, #88	; 0x58
 800726e:	8812      	ldrh	r2, [r2, #0]
 8007270:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	1dba      	adds	r2, r7, #6
 8007276:	215a      	movs	r1, #90	; 0x5a
 8007278:	8812      	ldrh	r2, [r2, #0]
 800727a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	2380      	movs	r3, #128	; 0x80
 8007288:	015b      	lsls	r3, r3, #5
 800728a:	429a      	cmp	r2, r3
 800728c:	d10d      	bne.n	80072aa <UART_Start_Receive_IT+0x56>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d104      	bne.n	80072a0 <UART_Start_Receive_IT+0x4c>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	225c      	movs	r2, #92	; 0x5c
 800729a:	4950      	ldr	r1, [pc, #320]	; (80073dc <UART_Start_Receive_IT+0x188>)
 800729c:	5299      	strh	r1, [r3, r2]
 800729e:	e02e      	b.n	80072fe <UART_Start_Receive_IT+0xaa>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	225c      	movs	r2, #92	; 0x5c
 80072a4:	21ff      	movs	r1, #255	; 0xff
 80072a6:	5299      	strh	r1, [r3, r2]
 80072a8:	e029      	b.n	80072fe <UART_Start_Receive_IT+0xaa>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <UART_Start_Receive_IT+0x7a>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <UART_Start_Receive_IT+0x70>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	225c      	movs	r2, #92	; 0x5c
 80072be:	21ff      	movs	r1, #255	; 0xff
 80072c0:	5299      	strh	r1, [r3, r2]
 80072c2:	e01c      	b.n	80072fe <UART_Start_Receive_IT+0xaa>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	225c      	movs	r2, #92	; 0x5c
 80072c8:	217f      	movs	r1, #127	; 0x7f
 80072ca:	5299      	strh	r1, [r3, r2]
 80072cc:	e017      	b.n	80072fe <UART_Start_Receive_IT+0xaa>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689a      	ldr	r2, [r3, #8]
 80072d2:	2380      	movs	r3, #128	; 0x80
 80072d4:	055b      	lsls	r3, r3, #21
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d10d      	bne.n	80072f6 <UART_Start_Receive_IT+0xa2>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d104      	bne.n	80072ec <UART_Start_Receive_IT+0x98>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	225c      	movs	r2, #92	; 0x5c
 80072e6:	217f      	movs	r1, #127	; 0x7f
 80072e8:	5299      	strh	r1, [r3, r2]
 80072ea:	e008      	b.n	80072fe <UART_Start_Receive_IT+0xaa>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	225c      	movs	r2, #92	; 0x5c
 80072f0:	213f      	movs	r1, #63	; 0x3f
 80072f2:	5299      	strh	r1, [r3, r2]
 80072f4:	e003      	b.n	80072fe <UART_Start_Receive_IT+0xaa>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	225c      	movs	r2, #92	; 0x5c
 80072fa:	2100      	movs	r1, #0
 80072fc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2284      	movs	r2, #132	; 0x84
 8007302:	2100      	movs	r1, #0
 8007304:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2280      	movs	r2, #128	; 0x80
 800730a:	2122      	movs	r1, #34	; 0x22
 800730c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800730e:	f3ef 8310 	mrs	r3, PRIMASK
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007318:	2301      	movs	r3, #1
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731e:	f383 8810 	msr	PRIMASK, r3
}
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2101      	movs	r1, #1
 8007330:	430a      	orrs	r2, r1
 8007332:	609a      	str	r2, [r3, #8]
 8007334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007336:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	f383 8810 	msr	PRIMASK, r3
}
 800733e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	2380      	movs	r3, #128	; 0x80
 8007346:	015b      	lsls	r3, r3, #5
 8007348:	429a      	cmp	r2, r3
 800734a:	d107      	bne.n	800735c <UART_Start_Receive_IT+0x108>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <UART_Start_Receive_IT+0x18c>)
 8007358:	669a      	str	r2, [r3, #104]	; 0x68
 800735a:	e002      	b.n	8007362 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a21      	ldr	r2, [pc, #132]	; (80073e4 <UART_Start_Receive_IT+0x190>)
 8007360:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d019      	beq.n	800739e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800736a:	f3ef 8310 	mrs	r3, PRIMASK
 800736e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007370:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007372:	637b      	str	r3, [r7, #52]	; 0x34
 8007374:	2301      	movs	r3, #1
 8007376:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f383 8810 	msr	PRIMASK, r3
}
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2190      	movs	r1, #144	; 0x90
 800738c:	0049      	lsls	r1, r1, #1
 800738e:	430a      	orrs	r2, r1
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	f383 8810 	msr	PRIMASK, r3
}
 800739c:	e018      	b.n	80073d0 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800739e:	f3ef 8310 	mrs	r3, PRIMASK
 80073a2:	613b      	str	r3, [r7, #16]
  return(result);
 80073a4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80073a8:	2301      	movs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f383 8810 	msr	PRIMASK, r3
}
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2120      	movs	r1, #32
 80073c0:	430a      	orrs	r2, r1
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	f383 8810 	msr	PRIMASK, r3
}
 80073ce:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	0018      	movs	r0, r3
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b010      	add	sp, #64	; 0x40
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	000001ff 	.word	0x000001ff
 80073e0:	080076f9 	.word	0x080076f9
 80073e4:	08007535 	.word	0x08007535

080073e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08e      	sub	sp, #56	; 0x38
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f0:	f3ef 8310 	mrs	r3, PRIMASK
 80073f4:	617b      	str	r3, [r7, #20]
  return(result);
 80073f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073f8:	637b      	str	r3, [r7, #52]	; 0x34
 80073fa:	2301      	movs	r3, #1
 80073fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f383 8810 	msr	PRIMASK, r3
}
 8007404:	46c0      	nop			; (mov r8, r8)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4926      	ldr	r1, [pc, #152]	; (80074ac <UART_EndRxTransfer+0xc4>)
 8007412:	400a      	ands	r2, r1
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	f383 8810 	msr	PRIMASK, r3
}
 8007420:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007422:	f3ef 8310 	mrs	r3, PRIMASK
 8007426:	623b      	str	r3, [r7, #32]
  return(result);
 8007428:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742a:	633b      	str	r3, [r7, #48]	; 0x30
 800742c:	2301      	movs	r3, #1
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	f383 8810 	msr	PRIMASK, r3
}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2101      	movs	r1, #1
 8007444:	438a      	bics	r2, r1
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	f383 8810 	msr	PRIMASK, r3
}
 8007452:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007458:	2b01      	cmp	r3, #1
 800745a:	d118      	bne.n	800748e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745c:	f3ef 8310 	mrs	r3, PRIMASK
 8007460:	60bb      	str	r3, [r7, #8]
  return(result);
 8007462:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007466:	2301      	movs	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f383 8810 	msr	PRIMASK, r3
}
 8007470:	46c0      	nop			; (mov r8, r8)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2110      	movs	r1, #16
 800747e:	438a      	bics	r2, r1
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f383 8810 	msr	PRIMASK, r3
}
 800748c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2280      	movs	r2, #128	; 0x80
 8007492:	2120      	movs	r1, #32
 8007494:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	46bd      	mov	sp, r7
 80074a6:	b00e      	add	sp, #56	; 0x38
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	fffffedf 	.word	0xfffffedf

080074b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	225a      	movs	r2, #90	; 0x5a
 80074c2:	2100      	movs	r1, #0
 80074c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2252      	movs	r2, #82	; 0x52
 80074ca:	2100      	movs	r1, #0
 80074cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	0018      	movs	r0, r3
 80074d2:	f7ff fa53 	bl	800697c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	46bd      	mov	sp, r7
 80074da:	b004      	add	sp, #16
 80074dc:	bd80      	pop	{r7, pc}

080074de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	2301      	movs	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f383 8810 	msr	PRIMASK, r3
}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2140      	movs	r1, #64	; 0x40
 8007508:	438a      	bics	r2, r1
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f383 8810 	msr	PRIMASK, r3
}
 8007516:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	0018      	movs	r0, r3
 8007528:	f7ff fa18 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800752c:	46c0      	nop			; (mov r8, r8)
 800752e:	46bd      	mov	sp, r7
 8007530:	b006      	add	sp, #24
 8007532:	bd80      	pop	{r7, pc}

08007534 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b094      	sub	sp, #80	; 0x50
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800753c:	204e      	movs	r0, #78	; 0x4e
 800753e:	183b      	adds	r3, r7, r0
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	215c      	movs	r1, #92	; 0x5c
 8007544:	5a52      	ldrh	r2, [r2, r1]
 8007546:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2280      	movs	r2, #128	; 0x80
 800754c:	589b      	ldr	r3, [r3, r2]
 800754e:	2b22      	cmp	r3, #34	; 0x22
 8007550:	d000      	beq.n	8007554 <UART_RxISR_8BIT+0x20>
 8007552:	e0bf      	b.n	80076d4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800755a:	214c      	movs	r1, #76	; 0x4c
 800755c:	187b      	adds	r3, r7, r1
 800755e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007560:	187b      	adds	r3, r7, r1
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b2da      	uxtb	r2, r3
 8007566:	183b      	adds	r3, r7, r0
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b2d9      	uxtb	r1, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	400a      	ands	r2, r1
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	225a      	movs	r2, #90	; 0x5a
 8007584:	5a9b      	ldrh	r3, [r3, r2]
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b299      	uxth	r1, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	225a      	movs	r2, #90	; 0x5a
 8007590:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	225a      	movs	r2, #90	; 0x5a
 8007596:	5a9b      	ldrh	r3, [r3, r2]
 8007598:	b29b      	uxth	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d000      	beq.n	80075a0 <UART_RxISR_8BIT+0x6c>
 800759e:	e0a1      	b.n	80076e4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a0:	f3ef 8310 	mrs	r3, PRIMASK
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075aa:	2301      	movs	r3, #1
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	f383 8810 	msr	PRIMASK, r3
}
 80075b4:	46c0      	nop			; (mov r8, r8)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	494a      	ldr	r1, [pc, #296]	; (80076ec <UART_RxISR_8BIT+0x1b8>)
 80075c2:	400a      	ands	r2, r1
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	f383 8810 	msr	PRIMASK, r3
}
 80075d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d2:	f3ef 8310 	mrs	r3, PRIMASK
 80075d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	647b      	str	r3, [r7, #68]	; 0x44
 80075dc:	2301      	movs	r3, #1
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e2:	f383 8810 	msr	PRIMASK, r3
}
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2101      	movs	r1, #1
 80075f4:	438a      	bics	r2, r1
 80075f6:	609a      	str	r2, [r3, #8]
 80075f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	f383 8810 	msr	PRIMASK, r3
}
 8007602:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2280      	movs	r2, #128	; 0x80
 8007608:	2120      	movs	r1, #32
 800760a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a34      	ldr	r2, [pc, #208]	; (80076f0 <UART_RxISR_8BIT+0x1bc>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01f      	beq.n	8007662 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	2380      	movs	r3, #128	; 0x80
 800762a:	041b      	lsls	r3, r3, #16
 800762c:	4013      	ands	r3, r2
 800762e:	d018      	beq.n	8007662 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007630:	f3ef 8310 	mrs	r3, PRIMASK
 8007634:	61bb      	str	r3, [r7, #24]
  return(result);
 8007636:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007638:	643b      	str	r3, [r7, #64]	; 0x40
 800763a:	2301      	movs	r3, #1
 800763c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	f383 8810 	msr	PRIMASK, r3
}
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4928      	ldr	r1, [pc, #160]	; (80076f4 <UART_RxISR_8BIT+0x1c0>)
 8007652:	400a      	ands	r2, r1
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007658:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	f383 8810 	msr	PRIMASK, r3
}
 8007660:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007666:	2b01      	cmp	r3, #1
 8007668:	d12f      	bne.n	80076ca <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007670:	f3ef 8310 	mrs	r3, PRIMASK
 8007674:	60fb      	str	r3, [r7, #12]
  return(result);
 8007676:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800767a:	2301      	movs	r3, #1
 800767c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f383 8810 	msr	PRIMASK, r3
}
 8007684:	46c0      	nop			; (mov r8, r8)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2110      	movs	r1, #16
 8007692:	438a      	bics	r2, r1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007698:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f383 8810 	msr	PRIMASK, r3
}
 80076a0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	2210      	movs	r2, #16
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b10      	cmp	r3, #16
 80076ae:	d103      	bne.n	80076b8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2210      	movs	r2, #16
 80076b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2258      	movs	r2, #88	; 0x58
 80076bc:	5a9a      	ldrh	r2, [r3, r2]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	0011      	movs	r1, r2
 80076c2:	0018      	movs	r0, r3
 80076c4:	f7fc fa3a 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076c8:	e00c      	b.n	80076e4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	0018      	movs	r0, r3
 80076ce:	f7ff f94d 	bl	800696c <HAL_UART_RxCpltCallback>
}
 80076d2:	e007      	b.n	80076e4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2108      	movs	r1, #8
 80076e0:	430a      	orrs	r2, r1
 80076e2:	619a      	str	r2, [r3, #24]
}
 80076e4:	46c0      	nop			; (mov r8, r8)
 80076e6:	46bd      	mov	sp, r7
 80076e8:	b014      	add	sp, #80	; 0x50
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	fffffedf 	.word	0xfffffedf
 80076f0:	40004800 	.word	0x40004800
 80076f4:	fbffffff 	.word	0xfbffffff

080076f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b094      	sub	sp, #80	; 0x50
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007700:	204e      	movs	r0, #78	; 0x4e
 8007702:	183b      	adds	r3, r7, r0
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	215c      	movs	r1, #92	; 0x5c
 8007708:	5a52      	ldrh	r2, [r2, r1]
 800770a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2280      	movs	r2, #128	; 0x80
 8007710:	589b      	ldr	r3, [r3, r2]
 8007712:	2b22      	cmp	r3, #34	; 0x22
 8007714:	d000      	beq.n	8007718 <UART_RxISR_16BIT+0x20>
 8007716:	e0bf      	b.n	8007898 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800771e:	214c      	movs	r1, #76	; 0x4c
 8007720:	187b      	adds	r3, r7, r1
 8007722:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800772a:	187b      	adds	r3, r7, r1
 800772c:	183a      	adds	r2, r7, r0
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	8812      	ldrh	r2, [r2, #0]
 8007732:	4013      	ands	r3, r2
 8007734:	b29a      	uxth	r2, r3
 8007736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007738:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773e:	1c9a      	adds	r2, r3, #2
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	225a      	movs	r2, #90	; 0x5a
 8007748:	5a9b      	ldrh	r3, [r3, r2]
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b299      	uxth	r1, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	225a      	movs	r2, #90	; 0x5a
 8007754:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	225a      	movs	r2, #90	; 0x5a
 800775a:	5a9b      	ldrh	r3, [r3, r2]
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d000      	beq.n	8007764 <UART_RxISR_16BIT+0x6c>
 8007762:	e0a1      	b.n	80078a8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007764:	f3ef 8310 	mrs	r3, PRIMASK
 8007768:	623b      	str	r3, [r7, #32]
  return(result);
 800776a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800776c:	647b      	str	r3, [r7, #68]	; 0x44
 800776e:	2301      	movs	r3, #1
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	f383 8810 	msr	PRIMASK, r3
}
 8007778:	46c0      	nop			; (mov r8, r8)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	494a      	ldr	r1, [pc, #296]	; (80078b0 <UART_RxISR_16BIT+0x1b8>)
 8007786:	400a      	ands	r2, r1
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800778c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	f383 8810 	msr	PRIMASK, r3
}
 8007794:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007796:	f3ef 8310 	mrs	r3, PRIMASK
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779e:	643b      	str	r3, [r7, #64]	; 0x40
 80077a0:	2301      	movs	r3, #1
 80077a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a6:	f383 8810 	msr	PRIMASK, r3
}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2101      	movs	r1, #1
 80077b8:	438a      	bics	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
 80077bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c2:	f383 8810 	msr	PRIMASK, r3
}
 80077c6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2280      	movs	r2, #128	; 0x80
 80077cc:	2120      	movs	r1, #32
 80077ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a34      	ldr	r2, [pc, #208]	; (80078b4 <UART_RxISR_16BIT+0x1bc>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d01f      	beq.n	8007826 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	2380      	movs	r3, #128	; 0x80
 80077ee:	041b      	lsls	r3, r3, #16
 80077f0:	4013      	ands	r3, r2
 80077f2:	d018      	beq.n	8007826 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f4:	f3ef 8310 	mrs	r3, PRIMASK
 80077f8:	617b      	str	r3, [r7, #20]
  return(result);
 80077fa:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077fe:	2301      	movs	r3, #1
 8007800:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	f383 8810 	msr	PRIMASK, r3
}
 8007808:	46c0      	nop			; (mov r8, r8)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4928      	ldr	r1, [pc, #160]	; (80078b8 <UART_RxISR_16BIT+0x1c0>)
 8007816:	400a      	ands	r2, r1
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	f383 8810 	msr	PRIMASK, r3
}
 8007824:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782a:	2b01      	cmp	r3, #1
 800782c:	d12f      	bne.n	800788e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007834:	f3ef 8310 	mrs	r3, PRIMASK
 8007838:	60bb      	str	r3, [r7, #8]
  return(result);
 800783a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783c:	63bb      	str	r3, [r7, #56]	; 0x38
 800783e:	2301      	movs	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f383 8810 	msr	PRIMASK, r3
}
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2110      	movs	r1, #16
 8007856:	438a      	bics	r2, r1
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f383 8810 	msr	PRIMASK, r3
}
 8007864:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	2210      	movs	r2, #16
 800786e:	4013      	ands	r3, r2
 8007870:	2b10      	cmp	r3, #16
 8007872:	d103      	bne.n	800787c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2210      	movs	r2, #16
 800787a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2258      	movs	r2, #88	; 0x58
 8007880:	5a9a      	ldrh	r2, [r3, r2]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	0011      	movs	r1, r2
 8007886:	0018      	movs	r0, r3
 8007888:	f7fc f958 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800788c:	e00c      	b.n	80078a8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	0018      	movs	r0, r3
 8007892:	f7ff f86b 	bl	800696c <HAL_UART_RxCpltCallback>
}
 8007896:	e007      	b.n	80078a8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2108      	movs	r1, #8
 80078a4:	430a      	orrs	r2, r1
 80078a6:	619a      	str	r2, [r3, #24]
}
 80078a8:	46c0      	nop			; (mov r8, r8)
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b014      	add	sp, #80	; 0x50
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	fffffedf 	.word	0xfffffedf
 80078b4:	40004800 	.word	0x40004800
 80078b8:	fbffffff 	.word	0xfbffffff

080078bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078c4:	46c0      	nop			; (mov r8, r8)
 80078c6:	46bd      	mov	sp, r7
 80078c8:	b002      	add	sp, #8
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078cc:	b5b0      	push	{r4, r5, r7, lr}
 80078ce:	b08a      	sub	sp, #40	; 0x28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	1dbb      	adds	r3, r7, #6
 80078d8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2280      	movs	r2, #128	; 0x80
 80078de:	589b      	ldr	r3, [r3, r2]
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d156      	bne.n	8007992 <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80078ea:	1dbb      	adds	r3, r7, #6
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e04e      	b.n	8007994 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689a      	ldr	r2, [r3, #8]
 80078fa:	2380      	movs	r3, #128	; 0x80
 80078fc:	015b      	lsls	r3, r3, #5
 80078fe:	429a      	cmp	r2, r3
 8007900:	d109      	bne.n	8007916 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2201      	movs	r2, #1
 800790e:	4013      	ands	r3, r2
 8007910:	d001      	beq.n	8007916 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e03e      	b.n	8007994 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8007922:	2527      	movs	r5, #39	; 0x27
 8007924:	197c      	adds	r4, r7, r5
 8007926:	1dbb      	adds	r3, r7, #6
 8007928:	881a      	ldrh	r2, [r3, #0]
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	0018      	movs	r0, r3
 8007930:	f7ff fc90 	bl	8007254 <UART_Start_Receive_IT>
 8007934:	0003      	movs	r3, r0
 8007936:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007938:	197b      	adds	r3, r7, r5
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d124      	bne.n	800798a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007944:	2b01      	cmp	r3, #1
 8007946:	d11c      	bne.n	8007982 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2210      	movs	r2, #16
 800794e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007950:	f3ef 8310 	mrs	r3, PRIMASK
 8007954:	617b      	str	r3, [r7, #20]
  return(result);
 8007956:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	623b      	str	r3, [r7, #32]
 800795a:	2301      	movs	r3, #1
 800795c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f383 8810 	msr	PRIMASK, r3
}
 8007964:	46c0      	nop			; (mov r8, r8)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2110      	movs	r1, #16
 8007972:	430a      	orrs	r2, r1
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	f383 8810 	msr	PRIMASK, r3
}
 8007980:	e003      	b.n	800798a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007982:	2327      	movs	r3, #39	; 0x27
 8007984:	18fb      	adds	r3, r7, r3
 8007986:	2201      	movs	r2, #1
 8007988:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800798a:	2327      	movs	r3, #39	; 0x27
 800798c:	18fb      	adds	r3, r7, r3
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	e000      	b.n	8007994 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007992:	2302      	movs	r3, #2
  }
}
 8007994:	0018      	movs	r0, r3
 8007996:	46bd      	mov	sp, r7
 8007998:	b00a      	add	sp, #40	; 0x28
 800799a:	bdb0      	pop	{r4, r5, r7, pc}

0800799c <malloc>:
 800799c:	b510      	push	{r4, lr}
 800799e:	4b03      	ldr	r3, [pc, #12]	; (80079ac <malloc+0x10>)
 80079a0:	0001      	movs	r1, r0
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	f000 f830 	bl	8007a08 <_malloc_r>
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	200000c8 	.word	0x200000c8

080079b0 <free>:
 80079b0:	b510      	push	{r4, lr}
 80079b2:	4b03      	ldr	r3, [pc, #12]	; (80079c0 <free+0x10>)
 80079b4:	0001      	movs	r1, r0
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	f000 fc16 	bl	80081e8 <_free_r>
 80079bc:	bd10      	pop	{r4, pc}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	200000c8 	.word	0x200000c8

080079c4 <sbrk_aligned>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	4e0f      	ldr	r6, [pc, #60]	; (8007a04 <sbrk_aligned+0x40>)
 80079c8:	000d      	movs	r5, r1
 80079ca:	6831      	ldr	r1, [r6, #0]
 80079cc:	0004      	movs	r4, r0
 80079ce:	2900      	cmp	r1, #0
 80079d0:	d102      	bne.n	80079d8 <sbrk_aligned+0x14>
 80079d2:	f000 fbad 	bl	8008130 <_sbrk_r>
 80079d6:	6030      	str	r0, [r6, #0]
 80079d8:	0029      	movs	r1, r5
 80079da:	0020      	movs	r0, r4
 80079dc:	f000 fba8 	bl	8008130 <_sbrk_r>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d00a      	beq.n	80079fa <sbrk_aligned+0x36>
 80079e4:	2303      	movs	r3, #3
 80079e6:	1cc5      	adds	r5, r0, #3
 80079e8:	439d      	bics	r5, r3
 80079ea:	42a8      	cmp	r0, r5
 80079ec:	d007      	beq.n	80079fe <sbrk_aligned+0x3a>
 80079ee:	1a29      	subs	r1, r5, r0
 80079f0:	0020      	movs	r0, r4
 80079f2:	f000 fb9d 	bl	8008130 <_sbrk_r>
 80079f6:	3001      	adds	r0, #1
 80079f8:	d101      	bne.n	80079fe <sbrk_aligned+0x3a>
 80079fa:	2501      	movs	r5, #1
 80079fc:	426d      	negs	r5, r5
 80079fe:	0028      	movs	r0, r5
 8007a00:	bd70      	pop	{r4, r5, r6, pc}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	20000440 	.word	0x20000440

08007a08 <_malloc_r>:
 8007a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	1ccb      	adds	r3, r1, #3
 8007a0e:	4393      	bics	r3, r2
 8007a10:	3308      	adds	r3, #8
 8007a12:	0006      	movs	r6, r0
 8007a14:	001f      	movs	r7, r3
 8007a16:	2b0c      	cmp	r3, #12
 8007a18:	d238      	bcs.n	8007a8c <_malloc_r+0x84>
 8007a1a:	270c      	movs	r7, #12
 8007a1c:	42b9      	cmp	r1, r7
 8007a1e:	d837      	bhi.n	8007a90 <_malloc_r+0x88>
 8007a20:	0030      	movs	r0, r6
 8007a22:	f000 f873 	bl	8007b0c <__malloc_lock>
 8007a26:	4b38      	ldr	r3, [pc, #224]	; (8007b08 <_malloc_r+0x100>)
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	001c      	movs	r4, r3
 8007a2e:	2c00      	cmp	r4, #0
 8007a30:	d133      	bne.n	8007a9a <_malloc_r+0x92>
 8007a32:	0039      	movs	r1, r7
 8007a34:	0030      	movs	r0, r6
 8007a36:	f7ff ffc5 	bl	80079c4 <sbrk_aligned>
 8007a3a:	0004      	movs	r4, r0
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d15e      	bne.n	8007afe <_malloc_r+0xf6>
 8007a40:	9b00      	ldr	r3, [sp, #0]
 8007a42:	681c      	ldr	r4, [r3, #0]
 8007a44:	0025      	movs	r5, r4
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	d14e      	bne.n	8007ae8 <_malloc_r+0xe0>
 8007a4a:	2c00      	cmp	r4, #0
 8007a4c:	d051      	beq.n	8007af2 <_malloc_r+0xea>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	0029      	movs	r1, r5
 8007a52:	18e3      	adds	r3, r4, r3
 8007a54:	0030      	movs	r0, r6
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	f000 fb6a 	bl	8008130 <_sbrk_r>
 8007a5c:	9b01      	ldr	r3, [sp, #4]
 8007a5e:	4283      	cmp	r3, r0
 8007a60:	d147      	bne.n	8007af2 <_malloc_r+0xea>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	0030      	movs	r0, r6
 8007a66:	1aff      	subs	r7, r7, r3
 8007a68:	0039      	movs	r1, r7
 8007a6a:	f7ff ffab 	bl	80079c4 <sbrk_aligned>
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d03f      	beq.n	8007af2 <_malloc_r+0xea>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	19db      	adds	r3, r3, r7
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	9b00      	ldr	r3, [sp, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d040      	beq.n	8007b02 <_malloc_r+0xfa>
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	42a2      	cmp	r2, r4
 8007a84:	d133      	bne.n	8007aee <_malloc_r+0xe6>
 8007a86:	2200      	movs	r2, #0
 8007a88:	605a      	str	r2, [r3, #4]
 8007a8a:	e014      	b.n	8007ab6 <_malloc_r+0xae>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dac5      	bge.n	8007a1c <_malloc_r+0x14>
 8007a90:	230c      	movs	r3, #12
 8007a92:	2500      	movs	r5, #0
 8007a94:	6033      	str	r3, [r6, #0]
 8007a96:	0028      	movs	r0, r5
 8007a98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a9a:	6821      	ldr	r1, [r4, #0]
 8007a9c:	1bc9      	subs	r1, r1, r7
 8007a9e:	d420      	bmi.n	8007ae2 <_malloc_r+0xda>
 8007aa0:	290b      	cmp	r1, #11
 8007aa2:	d918      	bls.n	8007ad6 <_malloc_r+0xce>
 8007aa4:	19e2      	adds	r2, r4, r7
 8007aa6:	6027      	str	r7, [r4, #0]
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d112      	bne.n	8007ad2 <_malloc_r+0xca>
 8007aac:	9b00      	ldr	r3, [sp, #0]
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	6863      	ldr	r3, [r4, #4]
 8007ab2:	6011      	str	r1, [r2, #0]
 8007ab4:	6053      	str	r3, [r2, #4]
 8007ab6:	0030      	movs	r0, r6
 8007ab8:	0025      	movs	r5, r4
 8007aba:	f000 f82f 	bl	8007b1c <__malloc_unlock>
 8007abe:	2207      	movs	r2, #7
 8007ac0:	350b      	adds	r5, #11
 8007ac2:	1d23      	adds	r3, r4, #4
 8007ac4:	4395      	bics	r5, r2
 8007ac6:	1aea      	subs	r2, r5, r3
 8007ac8:	429d      	cmp	r5, r3
 8007aca:	d0e4      	beq.n	8007a96 <_malloc_r+0x8e>
 8007acc:	1b5b      	subs	r3, r3, r5
 8007ace:	50a3      	str	r3, [r4, r2]
 8007ad0:	e7e1      	b.n	8007a96 <_malloc_r+0x8e>
 8007ad2:	605a      	str	r2, [r3, #4]
 8007ad4:	e7ec      	b.n	8007ab0 <_malloc_r+0xa8>
 8007ad6:	6862      	ldr	r2, [r4, #4]
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	d1d5      	bne.n	8007a88 <_malloc_r+0x80>
 8007adc:	9b00      	ldr	r3, [sp, #0]
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e7e9      	b.n	8007ab6 <_malloc_r+0xae>
 8007ae2:	0023      	movs	r3, r4
 8007ae4:	6864      	ldr	r4, [r4, #4]
 8007ae6:	e7a2      	b.n	8007a2e <_malloc_r+0x26>
 8007ae8:	002c      	movs	r4, r5
 8007aea:	686d      	ldr	r5, [r5, #4]
 8007aec:	e7ab      	b.n	8007a46 <_malloc_r+0x3e>
 8007aee:	0013      	movs	r3, r2
 8007af0:	e7c4      	b.n	8007a7c <_malloc_r+0x74>
 8007af2:	230c      	movs	r3, #12
 8007af4:	0030      	movs	r0, r6
 8007af6:	6033      	str	r3, [r6, #0]
 8007af8:	f000 f810 	bl	8007b1c <__malloc_unlock>
 8007afc:	e7cb      	b.n	8007a96 <_malloc_r+0x8e>
 8007afe:	6027      	str	r7, [r4, #0]
 8007b00:	e7d9      	b.n	8007ab6 <_malloc_r+0xae>
 8007b02:	605b      	str	r3, [r3, #4]
 8007b04:	deff      	udf	#255	; 0xff
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	2000043c 	.word	0x2000043c

08007b0c <__malloc_lock>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	4802      	ldr	r0, [pc, #8]	; (8007b18 <__malloc_lock+0xc>)
 8007b10:	f000 fb5f 	bl	80081d2 <__retarget_lock_acquire_recursive>
 8007b14:	bd10      	pop	{r4, pc}
 8007b16:	46c0      	nop			; (mov r8, r8)
 8007b18:	20000584 	.word	0x20000584

08007b1c <__malloc_unlock>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	4802      	ldr	r0, [pc, #8]	; (8007b28 <__malloc_unlock+0xc>)
 8007b20:	f000 fb58 	bl	80081d4 <__retarget_lock_release_recursive>
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	20000584 	.word	0x20000584

08007b2c <realloc>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <realloc+0x10>)
 8007b30:	000a      	movs	r2, r1
 8007b32:	0001      	movs	r1, r0
 8007b34:	6818      	ldr	r0, [r3, #0]
 8007b36:	f000 f803 	bl	8007b40 <_realloc_r>
 8007b3a:	bd10      	pop	{r4, pc}
 8007b3c:	200000c8 	.word	0x200000c8

08007b40 <_realloc_r>:
 8007b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b42:	0007      	movs	r7, r0
 8007b44:	000e      	movs	r6, r1
 8007b46:	0014      	movs	r4, r2
 8007b48:	2900      	cmp	r1, #0
 8007b4a:	d105      	bne.n	8007b58 <_realloc_r+0x18>
 8007b4c:	0011      	movs	r1, r2
 8007b4e:	f7ff ff5b 	bl	8007a08 <_malloc_r>
 8007b52:	0005      	movs	r5, r0
 8007b54:	0028      	movs	r0, r5
 8007b56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b58:	2a00      	cmp	r2, #0
 8007b5a:	d103      	bne.n	8007b64 <_realloc_r+0x24>
 8007b5c:	f000 fb44 	bl	80081e8 <_free_r>
 8007b60:	0025      	movs	r5, r4
 8007b62:	e7f7      	b.n	8007b54 <_realloc_r+0x14>
 8007b64:	f000 fb8a 	bl	800827c <_malloc_usable_size_r>
 8007b68:	9001      	str	r0, [sp, #4]
 8007b6a:	4284      	cmp	r4, r0
 8007b6c:	d803      	bhi.n	8007b76 <_realloc_r+0x36>
 8007b6e:	0035      	movs	r5, r6
 8007b70:	0843      	lsrs	r3, r0, #1
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	d3ee      	bcc.n	8007b54 <_realloc_r+0x14>
 8007b76:	0021      	movs	r1, r4
 8007b78:	0038      	movs	r0, r7
 8007b7a:	f7ff ff45 	bl	8007a08 <_malloc_r>
 8007b7e:	1e05      	subs	r5, r0, #0
 8007b80:	d0e8      	beq.n	8007b54 <_realloc_r+0x14>
 8007b82:	9b01      	ldr	r3, [sp, #4]
 8007b84:	0022      	movs	r2, r4
 8007b86:	429c      	cmp	r4, r3
 8007b88:	d900      	bls.n	8007b8c <_realloc_r+0x4c>
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	0031      	movs	r1, r6
 8007b8e:	0028      	movs	r0, r5
 8007b90:	f000 fb21 	bl	80081d6 <memcpy>
 8007b94:	0031      	movs	r1, r6
 8007b96:	0038      	movs	r0, r7
 8007b98:	f000 fb26 	bl	80081e8 <_free_r>
 8007b9c:	e7da      	b.n	8007b54 <_realloc_r+0x14>
	...

08007ba0 <std>:
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	0004      	movs	r4, r0
 8007ba6:	6003      	str	r3, [r0, #0]
 8007ba8:	6043      	str	r3, [r0, #4]
 8007baa:	6083      	str	r3, [r0, #8]
 8007bac:	8181      	strh	r1, [r0, #12]
 8007bae:	6643      	str	r3, [r0, #100]	; 0x64
 8007bb0:	81c2      	strh	r2, [r0, #14]
 8007bb2:	6103      	str	r3, [r0, #16]
 8007bb4:	6143      	str	r3, [r0, #20]
 8007bb6:	6183      	str	r3, [r0, #24]
 8007bb8:	0019      	movs	r1, r3
 8007bba:	2208      	movs	r2, #8
 8007bbc:	305c      	adds	r0, #92	; 0x5c
 8007bbe:	f000 fa5f 	bl	8008080 <memset>
 8007bc2:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <std+0x50>)
 8007bc4:	6224      	str	r4, [r4, #32]
 8007bc6:	6263      	str	r3, [r4, #36]	; 0x24
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	; (8007bf4 <std+0x54>)
 8007bca:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <std+0x58>)
 8007bce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <std+0x5c>)
 8007bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <std+0x60>)
 8007bd6:	429c      	cmp	r4, r3
 8007bd8:	d005      	beq.n	8007be6 <std+0x46>
 8007bda:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <std+0x64>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	d002      	beq.n	8007be6 <std+0x46>
 8007be0:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <std+0x68>)
 8007be2:	429c      	cmp	r4, r3
 8007be4:	d103      	bne.n	8007bee <std+0x4e>
 8007be6:	0020      	movs	r0, r4
 8007be8:	3058      	adds	r0, #88	; 0x58
 8007bea:	f000 faf1 	bl	80081d0 <__retarget_lock_init_recursive>
 8007bee:	bd10      	pop	{r4, pc}
 8007bf0:	08007e99 	.word	0x08007e99
 8007bf4:	08007ec5 	.word	0x08007ec5
 8007bf8:	08007efd 	.word	0x08007efd
 8007bfc:	08007f29 	.word	0x08007f29
 8007c00:	20000444 	.word	0x20000444
 8007c04:	200004ac 	.word	0x200004ac
 8007c08:	20000514 	.word	0x20000514

08007c0c <stdio_exit_handler>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4a03      	ldr	r2, [pc, #12]	; (8007c1c <stdio_exit_handler+0x10>)
 8007c10:	4903      	ldr	r1, [pc, #12]	; (8007c20 <stdio_exit_handler+0x14>)
 8007c12:	4804      	ldr	r0, [pc, #16]	; (8007c24 <stdio_exit_handler+0x18>)
 8007c14:	f000 f86c 	bl	8007cf0 <_fwalk_sglue>
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	20000070 	.word	0x20000070
 8007c20:	0800923d 	.word	0x0800923d
 8007c24:	2000007c 	.word	0x2000007c

08007c28 <cleanup_stdio>:
 8007c28:	6841      	ldr	r1, [r0, #4]
 8007c2a:	4b0b      	ldr	r3, [pc, #44]	; (8007c58 <cleanup_stdio+0x30>)
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	0004      	movs	r4, r0
 8007c30:	4299      	cmp	r1, r3
 8007c32:	d001      	beq.n	8007c38 <cleanup_stdio+0x10>
 8007c34:	f001 fb02 	bl	800923c <_fflush_r>
 8007c38:	68a1      	ldr	r1, [r4, #8]
 8007c3a:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <cleanup_stdio+0x34>)
 8007c3c:	4299      	cmp	r1, r3
 8007c3e:	d002      	beq.n	8007c46 <cleanup_stdio+0x1e>
 8007c40:	0020      	movs	r0, r4
 8007c42:	f001 fafb 	bl	800923c <_fflush_r>
 8007c46:	68e1      	ldr	r1, [r4, #12]
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <cleanup_stdio+0x38>)
 8007c4a:	4299      	cmp	r1, r3
 8007c4c:	d002      	beq.n	8007c54 <cleanup_stdio+0x2c>
 8007c4e:	0020      	movs	r0, r4
 8007c50:	f001 faf4 	bl	800923c <_fflush_r>
 8007c54:	bd10      	pop	{r4, pc}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	20000444 	.word	0x20000444
 8007c5c:	200004ac 	.word	0x200004ac
 8007c60:	20000514 	.word	0x20000514

08007c64 <global_stdio_init.part.0>:
 8007c64:	b510      	push	{r4, lr}
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <global_stdio_init.part.0+0x28>)
 8007c68:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <global_stdio_init.part.0+0x2c>)
 8007c6a:	2104      	movs	r1, #4
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	4809      	ldr	r0, [pc, #36]	; (8007c94 <global_stdio_init.part.0+0x30>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	f7ff ff95 	bl	8007ba0 <std>
 8007c76:	2201      	movs	r2, #1
 8007c78:	2109      	movs	r1, #9
 8007c7a:	4807      	ldr	r0, [pc, #28]	; (8007c98 <global_stdio_init.part.0+0x34>)
 8007c7c:	f7ff ff90 	bl	8007ba0 <std>
 8007c80:	2202      	movs	r2, #2
 8007c82:	2112      	movs	r1, #18
 8007c84:	4805      	ldr	r0, [pc, #20]	; (8007c9c <global_stdio_init.part.0+0x38>)
 8007c86:	f7ff ff8b 	bl	8007ba0 <std>
 8007c8a:	bd10      	pop	{r4, pc}
 8007c8c:	2000057c 	.word	0x2000057c
 8007c90:	08007c0d 	.word	0x08007c0d
 8007c94:	20000444 	.word	0x20000444
 8007c98:	200004ac 	.word	0x200004ac
 8007c9c:	20000514 	.word	0x20000514

08007ca0 <__sfp_lock_acquire>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4802      	ldr	r0, [pc, #8]	; (8007cac <__sfp_lock_acquire+0xc>)
 8007ca4:	f000 fa95 	bl	80081d2 <__retarget_lock_acquire_recursive>
 8007ca8:	bd10      	pop	{r4, pc}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	20000585 	.word	0x20000585

08007cb0 <__sfp_lock_release>:
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	4802      	ldr	r0, [pc, #8]	; (8007cbc <__sfp_lock_release+0xc>)
 8007cb4:	f000 fa8e 	bl	80081d4 <__retarget_lock_release_recursive>
 8007cb8:	bd10      	pop	{r4, pc}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	20000585 	.word	0x20000585

08007cc0 <__sinit>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	0004      	movs	r4, r0
 8007cc4:	f7ff ffec 	bl	8007ca0 <__sfp_lock_acquire>
 8007cc8:	6a23      	ldr	r3, [r4, #32]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <__sinit+0x14>
 8007cce:	f7ff ffef 	bl	8007cb0 <__sfp_lock_release>
 8007cd2:	bd10      	pop	{r4, pc}
 8007cd4:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <__sinit+0x28>)
 8007cd6:	6223      	str	r3, [r4, #32]
 8007cd8:	4b04      	ldr	r3, [pc, #16]	; (8007cec <__sinit+0x2c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1f6      	bne.n	8007cce <__sinit+0xe>
 8007ce0:	f7ff ffc0 	bl	8007c64 <global_stdio_init.part.0>
 8007ce4:	e7f3      	b.n	8007cce <__sinit+0xe>
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	08007c29 	.word	0x08007c29
 8007cec:	2000057c 	.word	0x2000057c

08007cf0 <_fwalk_sglue>:
 8007cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf2:	0014      	movs	r4, r2
 8007cf4:	2600      	movs	r6, #0
 8007cf6:	9000      	str	r0, [sp, #0]
 8007cf8:	9101      	str	r1, [sp, #4]
 8007cfa:	68a5      	ldr	r5, [r4, #8]
 8007cfc:	6867      	ldr	r7, [r4, #4]
 8007cfe:	3f01      	subs	r7, #1
 8007d00:	d504      	bpl.n	8007d0c <_fwalk_sglue+0x1c>
 8007d02:	6824      	ldr	r4, [r4, #0]
 8007d04:	2c00      	cmp	r4, #0
 8007d06:	d1f8      	bne.n	8007cfa <_fwalk_sglue+0xa>
 8007d08:	0030      	movs	r0, r6
 8007d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d0c:	89ab      	ldrh	r3, [r5, #12]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d908      	bls.n	8007d24 <_fwalk_sglue+0x34>
 8007d12:	220e      	movs	r2, #14
 8007d14:	5eab      	ldrsh	r3, [r5, r2]
 8007d16:	3301      	adds	r3, #1
 8007d18:	d004      	beq.n	8007d24 <_fwalk_sglue+0x34>
 8007d1a:	0029      	movs	r1, r5
 8007d1c:	9800      	ldr	r0, [sp, #0]
 8007d1e:	9b01      	ldr	r3, [sp, #4]
 8007d20:	4798      	blx	r3
 8007d22:	4306      	orrs	r6, r0
 8007d24:	3568      	adds	r5, #104	; 0x68
 8007d26:	e7ea      	b.n	8007cfe <_fwalk_sglue+0xe>

08007d28 <iprintf>:
 8007d28:	b40f      	push	{r0, r1, r2, r3}
 8007d2a:	b507      	push	{r0, r1, r2, lr}
 8007d2c:	4905      	ldr	r1, [pc, #20]	; (8007d44 <iprintf+0x1c>)
 8007d2e:	ab04      	add	r3, sp, #16
 8007d30:	6808      	ldr	r0, [r1, #0]
 8007d32:	cb04      	ldmia	r3!, {r2}
 8007d34:	6881      	ldr	r1, [r0, #8]
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	f000 fdf8 	bl	800892c <_vfiprintf_r>
 8007d3c:	b003      	add	sp, #12
 8007d3e:	bc08      	pop	{r3}
 8007d40:	b004      	add	sp, #16
 8007d42:	4718      	bx	r3
 8007d44:	200000c8 	.word	0x200000c8

08007d48 <_puts_r>:
 8007d48:	6a03      	ldr	r3, [r0, #32]
 8007d4a:	b570      	push	{r4, r5, r6, lr}
 8007d4c:	0005      	movs	r5, r0
 8007d4e:	000e      	movs	r6, r1
 8007d50:	6884      	ldr	r4, [r0, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <_puts_r+0x12>
 8007d56:	f7ff ffb3 	bl	8007cc0 <__sinit>
 8007d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d5c:	07db      	lsls	r3, r3, #31
 8007d5e:	d405      	bmi.n	8007d6c <_puts_r+0x24>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	059b      	lsls	r3, r3, #22
 8007d64:	d402      	bmi.n	8007d6c <_puts_r+0x24>
 8007d66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d68:	f000 fa33 	bl	80081d2 <__retarget_lock_acquire_recursive>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	071b      	lsls	r3, r3, #28
 8007d70:	d502      	bpl.n	8007d78 <_puts_r+0x30>
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11f      	bne.n	8007db8 <_puts_r+0x70>
 8007d78:	0021      	movs	r1, r4
 8007d7a:	0028      	movs	r0, r5
 8007d7c:	f000 f91c 	bl	8007fb8 <__swsetup_r>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d019      	beq.n	8007db8 <_puts_r+0x70>
 8007d84:	2501      	movs	r5, #1
 8007d86:	426d      	negs	r5, r5
 8007d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d8a:	07db      	lsls	r3, r3, #31
 8007d8c:	d405      	bmi.n	8007d9a <_puts_r+0x52>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	059b      	lsls	r3, r3, #22
 8007d92:	d402      	bmi.n	8007d9a <_puts_r+0x52>
 8007d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d96:	f000 fa1d 	bl	80081d4 <__retarget_lock_release_recursive>
 8007d9a:	0028      	movs	r0, r5
 8007d9c:	bd70      	pop	{r4, r5, r6, pc}
 8007d9e:	3601      	adds	r6, #1
 8007da0:	60a3      	str	r3, [r4, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	da04      	bge.n	8007db0 <_puts_r+0x68>
 8007da6:	69a2      	ldr	r2, [r4, #24]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	dc16      	bgt.n	8007dda <_puts_r+0x92>
 8007dac:	290a      	cmp	r1, #10
 8007dae:	d014      	beq.n	8007dda <_puts_r+0x92>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	6022      	str	r2, [r4, #0]
 8007db6:	7019      	strb	r1, [r3, #0]
 8007db8:	68a3      	ldr	r3, [r4, #8]
 8007dba:	7831      	ldrb	r1, [r6, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	2900      	cmp	r1, #0
 8007dc0:	d1ed      	bne.n	8007d9e <_puts_r+0x56>
 8007dc2:	60a3      	str	r3, [r4, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	da0f      	bge.n	8007de8 <_puts_r+0xa0>
 8007dc8:	0028      	movs	r0, r5
 8007dca:	0022      	movs	r2, r4
 8007dcc:	310a      	adds	r1, #10
 8007dce:	f000 f8b1 	bl	8007f34 <__swbuf_r>
 8007dd2:	250a      	movs	r5, #10
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d1d7      	bne.n	8007d88 <_puts_r+0x40>
 8007dd8:	e7d4      	b.n	8007d84 <_puts_r+0x3c>
 8007dda:	0022      	movs	r2, r4
 8007ddc:	0028      	movs	r0, r5
 8007dde:	f000 f8a9 	bl	8007f34 <__swbuf_r>
 8007de2:	3001      	adds	r0, #1
 8007de4:	d1e8      	bne.n	8007db8 <_puts_r+0x70>
 8007de6:	e7cd      	b.n	8007d84 <_puts_r+0x3c>
 8007de8:	250a      	movs	r5, #10
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	6022      	str	r2, [r4, #0]
 8007df0:	701d      	strb	r5, [r3, #0]
 8007df2:	e7c9      	b.n	8007d88 <_puts_r+0x40>

08007df4 <puts>:
 8007df4:	b510      	push	{r4, lr}
 8007df6:	4b03      	ldr	r3, [pc, #12]	; (8007e04 <puts+0x10>)
 8007df8:	0001      	movs	r1, r0
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	f7ff ffa4 	bl	8007d48 <_puts_r>
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	46c0      	nop			; (mov r8, r8)
 8007e04:	200000c8 	.word	0x200000c8

08007e08 <siprintf>:
 8007e08:	b40e      	push	{r1, r2, r3}
 8007e0a:	b500      	push	{lr}
 8007e0c:	490b      	ldr	r1, [pc, #44]	; (8007e3c <siprintf+0x34>)
 8007e0e:	b09c      	sub	sp, #112	; 0x70
 8007e10:	ab1d      	add	r3, sp, #116	; 0x74
 8007e12:	9002      	str	r0, [sp, #8]
 8007e14:	9006      	str	r0, [sp, #24]
 8007e16:	9107      	str	r1, [sp, #28]
 8007e18:	9104      	str	r1, [sp, #16]
 8007e1a:	4809      	ldr	r0, [pc, #36]	; (8007e40 <siprintf+0x38>)
 8007e1c:	4909      	ldr	r1, [pc, #36]	; (8007e44 <siprintf+0x3c>)
 8007e1e:	cb04      	ldmia	r3!, {r2}
 8007e20:	9105      	str	r1, [sp, #20]
 8007e22:	6800      	ldr	r0, [r0, #0]
 8007e24:	a902      	add	r1, sp, #8
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	f000 fa92 	bl	8008350 <_svfiprintf_r>
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	9b02      	ldr	r3, [sp, #8]
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	b01c      	add	sp, #112	; 0x70
 8007e34:	bc08      	pop	{r3}
 8007e36:	b003      	add	sp, #12
 8007e38:	4718      	bx	r3
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	7fffffff 	.word	0x7fffffff
 8007e40:	200000c8 	.word	0x200000c8
 8007e44:	ffff0208 	.word	0xffff0208

08007e48 <siscanf>:
 8007e48:	b40e      	push	{r1, r2, r3}
 8007e4a:	b530      	push	{r4, r5, lr}
 8007e4c:	2381      	movs	r3, #129	; 0x81
 8007e4e:	b09c      	sub	sp, #112	; 0x70
 8007e50:	466a      	mov	r2, sp
 8007e52:	ac1f      	add	r4, sp, #124	; 0x7c
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	cc20      	ldmia	r4!, {r5}
 8007e58:	8293      	strh	r3, [r2, #20]
 8007e5a:	9002      	str	r0, [sp, #8]
 8007e5c:	9006      	str	r0, [sp, #24]
 8007e5e:	f7f8 f953 	bl	8000108 <strlen>
 8007e62:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <siscanf+0x48>)
 8007e64:	466a      	mov	r2, sp
 8007e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e68:	2300      	movs	r3, #0
 8007e6a:	9003      	str	r0, [sp, #12]
 8007e6c:	9007      	str	r0, [sp, #28]
 8007e6e:	4809      	ldr	r0, [pc, #36]	; (8007e94 <siscanf+0x4c>)
 8007e70:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e72:	9314      	str	r3, [sp, #80]	; 0x50
 8007e74:	3b01      	subs	r3, #1
 8007e76:	82d3      	strh	r3, [r2, #22]
 8007e78:	a902      	add	r1, sp, #8
 8007e7a:	0023      	movs	r3, r4
 8007e7c:	002a      	movs	r2, r5
 8007e7e:	6800      	ldr	r0, [r0, #0]
 8007e80:	9401      	str	r4, [sp, #4]
 8007e82:	f000 fbc1 	bl	8008608 <__ssvfiscanf_r>
 8007e86:	b01c      	add	sp, #112	; 0x70
 8007e88:	bc30      	pop	{r4, r5}
 8007e8a:	bc08      	pop	{r3}
 8007e8c:	b003      	add	sp, #12
 8007e8e:	4718      	bx	r3
 8007e90:	08007ec1 	.word	0x08007ec1
 8007e94:	200000c8 	.word	0x200000c8

08007e98 <__sread>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	000c      	movs	r4, r1
 8007e9c:	250e      	movs	r5, #14
 8007e9e:	5f49      	ldrsh	r1, [r1, r5]
 8007ea0:	f000 f932 	bl	8008108 <_read_r>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	db03      	blt.n	8007eb0 <__sread+0x18>
 8007ea8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007eaa:	181b      	adds	r3, r3, r0
 8007eac:	6563      	str	r3, [r4, #84]	; 0x54
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	4a02      	ldr	r2, [pc, #8]	; (8007ebc <__sread+0x24>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	e7f9      	b.n	8007eae <__sread+0x16>
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	ffffefff 	.word	0xffffefff

08007ec0 <__seofread>:
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	4770      	bx	lr

08007ec4 <__swrite>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	001f      	movs	r7, r3
 8007ec8:	898b      	ldrh	r3, [r1, #12]
 8007eca:	0005      	movs	r5, r0
 8007ecc:	000c      	movs	r4, r1
 8007ece:	0016      	movs	r6, r2
 8007ed0:	05db      	lsls	r3, r3, #23
 8007ed2:	d505      	bpl.n	8007ee0 <__swrite+0x1c>
 8007ed4:	230e      	movs	r3, #14
 8007ed6:	5ec9      	ldrsh	r1, [r1, r3]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2302      	movs	r3, #2
 8007edc:	f000 f900 	bl	80080e0 <_lseek_r>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	4a05      	ldr	r2, [pc, #20]	; (8007ef8 <__swrite+0x34>)
 8007ee4:	0028      	movs	r0, r5
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	81a3      	strh	r3, [r4, #12]
 8007eea:	0032      	movs	r2, r6
 8007eec:	230e      	movs	r3, #14
 8007eee:	5ee1      	ldrsh	r1, [r4, r3]
 8007ef0:	003b      	movs	r3, r7
 8007ef2:	f000 f92f 	bl	8008154 <_write_r>
 8007ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef8:	ffffefff 	.word	0xffffefff

08007efc <__sseek>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	000c      	movs	r4, r1
 8007f00:	250e      	movs	r5, #14
 8007f02:	5f49      	ldrsh	r1, [r1, r5]
 8007f04:	f000 f8ec 	bl	80080e0 <_lseek_r>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	1c42      	adds	r2, r0, #1
 8007f0c:	d103      	bne.n	8007f16 <__sseek+0x1a>
 8007f0e:	4a05      	ldr	r2, [pc, #20]	; (8007f24 <__sseek+0x28>)
 8007f10:	4013      	ands	r3, r2
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	bd70      	pop	{r4, r5, r6, pc}
 8007f16:	2280      	movs	r2, #128	; 0x80
 8007f18:	0152      	lsls	r2, r2, #5
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	81a3      	strh	r3, [r4, #12]
 8007f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8007f20:	e7f8      	b.n	8007f14 <__sseek+0x18>
 8007f22:	46c0      	nop			; (mov r8, r8)
 8007f24:	ffffefff 	.word	0xffffefff

08007f28 <__sclose>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	230e      	movs	r3, #14
 8007f2c:	5ec9      	ldrsh	r1, [r1, r3]
 8007f2e:	f000 f8c5 	bl	80080bc <_close_r>
 8007f32:	bd10      	pop	{r4, pc}

08007f34 <__swbuf_r>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	0006      	movs	r6, r0
 8007f38:	000d      	movs	r5, r1
 8007f3a:	0014      	movs	r4, r2
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d004      	beq.n	8007f4a <__swbuf_r+0x16>
 8007f40:	6a03      	ldr	r3, [r0, #32]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <__swbuf_r+0x16>
 8007f46:	f7ff febb 	bl	8007cc0 <__sinit>
 8007f4a:	69a3      	ldr	r3, [r4, #24]
 8007f4c:	60a3      	str	r3, [r4, #8]
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	071b      	lsls	r3, r3, #28
 8007f52:	d528      	bpl.n	8007fa6 <__swbuf_r+0x72>
 8007f54:	6923      	ldr	r3, [r4, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d025      	beq.n	8007fa6 <__swbuf_r+0x72>
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	6820      	ldr	r0, [r4, #0]
 8007f5e:	b2ef      	uxtb	r7, r5
 8007f60:	1ac0      	subs	r0, r0, r3
 8007f62:	6963      	ldr	r3, [r4, #20]
 8007f64:	b2ed      	uxtb	r5, r5
 8007f66:	4283      	cmp	r3, r0
 8007f68:	dc05      	bgt.n	8007f76 <__swbuf_r+0x42>
 8007f6a:	0021      	movs	r1, r4
 8007f6c:	0030      	movs	r0, r6
 8007f6e:	f001 f965 	bl	800923c <_fflush_r>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d11d      	bne.n	8007fb2 <__swbuf_r+0x7e>
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	3001      	adds	r0, #1
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	60a3      	str	r3, [r4, #8]
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	6022      	str	r2, [r4, #0]
 8007f84:	701f      	strb	r7, [r3, #0]
 8007f86:	6963      	ldr	r3, [r4, #20]
 8007f88:	4283      	cmp	r3, r0
 8007f8a:	d004      	beq.n	8007f96 <__swbuf_r+0x62>
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	07db      	lsls	r3, r3, #31
 8007f90:	d507      	bpl.n	8007fa2 <__swbuf_r+0x6e>
 8007f92:	2d0a      	cmp	r5, #10
 8007f94:	d105      	bne.n	8007fa2 <__swbuf_r+0x6e>
 8007f96:	0021      	movs	r1, r4
 8007f98:	0030      	movs	r0, r6
 8007f9a:	f001 f94f 	bl	800923c <_fflush_r>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d107      	bne.n	8007fb2 <__swbuf_r+0x7e>
 8007fa2:	0028      	movs	r0, r5
 8007fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa6:	0021      	movs	r1, r4
 8007fa8:	0030      	movs	r0, r6
 8007faa:	f000 f805 	bl	8007fb8 <__swsetup_r>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d0d3      	beq.n	8007f5a <__swbuf_r+0x26>
 8007fb2:	2501      	movs	r5, #1
 8007fb4:	426d      	negs	r5, r5
 8007fb6:	e7f4      	b.n	8007fa2 <__swbuf_r+0x6e>

08007fb8 <__swsetup_r>:
 8007fb8:	4b30      	ldr	r3, [pc, #192]	; (800807c <__swsetup_r+0xc4>)
 8007fba:	b570      	push	{r4, r5, r6, lr}
 8007fbc:	0005      	movs	r5, r0
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	000c      	movs	r4, r1
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d004      	beq.n	8007fd0 <__swsetup_r+0x18>
 8007fc6:	6a03      	ldr	r3, [r0, #32]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <__swsetup_r+0x18>
 8007fcc:	f7ff fe78 	bl	8007cc0 <__sinit>
 8007fd0:	230c      	movs	r3, #12
 8007fd2:	5ee2      	ldrsh	r2, [r4, r3]
 8007fd4:	b293      	uxth	r3, r2
 8007fd6:	0711      	lsls	r1, r2, #28
 8007fd8:	d423      	bmi.n	8008022 <__swsetup_r+0x6a>
 8007fda:	06d9      	lsls	r1, r3, #27
 8007fdc:	d407      	bmi.n	8007fee <__swsetup_r+0x36>
 8007fde:	2309      	movs	r3, #9
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	602b      	str	r3, [r5, #0]
 8007fe4:	3337      	adds	r3, #55	; 0x37
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	4240      	negs	r0, r0
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	075b      	lsls	r3, r3, #29
 8007ff0:	d513      	bpl.n	800801a <__swsetup_r+0x62>
 8007ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	d008      	beq.n	800800a <__swsetup_r+0x52>
 8007ff8:	0023      	movs	r3, r4
 8007ffa:	3344      	adds	r3, #68	; 0x44
 8007ffc:	4299      	cmp	r1, r3
 8007ffe:	d002      	beq.n	8008006 <__swsetup_r+0x4e>
 8008000:	0028      	movs	r0, r5
 8008002:	f000 f8f1 	bl	80081e8 <_free_r>
 8008006:	2300      	movs	r3, #0
 8008008:	6363      	str	r3, [r4, #52]	; 0x34
 800800a:	2224      	movs	r2, #36	; 0x24
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	4393      	bics	r3, r2
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	2300      	movs	r3, #0
 8008014:	6063      	str	r3, [r4, #4]
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	2308      	movs	r3, #8
 800801c:	89a2      	ldrh	r2, [r4, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <__swsetup_r+0x88>
 8008028:	21a0      	movs	r1, #160	; 0xa0
 800802a:	2280      	movs	r2, #128	; 0x80
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	0089      	lsls	r1, r1, #2
 8008030:	0092      	lsls	r2, r2, #2
 8008032:	400b      	ands	r3, r1
 8008034:	4293      	cmp	r3, r2
 8008036:	d003      	beq.n	8008040 <__swsetup_r+0x88>
 8008038:	0021      	movs	r1, r4
 800803a:	0028      	movs	r0, r5
 800803c:	f001 f952 	bl	80092e4 <__smakebuf_r>
 8008040:	220c      	movs	r2, #12
 8008042:	5ea3      	ldrsh	r3, [r4, r2]
 8008044:	2001      	movs	r0, #1
 8008046:	001a      	movs	r2, r3
 8008048:	b299      	uxth	r1, r3
 800804a:	4002      	ands	r2, r0
 800804c:	4203      	tst	r3, r0
 800804e:	d00f      	beq.n	8008070 <__swsetup_r+0xb8>
 8008050:	2200      	movs	r2, #0
 8008052:	60a2      	str	r2, [r4, #8]
 8008054:	6962      	ldr	r2, [r4, #20]
 8008056:	4252      	negs	r2, r2
 8008058:	61a2      	str	r2, [r4, #24]
 800805a:	2000      	movs	r0, #0
 800805c:	6922      	ldr	r2, [r4, #16]
 800805e:	4282      	cmp	r2, r0
 8008060:	d1c4      	bne.n	8007fec <__swsetup_r+0x34>
 8008062:	0609      	lsls	r1, r1, #24
 8008064:	d5c2      	bpl.n	8007fec <__swsetup_r+0x34>
 8008066:	2240      	movs	r2, #64	; 0x40
 8008068:	4313      	orrs	r3, r2
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	3801      	subs	r0, #1
 800806e:	e7bd      	b.n	8007fec <__swsetup_r+0x34>
 8008070:	0788      	lsls	r0, r1, #30
 8008072:	d400      	bmi.n	8008076 <__swsetup_r+0xbe>
 8008074:	6962      	ldr	r2, [r4, #20]
 8008076:	60a2      	str	r2, [r4, #8]
 8008078:	e7ef      	b.n	800805a <__swsetup_r+0xa2>
 800807a:	46c0      	nop			; (mov r8, r8)
 800807c:	200000c8 	.word	0x200000c8

08008080 <memset>:
 8008080:	0003      	movs	r3, r0
 8008082:	1882      	adds	r2, r0, r2
 8008084:	4293      	cmp	r3, r2
 8008086:	d100      	bne.n	800808a <memset+0xa>
 8008088:	4770      	bx	lr
 800808a:	7019      	strb	r1, [r3, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	e7f9      	b.n	8008084 <memset+0x4>

08008090 <strstr>:
 8008090:	780a      	ldrb	r2, [r1, #0]
 8008092:	b530      	push	{r4, r5, lr}
 8008094:	2a00      	cmp	r2, #0
 8008096:	d10c      	bne.n	80080b2 <strstr+0x22>
 8008098:	bd30      	pop	{r4, r5, pc}
 800809a:	429a      	cmp	r2, r3
 800809c:	d108      	bne.n	80080b0 <strstr+0x20>
 800809e:	2301      	movs	r3, #1
 80080a0:	5ccc      	ldrb	r4, [r1, r3]
 80080a2:	2c00      	cmp	r4, #0
 80080a4:	d0f8      	beq.n	8008098 <strstr+0x8>
 80080a6:	5cc5      	ldrb	r5, [r0, r3]
 80080a8:	42a5      	cmp	r5, r4
 80080aa:	d101      	bne.n	80080b0 <strstr+0x20>
 80080ac:	3301      	adds	r3, #1
 80080ae:	e7f7      	b.n	80080a0 <strstr+0x10>
 80080b0:	3001      	adds	r0, #1
 80080b2:	7803      	ldrb	r3, [r0, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1f0      	bne.n	800809a <strstr+0xa>
 80080b8:	0018      	movs	r0, r3
 80080ba:	e7ed      	b.n	8008098 <strstr+0x8>

080080bc <_close_r>:
 80080bc:	2300      	movs	r3, #0
 80080be:	b570      	push	{r4, r5, r6, lr}
 80080c0:	4d06      	ldr	r5, [pc, #24]	; (80080dc <_close_r+0x20>)
 80080c2:	0004      	movs	r4, r0
 80080c4:	0008      	movs	r0, r1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7fc fa9b 	bl	8004602 <_close>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d103      	bne.n	80080d8 <_close_r+0x1c>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d000      	beq.n	80080d8 <_close_r+0x1c>
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	20000580 	.word	0x20000580

080080e0 <_lseek_r>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	0004      	movs	r4, r0
 80080e4:	0008      	movs	r0, r1
 80080e6:	0011      	movs	r1, r2
 80080e8:	001a      	movs	r2, r3
 80080ea:	2300      	movs	r3, #0
 80080ec:	4d05      	ldr	r5, [pc, #20]	; (8008104 <_lseek_r+0x24>)
 80080ee:	602b      	str	r3, [r5, #0]
 80080f0:	f7fc faa8 	bl	8004644 <_lseek>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d103      	bne.n	8008100 <_lseek_r+0x20>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d000      	beq.n	8008100 <_lseek_r+0x20>
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	20000580 	.word	0x20000580

08008108 <_read_r>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	0004      	movs	r4, r0
 800810c:	0008      	movs	r0, r1
 800810e:	0011      	movs	r1, r2
 8008110:	001a      	movs	r2, r3
 8008112:	2300      	movs	r3, #0
 8008114:	4d05      	ldr	r5, [pc, #20]	; (800812c <_read_r+0x24>)
 8008116:	602b      	str	r3, [r5, #0]
 8008118:	f7fc fa3a 	bl	8004590 <_read>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d103      	bne.n	8008128 <_read_r+0x20>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d000      	beq.n	8008128 <_read_r+0x20>
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	bd70      	pop	{r4, r5, r6, pc}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	20000580 	.word	0x20000580

08008130 <_sbrk_r>:
 8008130:	2300      	movs	r3, #0
 8008132:	b570      	push	{r4, r5, r6, lr}
 8008134:	4d06      	ldr	r5, [pc, #24]	; (8008150 <_sbrk_r+0x20>)
 8008136:	0004      	movs	r4, r0
 8008138:	0008      	movs	r0, r1
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	f7fc fa8e 	bl	800465c <_sbrk>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d103      	bne.n	800814c <_sbrk_r+0x1c>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d000      	beq.n	800814c <_sbrk_r+0x1c>
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	bd70      	pop	{r4, r5, r6, pc}
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	20000580 	.word	0x20000580

08008154 <_write_r>:
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	0004      	movs	r4, r0
 8008158:	0008      	movs	r0, r1
 800815a:	0011      	movs	r1, r2
 800815c:	001a      	movs	r2, r3
 800815e:	2300      	movs	r3, #0
 8008160:	4d05      	ldr	r5, [pc, #20]	; (8008178 <_write_r+0x24>)
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7fc fa31 	bl	80045ca <_write>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d103      	bne.n	8008174 <_write_r+0x20>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d000      	beq.n	8008174 <_write_r+0x20>
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	bd70      	pop	{r4, r5, r6, pc}
 8008176:	46c0      	nop			; (mov r8, r8)
 8008178:	20000580 	.word	0x20000580

0800817c <__errno>:
 800817c:	4b01      	ldr	r3, [pc, #4]	; (8008184 <__errno+0x8>)
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	4770      	bx	lr
 8008182:	46c0      	nop			; (mov r8, r8)
 8008184:	200000c8 	.word	0x200000c8

08008188 <__libc_init_array>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	2600      	movs	r6, #0
 800818c:	4c0c      	ldr	r4, [pc, #48]	; (80081c0 <__libc_init_array+0x38>)
 800818e:	4d0d      	ldr	r5, [pc, #52]	; (80081c4 <__libc_init_array+0x3c>)
 8008190:	1b64      	subs	r4, r4, r5
 8008192:	10a4      	asrs	r4, r4, #2
 8008194:	42a6      	cmp	r6, r4
 8008196:	d109      	bne.n	80081ac <__libc_init_array+0x24>
 8008198:	2600      	movs	r6, #0
 800819a:	f001 faaf 	bl	80096fc <_init>
 800819e:	4c0a      	ldr	r4, [pc, #40]	; (80081c8 <__libc_init_array+0x40>)
 80081a0:	4d0a      	ldr	r5, [pc, #40]	; (80081cc <__libc_init_array+0x44>)
 80081a2:	1b64      	subs	r4, r4, r5
 80081a4:	10a4      	asrs	r4, r4, #2
 80081a6:	42a6      	cmp	r6, r4
 80081a8:	d105      	bne.n	80081b6 <__libc_init_array+0x2e>
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	00b3      	lsls	r3, r6, #2
 80081ae:	58eb      	ldr	r3, [r5, r3]
 80081b0:	4798      	blx	r3
 80081b2:	3601      	adds	r6, #1
 80081b4:	e7ee      	b.n	8008194 <__libc_init_array+0xc>
 80081b6:	00b3      	lsls	r3, r6, #2
 80081b8:	58eb      	ldr	r3, [r5, r3]
 80081ba:	4798      	blx	r3
 80081bc:	3601      	adds	r6, #1
 80081be:	e7f2      	b.n	80081a6 <__libc_init_array+0x1e>
 80081c0:	0800a678 	.word	0x0800a678
 80081c4:	0800a678 	.word	0x0800a678
 80081c8:	0800a67c 	.word	0x0800a67c
 80081cc:	0800a678 	.word	0x0800a678

080081d0 <__retarget_lock_init_recursive>:
 80081d0:	4770      	bx	lr

080081d2 <__retarget_lock_acquire_recursive>:
 80081d2:	4770      	bx	lr

080081d4 <__retarget_lock_release_recursive>:
 80081d4:	4770      	bx	lr

080081d6 <memcpy>:
 80081d6:	2300      	movs	r3, #0
 80081d8:	b510      	push	{r4, lr}
 80081da:	429a      	cmp	r2, r3
 80081dc:	d100      	bne.n	80081e0 <memcpy+0xa>
 80081de:	bd10      	pop	{r4, pc}
 80081e0:	5ccc      	ldrb	r4, [r1, r3]
 80081e2:	54c4      	strb	r4, [r0, r3]
 80081e4:	3301      	adds	r3, #1
 80081e6:	e7f8      	b.n	80081da <memcpy+0x4>

080081e8 <_free_r>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	0005      	movs	r5, r0
 80081ec:	2900      	cmp	r1, #0
 80081ee:	d010      	beq.n	8008212 <_free_r+0x2a>
 80081f0:	1f0c      	subs	r4, r1, #4
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	da00      	bge.n	80081fa <_free_r+0x12>
 80081f8:	18e4      	adds	r4, r4, r3
 80081fa:	0028      	movs	r0, r5
 80081fc:	f7ff fc86 	bl	8007b0c <__malloc_lock>
 8008200:	4a1d      	ldr	r2, [pc, #116]	; (8008278 <_free_r+0x90>)
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d105      	bne.n	8008214 <_free_r+0x2c>
 8008208:	6063      	str	r3, [r4, #4]
 800820a:	6014      	str	r4, [r2, #0]
 800820c:	0028      	movs	r0, r5
 800820e:	f7ff fc85 	bl	8007b1c <__malloc_unlock>
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	42a3      	cmp	r3, r4
 8008216:	d908      	bls.n	800822a <_free_r+0x42>
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	1821      	adds	r1, r4, r0
 800821c:	428b      	cmp	r3, r1
 800821e:	d1f3      	bne.n	8008208 <_free_r+0x20>
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	1809      	adds	r1, r1, r0
 8008226:	6021      	str	r1, [r4, #0]
 8008228:	e7ee      	b.n	8008208 <_free_r+0x20>
 800822a:	001a      	movs	r2, r3
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <_free_r+0x4e>
 8008232:	42a3      	cmp	r3, r4
 8008234:	d9f9      	bls.n	800822a <_free_r+0x42>
 8008236:	6811      	ldr	r1, [r2, #0]
 8008238:	1850      	adds	r0, r2, r1
 800823a:	42a0      	cmp	r0, r4
 800823c:	d10b      	bne.n	8008256 <_free_r+0x6e>
 800823e:	6820      	ldr	r0, [r4, #0]
 8008240:	1809      	adds	r1, r1, r0
 8008242:	1850      	adds	r0, r2, r1
 8008244:	6011      	str	r1, [r2, #0]
 8008246:	4283      	cmp	r3, r0
 8008248:	d1e0      	bne.n	800820c <_free_r+0x24>
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	1841      	adds	r1, r0, r1
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	6053      	str	r3, [r2, #4]
 8008254:	e7da      	b.n	800820c <_free_r+0x24>
 8008256:	42a0      	cmp	r0, r4
 8008258:	d902      	bls.n	8008260 <_free_r+0x78>
 800825a:	230c      	movs	r3, #12
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	e7d5      	b.n	800820c <_free_r+0x24>
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	1821      	adds	r1, r4, r0
 8008264:	428b      	cmp	r3, r1
 8008266:	d103      	bne.n	8008270 <_free_r+0x88>
 8008268:	6819      	ldr	r1, [r3, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	1809      	adds	r1, r1, r0
 800826e:	6021      	str	r1, [r4, #0]
 8008270:	6063      	str	r3, [r4, #4]
 8008272:	6054      	str	r4, [r2, #4]
 8008274:	e7ca      	b.n	800820c <_free_r+0x24>
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	2000043c 	.word	0x2000043c

0800827c <_malloc_usable_size_r>:
 800827c:	1f0b      	subs	r3, r1, #4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	1f18      	subs	r0, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	da01      	bge.n	800828a <_malloc_usable_size_r+0xe>
 8008286:	580b      	ldr	r3, [r1, r0]
 8008288:	18c0      	adds	r0, r0, r3
 800828a:	4770      	bx	lr

0800828c <__ssputs_r>:
 800828c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800828e:	b085      	sub	sp, #20
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	9203      	str	r2, [sp, #12]
 8008294:	688e      	ldr	r6, [r1, #8]
 8008296:	9a01      	ldr	r2, [sp, #4]
 8008298:	0007      	movs	r7, r0
 800829a:	000c      	movs	r4, r1
 800829c:	680b      	ldr	r3, [r1, #0]
 800829e:	4296      	cmp	r6, r2
 80082a0:	d831      	bhi.n	8008306 <__ssputs_r+0x7a>
 80082a2:	898a      	ldrh	r2, [r1, #12]
 80082a4:	2190      	movs	r1, #144	; 0x90
 80082a6:	00c9      	lsls	r1, r1, #3
 80082a8:	420a      	tst	r2, r1
 80082aa:	d029      	beq.n	8008300 <__ssputs_r+0x74>
 80082ac:	2003      	movs	r0, #3
 80082ae:	6921      	ldr	r1, [r4, #16]
 80082b0:	1a5b      	subs	r3, r3, r1
 80082b2:	9302      	str	r3, [sp, #8]
 80082b4:	6963      	ldr	r3, [r4, #20]
 80082b6:	4343      	muls	r3, r0
 80082b8:	0fdd      	lsrs	r5, r3, #31
 80082ba:	18ed      	adds	r5, r5, r3
 80082bc:	9b01      	ldr	r3, [sp, #4]
 80082be:	9802      	ldr	r0, [sp, #8]
 80082c0:	3301      	adds	r3, #1
 80082c2:	181b      	adds	r3, r3, r0
 80082c4:	106d      	asrs	r5, r5, #1
 80082c6:	42ab      	cmp	r3, r5
 80082c8:	d900      	bls.n	80082cc <__ssputs_r+0x40>
 80082ca:	001d      	movs	r5, r3
 80082cc:	0552      	lsls	r2, r2, #21
 80082ce:	d529      	bpl.n	8008324 <__ssputs_r+0x98>
 80082d0:	0029      	movs	r1, r5
 80082d2:	0038      	movs	r0, r7
 80082d4:	f7ff fb98 	bl	8007a08 <_malloc_r>
 80082d8:	1e06      	subs	r6, r0, #0
 80082da:	d02d      	beq.n	8008338 <__ssputs_r+0xac>
 80082dc:	9a02      	ldr	r2, [sp, #8]
 80082de:	6921      	ldr	r1, [r4, #16]
 80082e0:	f7ff ff79 	bl	80081d6 <memcpy>
 80082e4:	89a2      	ldrh	r2, [r4, #12]
 80082e6:	4b19      	ldr	r3, [pc, #100]	; (800834c <__ssputs_r+0xc0>)
 80082e8:	401a      	ands	r2, r3
 80082ea:	2380      	movs	r3, #128	; 0x80
 80082ec:	4313      	orrs	r3, r2
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	9b02      	ldr	r3, [sp, #8]
 80082f2:	6126      	str	r6, [r4, #16]
 80082f4:	18f6      	adds	r6, r6, r3
 80082f6:	6026      	str	r6, [r4, #0]
 80082f8:	6165      	str	r5, [r4, #20]
 80082fa:	9e01      	ldr	r6, [sp, #4]
 80082fc:	1aed      	subs	r5, r5, r3
 80082fe:	60a5      	str	r5, [r4, #8]
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	429e      	cmp	r6, r3
 8008304:	d900      	bls.n	8008308 <__ssputs_r+0x7c>
 8008306:	9e01      	ldr	r6, [sp, #4]
 8008308:	0032      	movs	r2, r6
 800830a:	9903      	ldr	r1, [sp, #12]
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	f001 f8a1 	bl	8009454 <memmove>
 8008312:	2000      	movs	r0, #0
 8008314:	68a3      	ldr	r3, [r4, #8]
 8008316:	1b9b      	subs	r3, r3, r6
 8008318:	60a3      	str	r3, [r4, #8]
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	199b      	adds	r3, r3, r6
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	b005      	add	sp, #20
 8008322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008324:	002a      	movs	r2, r5
 8008326:	0038      	movs	r0, r7
 8008328:	f7ff fc0a 	bl	8007b40 <_realloc_r>
 800832c:	1e06      	subs	r6, r0, #0
 800832e:	d1df      	bne.n	80082f0 <__ssputs_r+0x64>
 8008330:	0038      	movs	r0, r7
 8008332:	6921      	ldr	r1, [r4, #16]
 8008334:	f7ff ff58 	bl	80081e8 <_free_r>
 8008338:	230c      	movs	r3, #12
 800833a:	2001      	movs	r0, #1
 800833c:	603b      	str	r3, [r7, #0]
 800833e:	89a2      	ldrh	r2, [r4, #12]
 8008340:	3334      	adds	r3, #52	; 0x34
 8008342:	4313      	orrs	r3, r2
 8008344:	81a3      	strh	r3, [r4, #12]
 8008346:	4240      	negs	r0, r0
 8008348:	e7ea      	b.n	8008320 <__ssputs_r+0x94>
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	fffffb7f 	.word	0xfffffb7f

08008350 <_svfiprintf_r>:
 8008350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008352:	b0a1      	sub	sp, #132	; 0x84
 8008354:	9003      	str	r0, [sp, #12]
 8008356:	001d      	movs	r5, r3
 8008358:	898b      	ldrh	r3, [r1, #12]
 800835a:	000f      	movs	r7, r1
 800835c:	0016      	movs	r6, r2
 800835e:	061b      	lsls	r3, r3, #24
 8008360:	d511      	bpl.n	8008386 <_svfiprintf_r+0x36>
 8008362:	690b      	ldr	r3, [r1, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10e      	bne.n	8008386 <_svfiprintf_r+0x36>
 8008368:	2140      	movs	r1, #64	; 0x40
 800836a:	f7ff fb4d 	bl	8007a08 <_malloc_r>
 800836e:	6038      	str	r0, [r7, #0]
 8008370:	6138      	str	r0, [r7, #16]
 8008372:	2800      	cmp	r0, #0
 8008374:	d105      	bne.n	8008382 <_svfiprintf_r+0x32>
 8008376:	230c      	movs	r3, #12
 8008378:	9a03      	ldr	r2, [sp, #12]
 800837a:	3801      	subs	r0, #1
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	b021      	add	sp, #132	; 0x84
 8008380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008382:	2340      	movs	r3, #64	; 0x40
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	2300      	movs	r3, #0
 8008388:	ac08      	add	r4, sp, #32
 800838a:	6163      	str	r3, [r4, #20]
 800838c:	3320      	adds	r3, #32
 800838e:	7663      	strb	r3, [r4, #25]
 8008390:	3310      	adds	r3, #16
 8008392:	76a3      	strb	r3, [r4, #26]
 8008394:	9507      	str	r5, [sp, #28]
 8008396:	0035      	movs	r5, r6
 8008398:	782b      	ldrb	r3, [r5, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <_svfiprintf_r+0x52>
 800839e:	2b25      	cmp	r3, #37	; 0x25
 80083a0:	d148      	bne.n	8008434 <_svfiprintf_r+0xe4>
 80083a2:	1bab      	subs	r3, r5, r6
 80083a4:	9305      	str	r3, [sp, #20]
 80083a6:	42b5      	cmp	r5, r6
 80083a8:	d00b      	beq.n	80083c2 <_svfiprintf_r+0x72>
 80083aa:	0032      	movs	r2, r6
 80083ac:	0039      	movs	r1, r7
 80083ae:	9803      	ldr	r0, [sp, #12]
 80083b0:	f7ff ff6c 	bl	800828c <__ssputs_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d100      	bne.n	80083ba <_svfiprintf_r+0x6a>
 80083b8:	e0af      	b.n	800851a <_svfiprintf_r+0x1ca>
 80083ba:	6963      	ldr	r3, [r4, #20]
 80083bc:	9a05      	ldr	r2, [sp, #20]
 80083be:	189b      	adds	r3, r3, r2
 80083c0:	6163      	str	r3, [r4, #20]
 80083c2:	782b      	ldrb	r3, [r5, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d100      	bne.n	80083ca <_svfiprintf_r+0x7a>
 80083c8:	e0a7      	b.n	800851a <_svfiprintf_r+0x1ca>
 80083ca:	2201      	movs	r2, #1
 80083cc:	2300      	movs	r3, #0
 80083ce:	4252      	negs	r2, r2
 80083d0:	6062      	str	r2, [r4, #4]
 80083d2:	a904      	add	r1, sp, #16
 80083d4:	3254      	adds	r2, #84	; 0x54
 80083d6:	1852      	adds	r2, r2, r1
 80083d8:	1c6e      	adds	r6, r5, #1
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	60e3      	str	r3, [r4, #12]
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	7013      	strb	r3, [r2, #0]
 80083e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80083e4:	4b55      	ldr	r3, [pc, #340]	; (800853c <_svfiprintf_r+0x1ec>)
 80083e6:	2205      	movs	r2, #5
 80083e8:	0018      	movs	r0, r3
 80083ea:	7831      	ldrb	r1, [r6, #0]
 80083ec:	9305      	str	r3, [sp, #20]
 80083ee:	f001 f869 	bl	80094c4 <memchr>
 80083f2:	1c75      	adds	r5, r6, #1
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d11f      	bne.n	8008438 <_svfiprintf_r+0xe8>
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	06d3      	lsls	r3, r2, #27
 80083fc:	d504      	bpl.n	8008408 <_svfiprintf_r+0xb8>
 80083fe:	2353      	movs	r3, #83	; 0x53
 8008400:	a904      	add	r1, sp, #16
 8008402:	185b      	adds	r3, r3, r1
 8008404:	2120      	movs	r1, #32
 8008406:	7019      	strb	r1, [r3, #0]
 8008408:	0713      	lsls	r3, r2, #28
 800840a:	d504      	bpl.n	8008416 <_svfiprintf_r+0xc6>
 800840c:	2353      	movs	r3, #83	; 0x53
 800840e:	a904      	add	r1, sp, #16
 8008410:	185b      	adds	r3, r3, r1
 8008412:	212b      	movs	r1, #43	; 0x2b
 8008414:	7019      	strb	r1, [r3, #0]
 8008416:	7833      	ldrb	r3, [r6, #0]
 8008418:	2b2a      	cmp	r3, #42	; 0x2a
 800841a:	d016      	beq.n	800844a <_svfiprintf_r+0xfa>
 800841c:	0035      	movs	r5, r6
 800841e:	2100      	movs	r1, #0
 8008420:	200a      	movs	r0, #10
 8008422:	68e3      	ldr	r3, [r4, #12]
 8008424:	782a      	ldrb	r2, [r5, #0]
 8008426:	1c6e      	adds	r6, r5, #1
 8008428:	3a30      	subs	r2, #48	; 0x30
 800842a:	2a09      	cmp	r2, #9
 800842c:	d94e      	bls.n	80084cc <_svfiprintf_r+0x17c>
 800842e:	2900      	cmp	r1, #0
 8008430:	d111      	bne.n	8008456 <_svfiprintf_r+0x106>
 8008432:	e017      	b.n	8008464 <_svfiprintf_r+0x114>
 8008434:	3501      	adds	r5, #1
 8008436:	e7af      	b.n	8008398 <_svfiprintf_r+0x48>
 8008438:	9b05      	ldr	r3, [sp, #20]
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	1ac0      	subs	r0, r0, r3
 800843e:	2301      	movs	r3, #1
 8008440:	4083      	lsls	r3, r0
 8008442:	4313      	orrs	r3, r2
 8008444:	002e      	movs	r6, r5
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	e7cc      	b.n	80083e4 <_svfiprintf_r+0x94>
 800844a:	9b07      	ldr	r3, [sp, #28]
 800844c:	1d19      	adds	r1, r3, #4
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	9107      	str	r1, [sp, #28]
 8008452:	2b00      	cmp	r3, #0
 8008454:	db01      	blt.n	800845a <_svfiprintf_r+0x10a>
 8008456:	930b      	str	r3, [sp, #44]	; 0x2c
 8008458:	e004      	b.n	8008464 <_svfiprintf_r+0x114>
 800845a:	425b      	negs	r3, r3
 800845c:	60e3      	str	r3, [r4, #12]
 800845e:	2302      	movs	r3, #2
 8008460:	4313      	orrs	r3, r2
 8008462:	6023      	str	r3, [r4, #0]
 8008464:	782b      	ldrb	r3, [r5, #0]
 8008466:	2b2e      	cmp	r3, #46	; 0x2e
 8008468:	d10a      	bne.n	8008480 <_svfiprintf_r+0x130>
 800846a:	786b      	ldrb	r3, [r5, #1]
 800846c:	2b2a      	cmp	r3, #42	; 0x2a
 800846e:	d135      	bne.n	80084dc <_svfiprintf_r+0x18c>
 8008470:	9b07      	ldr	r3, [sp, #28]
 8008472:	3502      	adds	r5, #2
 8008474:	1d1a      	adds	r2, r3, #4
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	9207      	str	r2, [sp, #28]
 800847a:	2b00      	cmp	r3, #0
 800847c:	db2b      	blt.n	80084d6 <_svfiprintf_r+0x186>
 800847e:	9309      	str	r3, [sp, #36]	; 0x24
 8008480:	4e2f      	ldr	r6, [pc, #188]	; (8008540 <_svfiprintf_r+0x1f0>)
 8008482:	2203      	movs	r2, #3
 8008484:	0030      	movs	r0, r6
 8008486:	7829      	ldrb	r1, [r5, #0]
 8008488:	f001 f81c 	bl	80094c4 <memchr>
 800848c:	2800      	cmp	r0, #0
 800848e:	d006      	beq.n	800849e <_svfiprintf_r+0x14e>
 8008490:	2340      	movs	r3, #64	; 0x40
 8008492:	1b80      	subs	r0, r0, r6
 8008494:	4083      	lsls	r3, r0
 8008496:	6822      	ldr	r2, [r4, #0]
 8008498:	3501      	adds	r5, #1
 800849a:	4313      	orrs	r3, r2
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	7829      	ldrb	r1, [r5, #0]
 80084a0:	2206      	movs	r2, #6
 80084a2:	4828      	ldr	r0, [pc, #160]	; (8008544 <_svfiprintf_r+0x1f4>)
 80084a4:	1c6e      	adds	r6, r5, #1
 80084a6:	7621      	strb	r1, [r4, #24]
 80084a8:	f001 f80c 	bl	80094c4 <memchr>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d03c      	beq.n	800852a <_svfiprintf_r+0x1da>
 80084b0:	4b25      	ldr	r3, [pc, #148]	; (8008548 <_svfiprintf_r+0x1f8>)
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d125      	bne.n	8008502 <_svfiprintf_r+0x1b2>
 80084b6:	2207      	movs	r2, #7
 80084b8:	9b07      	ldr	r3, [sp, #28]
 80084ba:	3307      	adds	r3, #7
 80084bc:	4393      	bics	r3, r2
 80084be:	3308      	adds	r3, #8
 80084c0:	9307      	str	r3, [sp, #28]
 80084c2:	6963      	ldr	r3, [r4, #20]
 80084c4:	9a04      	ldr	r2, [sp, #16]
 80084c6:	189b      	adds	r3, r3, r2
 80084c8:	6163      	str	r3, [r4, #20]
 80084ca:	e764      	b.n	8008396 <_svfiprintf_r+0x46>
 80084cc:	4343      	muls	r3, r0
 80084ce:	0035      	movs	r5, r6
 80084d0:	2101      	movs	r1, #1
 80084d2:	189b      	adds	r3, r3, r2
 80084d4:	e7a6      	b.n	8008424 <_svfiprintf_r+0xd4>
 80084d6:	2301      	movs	r3, #1
 80084d8:	425b      	negs	r3, r3
 80084da:	e7d0      	b.n	800847e <_svfiprintf_r+0x12e>
 80084dc:	2300      	movs	r3, #0
 80084de:	200a      	movs	r0, #10
 80084e0:	001a      	movs	r2, r3
 80084e2:	3501      	adds	r5, #1
 80084e4:	6063      	str	r3, [r4, #4]
 80084e6:	7829      	ldrb	r1, [r5, #0]
 80084e8:	1c6e      	adds	r6, r5, #1
 80084ea:	3930      	subs	r1, #48	; 0x30
 80084ec:	2909      	cmp	r1, #9
 80084ee:	d903      	bls.n	80084f8 <_svfiprintf_r+0x1a8>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0c5      	beq.n	8008480 <_svfiprintf_r+0x130>
 80084f4:	9209      	str	r2, [sp, #36]	; 0x24
 80084f6:	e7c3      	b.n	8008480 <_svfiprintf_r+0x130>
 80084f8:	4342      	muls	r2, r0
 80084fa:	0035      	movs	r5, r6
 80084fc:	2301      	movs	r3, #1
 80084fe:	1852      	adds	r2, r2, r1
 8008500:	e7f1      	b.n	80084e6 <_svfiprintf_r+0x196>
 8008502:	aa07      	add	r2, sp, #28
 8008504:	9200      	str	r2, [sp, #0]
 8008506:	0021      	movs	r1, r4
 8008508:	003a      	movs	r2, r7
 800850a:	4b10      	ldr	r3, [pc, #64]	; (800854c <_svfiprintf_r+0x1fc>)
 800850c:	9803      	ldr	r0, [sp, #12]
 800850e:	e000      	b.n	8008512 <_svfiprintf_r+0x1c2>
 8008510:	bf00      	nop
 8008512:	9004      	str	r0, [sp, #16]
 8008514:	9b04      	ldr	r3, [sp, #16]
 8008516:	3301      	adds	r3, #1
 8008518:	d1d3      	bne.n	80084c2 <_svfiprintf_r+0x172>
 800851a:	89bb      	ldrh	r3, [r7, #12]
 800851c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800851e:	065b      	lsls	r3, r3, #25
 8008520:	d400      	bmi.n	8008524 <_svfiprintf_r+0x1d4>
 8008522:	e72c      	b.n	800837e <_svfiprintf_r+0x2e>
 8008524:	2001      	movs	r0, #1
 8008526:	4240      	negs	r0, r0
 8008528:	e729      	b.n	800837e <_svfiprintf_r+0x2e>
 800852a:	aa07      	add	r2, sp, #28
 800852c:	9200      	str	r2, [sp, #0]
 800852e:	0021      	movs	r1, r4
 8008530:	003a      	movs	r2, r7
 8008532:	4b06      	ldr	r3, [pc, #24]	; (800854c <_svfiprintf_r+0x1fc>)
 8008534:	9803      	ldr	r0, [sp, #12]
 8008536:	f000 fb85 	bl	8008c44 <_printf_i>
 800853a:	e7ea      	b.n	8008512 <_svfiprintf_r+0x1c2>
 800853c:	0800a621 	.word	0x0800a621
 8008540:	0800a627 	.word	0x0800a627
 8008544:	0800a62b 	.word	0x0800a62b
 8008548:	00000000 	.word	0x00000000
 800854c:	0800828d 	.word	0x0800828d

08008550 <_sungetc_r>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	0014      	movs	r4, r2
 8008554:	1c4b      	adds	r3, r1, #1
 8008556:	d103      	bne.n	8008560 <_sungetc_r+0x10>
 8008558:	2501      	movs	r5, #1
 800855a:	426d      	negs	r5, r5
 800855c:	0028      	movs	r0, r5
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	8993      	ldrh	r3, [r2, #12]
 8008562:	2220      	movs	r2, #32
 8008564:	4393      	bics	r3, r2
 8008566:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008568:	81a3      	strh	r3, [r4, #12]
 800856a:	b2ce      	uxtb	r6, r1
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	b2cd      	uxtb	r5, r1
 8008570:	2a00      	cmp	r2, #0
 8008572:	d010      	beq.n	8008596 <_sungetc_r+0x46>
 8008574:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008576:	429a      	cmp	r2, r3
 8008578:	dd07      	ble.n	800858a <_sungetc_r+0x3a>
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	3b01      	subs	r3, #1
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	701e      	strb	r6, [r3, #0]
 8008582:	6863      	ldr	r3, [r4, #4]
 8008584:	3301      	adds	r3, #1
 8008586:	6063      	str	r3, [r4, #4]
 8008588:	e7e8      	b.n	800855c <_sungetc_r+0xc>
 800858a:	0021      	movs	r1, r4
 800858c:	f000 ff24 	bl	80093d8 <__submore>
 8008590:	2800      	cmp	r0, #0
 8008592:	d0f2      	beq.n	800857a <_sungetc_r+0x2a>
 8008594:	e7e0      	b.n	8008558 <_sungetc_r+0x8>
 8008596:	6921      	ldr	r1, [r4, #16]
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	2900      	cmp	r1, #0
 800859c:	d007      	beq.n	80085ae <_sungetc_r+0x5e>
 800859e:	4291      	cmp	r1, r2
 80085a0:	d205      	bcs.n	80085ae <_sungetc_r+0x5e>
 80085a2:	1e51      	subs	r1, r2, #1
 80085a4:	7808      	ldrb	r0, [r1, #0]
 80085a6:	42a8      	cmp	r0, r5
 80085a8:	d101      	bne.n	80085ae <_sungetc_r+0x5e>
 80085aa:	6021      	str	r1, [r4, #0]
 80085ac:	e7ea      	b.n	8008584 <_sungetc_r+0x34>
 80085ae:	6423      	str	r3, [r4, #64]	; 0x40
 80085b0:	0023      	movs	r3, r4
 80085b2:	3344      	adds	r3, #68	; 0x44
 80085b4:	6363      	str	r3, [r4, #52]	; 0x34
 80085b6:	2303      	movs	r3, #3
 80085b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80085ba:	0023      	movs	r3, r4
 80085bc:	3346      	adds	r3, #70	; 0x46
 80085be:	63e2      	str	r2, [r4, #60]	; 0x3c
 80085c0:	701e      	strb	r6, [r3, #0]
 80085c2:	6023      	str	r3, [r4, #0]
 80085c4:	2301      	movs	r3, #1
 80085c6:	e7de      	b.n	8008586 <_sungetc_r+0x36>

080085c8 <__ssrefill_r>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	000c      	movs	r4, r1
 80085cc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80085ce:	2900      	cmp	r1, #0
 80085d0:	d00e      	beq.n	80085f0 <__ssrefill_r+0x28>
 80085d2:	0023      	movs	r3, r4
 80085d4:	3344      	adds	r3, #68	; 0x44
 80085d6:	4299      	cmp	r1, r3
 80085d8:	d001      	beq.n	80085de <__ssrefill_r+0x16>
 80085da:	f7ff fe05 	bl	80081e8 <_free_r>
 80085de:	2000      	movs	r0, #0
 80085e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085e2:	6360      	str	r0, [r4, #52]	; 0x34
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	4283      	cmp	r3, r0
 80085e8:	d002      	beq.n	80085f0 <__ssrefill_r+0x28>
 80085ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd10      	pop	{r4, pc}
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	2001      	movs	r0, #1
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	2300      	movs	r3, #0
 80085f8:	89a2      	ldrh	r2, [r4, #12]
 80085fa:	6063      	str	r3, [r4, #4]
 80085fc:	3320      	adds	r3, #32
 80085fe:	4313      	orrs	r3, r2
 8008600:	81a3      	strh	r3, [r4, #12]
 8008602:	4240      	negs	r0, r0
 8008604:	e7f3      	b.n	80085ee <__ssrefill_r+0x26>
	...

08008608 <__ssvfiscanf_r>:
 8008608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800860a:	4cae      	ldr	r4, [pc, #696]	; (80088c4 <__ssvfiscanf_r+0x2bc>)
 800860c:	0006      	movs	r6, r0
 800860e:	44a5      	add	sp, r4
 8008610:	000c      	movs	r4, r1
 8008612:	2100      	movs	r1, #0
 8008614:	20be      	movs	r0, #190	; 0xbe
 8008616:	9146      	str	r1, [sp, #280]	; 0x118
 8008618:	9147      	str	r1, [sp, #284]	; 0x11c
 800861a:	a903      	add	r1, sp, #12
 800861c:	9148      	str	r1, [sp, #288]	; 0x120
 800861e:	49aa      	ldr	r1, [pc, #680]	; (80088c8 <__ssvfiscanf_r+0x2c0>)
 8008620:	0040      	lsls	r0, r0, #1
 8008622:	ad43      	add	r5, sp, #268	; 0x10c
 8008624:	5029      	str	r1, [r5, r0]
 8008626:	25c0      	movs	r5, #192	; 0xc0
 8008628:	49a8      	ldr	r1, [pc, #672]	; (80088cc <__ssvfiscanf_r+0x2c4>)
 800862a:	006d      	lsls	r5, r5, #1
 800862c:	a843      	add	r0, sp, #268	; 0x10c
 800862e:	5141      	str	r1, [r0, r5]
 8008630:	9302      	str	r3, [sp, #8]
 8008632:	7815      	ldrb	r5, [r2, #0]
 8008634:	2d00      	cmp	r5, #0
 8008636:	d100      	bne.n	800863a <__ssvfiscanf_r+0x32>
 8008638:	e141      	b.n	80088be <__ssvfiscanf_r+0x2b6>
 800863a:	4ba5      	ldr	r3, [pc, #660]	; (80088d0 <__ssvfiscanf_r+0x2c8>)
 800863c:	2008      	movs	r0, #8
 800863e:	5d59      	ldrb	r1, [r3, r5]
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	2308      	movs	r3, #8
 8008644:	1c57      	adds	r7, r2, #1
 8008646:	400b      	ands	r3, r1
 8008648:	4201      	tst	r1, r0
 800864a:	d01e      	beq.n	800868a <__ssvfiscanf_r+0x82>
 800864c:	6863      	ldr	r3, [r4, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dd11      	ble.n	8008676 <__ssvfiscanf_r+0x6e>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	9900      	ldr	r1, [sp, #0]
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	5c8a      	ldrb	r2, [r1, r2]
 800865a:	2108      	movs	r1, #8
 800865c:	420a      	tst	r2, r1
 800865e:	d101      	bne.n	8008664 <__ssvfiscanf_r+0x5c>
 8008660:	003a      	movs	r2, r7
 8008662:	e7e6      	b.n	8008632 <__ssvfiscanf_r+0x2a>
 8008664:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8008666:	3301      	adds	r3, #1
 8008668:	3201      	adds	r2, #1
 800866a:	9247      	str	r2, [sp, #284]	; 0x11c
 800866c:	6862      	ldr	r2, [r4, #4]
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	3a01      	subs	r2, #1
 8008672:	6062      	str	r2, [r4, #4]
 8008674:	e7ea      	b.n	800864c <__ssvfiscanf_r+0x44>
 8008676:	22c0      	movs	r2, #192	; 0xc0
 8008678:	ab43      	add	r3, sp, #268	; 0x10c
 800867a:	0052      	lsls	r2, r2, #1
 800867c:	0021      	movs	r1, r4
 800867e:	0030      	movs	r0, r6
 8008680:	589b      	ldr	r3, [r3, r2]
 8008682:	4798      	blx	r3
 8008684:	2800      	cmp	r0, #0
 8008686:	d0e4      	beq.n	8008652 <__ssvfiscanf_r+0x4a>
 8008688:	e7ea      	b.n	8008660 <__ssvfiscanf_r+0x58>
 800868a:	2d25      	cmp	r5, #37	; 0x25
 800868c:	d162      	bne.n	8008754 <__ssvfiscanf_r+0x14c>
 800868e:	9345      	str	r3, [sp, #276]	; 0x114
 8008690:	9343      	str	r3, [sp, #268]	; 0x10c
 8008692:	7853      	ldrb	r3, [r2, #1]
 8008694:	2b2a      	cmp	r3, #42	; 0x2a
 8008696:	d102      	bne.n	800869e <__ssvfiscanf_r+0x96>
 8008698:	3b1a      	subs	r3, #26
 800869a:	9343      	str	r3, [sp, #268]	; 0x10c
 800869c:	1c97      	adds	r7, r2, #2
 800869e:	003d      	movs	r5, r7
 80086a0:	220a      	movs	r2, #10
 80086a2:	7829      	ldrb	r1, [r5, #0]
 80086a4:	1c6b      	adds	r3, r5, #1
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	000b      	movs	r3, r1
 80086aa:	3b30      	subs	r3, #48	; 0x30
 80086ac:	2b09      	cmp	r3, #9
 80086ae:	d91e      	bls.n	80086ee <__ssvfiscanf_r+0xe6>
 80086b0:	4f88      	ldr	r7, [pc, #544]	; (80088d4 <__ssvfiscanf_r+0x2cc>)
 80086b2:	2203      	movs	r2, #3
 80086b4:	0038      	movs	r0, r7
 80086b6:	f000 ff05 	bl	80094c4 <memchr>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	d006      	beq.n	80086cc <__ssvfiscanf_r+0xc4>
 80086be:	2301      	movs	r3, #1
 80086c0:	1bc0      	subs	r0, r0, r7
 80086c2:	4083      	lsls	r3, r0
 80086c4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80086c6:	9d01      	ldr	r5, [sp, #4]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	9343      	str	r3, [sp, #268]	; 0x10c
 80086cc:	1c6f      	adds	r7, r5, #1
 80086ce:	782d      	ldrb	r5, [r5, #0]
 80086d0:	2d78      	cmp	r5, #120	; 0x78
 80086d2:	d807      	bhi.n	80086e4 <__ssvfiscanf_r+0xdc>
 80086d4:	2d57      	cmp	r5, #87	; 0x57
 80086d6:	d811      	bhi.n	80086fc <__ssvfiscanf_r+0xf4>
 80086d8:	2d25      	cmp	r5, #37	; 0x25
 80086da:	d03b      	beq.n	8008754 <__ssvfiscanf_r+0x14c>
 80086dc:	d835      	bhi.n	800874a <__ssvfiscanf_r+0x142>
 80086de:	2d00      	cmp	r5, #0
 80086e0:	d100      	bne.n	80086e4 <__ssvfiscanf_r+0xdc>
 80086e2:	e0e9      	b.n	80088b8 <__ssvfiscanf_r+0x2b0>
 80086e4:	2303      	movs	r3, #3
 80086e6:	9349      	str	r3, [sp, #292]	; 0x124
 80086e8:	3307      	adds	r3, #7
 80086ea:	9344      	str	r3, [sp, #272]	; 0x110
 80086ec:	e06d      	b.n	80087ca <__ssvfiscanf_r+0x1c2>
 80086ee:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80086f0:	9d01      	ldr	r5, [sp, #4]
 80086f2:	4353      	muls	r3, r2
 80086f4:	3b30      	subs	r3, #48	; 0x30
 80086f6:	185b      	adds	r3, r3, r1
 80086f8:	9345      	str	r3, [sp, #276]	; 0x114
 80086fa:	e7d2      	b.n	80086a2 <__ssvfiscanf_r+0x9a>
 80086fc:	0028      	movs	r0, r5
 80086fe:	3858      	subs	r0, #88	; 0x58
 8008700:	2820      	cmp	r0, #32
 8008702:	d8ef      	bhi.n	80086e4 <__ssvfiscanf_r+0xdc>
 8008704:	f7f7 fd08 	bl	8000118 <__gnu_thumb1_case_shi>
 8008708:	ffee004d 	.word	0xffee004d
 800870c:	007fffee 	.word	0x007fffee
 8008710:	ffeeffee 	.word	0xffeeffee
 8008714:	ffeeffee 	.word	0xffeeffee
 8008718:	ffeeffee 	.word	0xffeeffee
 800871c:	008affee 	.word	0x008affee
 8008720:	0024007d 	.word	0x0024007d
 8008724:	00240024 	.word	0x00240024
 8008728:	0059ffee 	.word	0x0059ffee
 800872c:	ffeeffee 	.word	0xffeeffee
 8008730:	ffeeffee 	.word	0xffeeffee
 8008734:	005d0092 	.word	0x005d0092
 8008738:	ffee0049 	.word	0xffee0049
 800873c:	0090ffee 	.word	0x0090ffee
 8008740:	007dffee 	.word	0x007dffee
 8008744:	ffeeffee 	.word	0xffeeffee
 8008748:	004d      	.short	0x004d
 800874a:	3d45      	subs	r5, #69	; 0x45
 800874c:	2d02      	cmp	r5, #2
 800874e:	d8c9      	bhi.n	80086e4 <__ssvfiscanf_r+0xdc>
 8008750:	2305      	movs	r3, #5
 8008752:	e039      	b.n	80087c8 <__ssvfiscanf_r+0x1c0>
 8008754:	6863      	ldr	r3, [r4, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	dd0d      	ble.n	8008776 <__ssvfiscanf_r+0x16e>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	781a      	ldrb	r2, [r3, #0]
 800875e:	42aa      	cmp	r2, r5
 8008760:	d000      	beq.n	8008764 <__ssvfiscanf_r+0x15c>
 8008762:	e0ac      	b.n	80088be <__ssvfiscanf_r+0x2b6>
 8008764:	3301      	adds	r3, #1
 8008766:	6862      	ldr	r2, [r4, #4]
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800876c:	3a01      	subs	r2, #1
 800876e:	3301      	adds	r3, #1
 8008770:	6062      	str	r2, [r4, #4]
 8008772:	9347      	str	r3, [sp, #284]	; 0x11c
 8008774:	e774      	b.n	8008660 <__ssvfiscanf_r+0x58>
 8008776:	22c0      	movs	r2, #192	; 0xc0
 8008778:	ab43      	add	r3, sp, #268	; 0x10c
 800877a:	0052      	lsls	r2, r2, #1
 800877c:	0021      	movs	r1, r4
 800877e:	0030      	movs	r0, r6
 8008780:	589b      	ldr	r3, [r3, r2]
 8008782:	4798      	blx	r3
 8008784:	2800      	cmp	r0, #0
 8008786:	d0e8      	beq.n	800875a <__ssvfiscanf_r+0x152>
 8008788:	9846      	ldr	r0, [sp, #280]	; 0x118
 800878a:	2800      	cmp	r0, #0
 800878c:	d000      	beq.n	8008790 <__ssvfiscanf_r+0x188>
 800878e:	e08f      	b.n	80088b0 <__ssvfiscanf_r+0x2a8>
 8008790:	3801      	subs	r0, #1
 8008792:	23a5      	movs	r3, #165	; 0xa5
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	449d      	add	sp, r3
 8008798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800879a:	2320      	movs	r3, #32
 800879c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800879e:	4313      	orrs	r3, r2
 80087a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80087a2:	2380      	movs	r3, #128	; 0x80
 80087a4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4313      	orrs	r3, r2
 80087aa:	9343      	str	r3, [sp, #268]	; 0x10c
 80087ac:	2310      	movs	r3, #16
 80087ae:	9344      	str	r3, [sp, #272]	; 0x110
 80087b0:	236e      	movs	r3, #110	; 0x6e
 80087b2:	42ab      	cmp	r3, r5
 80087b4:	419b      	sbcs	r3, r3
 80087b6:	425b      	negs	r3, r3
 80087b8:	e001      	b.n	80087be <__ssvfiscanf_r+0x1b6>
 80087ba:	2300      	movs	r3, #0
 80087bc:	9344      	str	r3, [sp, #272]	; 0x110
 80087be:	3303      	adds	r3, #3
 80087c0:	e002      	b.n	80087c8 <__ssvfiscanf_r+0x1c0>
 80087c2:	2308      	movs	r3, #8
 80087c4:	9344      	str	r3, [sp, #272]	; 0x110
 80087c6:	3b04      	subs	r3, #4
 80087c8:	9349      	str	r3, [sp, #292]	; 0x124
 80087ca:	6863      	ldr	r3, [r4, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd3c      	ble.n	800884a <__ssvfiscanf_r+0x242>
 80087d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80087d2:	065b      	lsls	r3, r3, #25
 80087d4:	d406      	bmi.n	80087e4 <__ssvfiscanf_r+0x1dc>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	9900      	ldr	r1, [sp, #0]
 80087da:	781a      	ldrb	r2, [r3, #0]
 80087dc:	5c8a      	ldrb	r2, [r1, r2]
 80087de:	2108      	movs	r1, #8
 80087e0:	420a      	tst	r2, r1
 80087e2:	d13c      	bne.n	800885e <__ssvfiscanf_r+0x256>
 80087e4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	dc4e      	bgt.n	8008888 <__ssvfiscanf_r+0x280>
 80087ea:	0022      	movs	r2, r4
 80087ec:	0030      	movs	r0, r6
 80087ee:	ab02      	add	r3, sp, #8
 80087f0:	a943      	add	r1, sp, #268	; 0x10c
 80087f2:	f000 fb37 	bl	8008e64 <_scanf_chars>
 80087f6:	2801      	cmp	r0, #1
 80087f8:	d061      	beq.n	80088be <__ssvfiscanf_r+0x2b6>
 80087fa:	2802      	cmp	r0, #2
 80087fc:	d000      	beq.n	8008800 <__ssvfiscanf_r+0x1f8>
 80087fe:	e72f      	b.n	8008660 <__ssvfiscanf_r+0x58>
 8008800:	e7c2      	b.n	8008788 <__ssvfiscanf_r+0x180>
 8008802:	230a      	movs	r3, #10
 8008804:	e7d3      	b.n	80087ae <__ssvfiscanf_r+0x1a6>
 8008806:	0039      	movs	r1, r7
 8008808:	a803      	add	r0, sp, #12
 800880a:	f000 fda9 	bl	8009360 <__sccl>
 800880e:	2340      	movs	r3, #64	; 0x40
 8008810:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008812:	0007      	movs	r7, r0
 8008814:	4313      	orrs	r3, r2
 8008816:	9343      	str	r3, [sp, #268]	; 0x10c
 8008818:	2301      	movs	r3, #1
 800881a:	e7d5      	b.n	80087c8 <__ssvfiscanf_r+0x1c0>
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008820:	4313      	orrs	r3, r2
 8008822:	9343      	str	r3, [sp, #268]	; 0x10c
 8008824:	2300      	movs	r3, #0
 8008826:	e7cf      	b.n	80087c8 <__ssvfiscanf_r+0x1c0>
 8008828:	2302      	movs	r3, #2
 800882a:	e7cd      	b.n	80087c8 <__ssvfiscanf_r+0x1c0>
 800882c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800882e:	06d3      	lsls	r3, r2, #27
 8008830:	d500      	bpl.n	8008834 <__ssvfiscanf_r+0x22c>
 8008832:	e715      	b.n	8008660 <__ssvfiscanf_r+0x58>
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8008838:	1d18      	adds	r0, r3, #4
 800883a:	9002      	str	r0, [sp, #8]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	07d5      	lsls	r5, r2, #31
 8008840:	d501      	bpl.n	8008846 <__ssvfiscanf_r+0x23e>
 8008842:	8019      	strh	r1, [r3, #0]
 8008844:	e70c      	b.n	8008660 <__ssvfiscanf_r+0x58>
 8008846:	6019      	str	r1, [r3, #0]
 8008848:	e70a      	b.n	8008660 <__ssvfiscanf_r+0x58>
 800884a:	22c0      	movs	r2, #192	; 0xc0
 800884c:	ab43      	add	r3, sp, #268	; 0x10c
 800884e:	0052      	lsls	r2, r2, #1
 8008850:	0021      	movs	r1, r4
 8008852:	0030      	movs	r0, r6
 8008854:	589b      	ldr	r3, [r3, r2]
 8008856:	4798      	blx	r3
 8008858:	2800      	cmp	r0, #0
 800885a:	d0b9      	beq.n	80087d0 <__ssvfiscanf_r+0x1c8>
 800885c:	e794      	b.n	8008788 <__ssvfiscanf_r+0x180>
 800885e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8008860:	3201      	adds	r2, #1
 8008862:	9247      	str	r2, [sp, #284]	; 0x11c
 8008864:	6862      	ldr	r2, [r4, #4]
 8008866:	3a01      	subs	r2, #1
 8008868:	6062      	str	r2, [r4, #4]
 800886a:	2a00      	cmp	r2, #0
 800886c:	dd02      	ble.n	8008874 <__ssvfiscanf_r+0x26c>
 800886e:	3301      	adds	r3, #1
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	e7b0      	b.n	80087d6 <__ssvfiscanf_r+0x1ce>
 8008874:	22c0      	movs	r2, #192	; 0xc0
 8008876:	ab43      	add	r3, sp, #268	; 0x10c
 8008878:	0052      	lsls	r2, r2, #1
 800887a:	0021      	movs	r1, r4
 800887c:	0030      	movs	r0, r6
 800887e:	589b      	ldr	r3, [r3, r2]
 8008880:	4798      	blx	r3
 8008882:	2800      	cmp	r0, #0
 8008884:	d0a7      	beq.n	80087d6 <__ssvfiscanf_r+0x1ce>
 8008886:	e77f      	b.n	8008788 <__ssvfiscanf_r+0x180>
 8008888:	2b04      	cmp	r3, #4
 800888a:	dc06      	bgt.n	800889a <__ssvfiscanf_r+0x292>
 800888c:	0022      	movs	r2, r4
 800888e:	0030      	movs	r0, r6
 8008890:	ab02      	add	r3, sp, #8
 8008892:	a943      	add	r1, sp, #268	; 0x10c
 8008894:	f000 fb44 	bl	8008f20 <_scanf_i>
 8008898:	e7ad      	b.n	80087f6 <__ssvfiscanf_r+0x1ee>
 800889a:	4b0f      	ldr	r3, [pc, #60]	; (80088d8 <__ssvfiscanf_r+0x2d0>)
 800889c:	2b00      	cmp	r3, #0
 800889e:	d100      	bne.n	80088a2 <__ssvfiscanf_r+0x29a>
 80088a0:	e6de      	b.n	8008660 <__ssvfiscanf_r+0x58>
 80088a2:	0022      	movs	r2, r4
 80088a4:	0030      	movs	r0, r6
 80088a6:	ab02      	add	r3, sp, #8
 80088a8:	a943      	add	r1, sp, #268	; 0x10c
 80088aa:	e000      	b.n	80088ae <__ssvfiscanf_r+0x2a6>
 80088ac:	bf00      	nop
 80088ae:	e7a2      	b.n	80087f6 <__ssvfiscanf_r+0x1ee>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	065b      	lsls	r3, r3, #25
 80088b4:	d400      	bmi.n	80088b8 <__ssvfiscanf_r+0x2b0>
 80088b6:	e76c      	b.n	8008792 <__ssvfiscanf_r+0x18a>
 80088b8:	2001      	movs	r0, #1
 80088ba:	4240      	negs	r0, r0
 80088bc:	e769      	b.n	8008792 <__ssvfiscanf_r+0x18a>
 80088be:	9846      	ldr	r0, [sp, #280]	; 0x118
 80088c0:	e767      	b.n	8008792 <__ssvfiscanf_r+0x18a>
 80088c2:	46c0      	nop			; (mov r8, r8)
 80088c4:	fffffd6c 	.word	0xfffffd6c
 80088c8:	08008551 	.word	0x08008551
 80088cc:	080085c9 	.word	0x080085c9
 80088d0:	0800a521 	.word	0x0800a521
 80088d4:	0800a627 	.word	0x0800a627
 80088d8:	00000000 	.word	0x00000000

080088dc <__sfputc_r>:
 80088dc:	6893      	ldr	r3, [r2, #8]
 80088de:	b510      	push	{r4, lr}
 80088e0:	3b01      	subs	r3, #1
 80088e2:	6093      	str	r3, [r2, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	da04      	bge.n	80088f2 <__sfputc_r+0x16>
 80088e8:	6994      	ldr	r4, [r2, #24]
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	db07      	blt.n	80088fe <__sfputc_r+0x22>
 80088ee:	290a      	cmp	r1, #10
 80088f0:	d005      	beq.n	80088fe <__sfputc_r+0x22>
 80088f2:	6813      	ldr	r3, [r2, #0]
 80088f4:	1c58      	adds	r0, r3, #1
 80088f6:	6010      	str	r0, [r2, #0]
 80088f8:	7019      	strb	r1, [r3, #0]
 80088fa:	0008      	movs	r0, r1
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	f7ff fb19 	bl	8007f34 <__swbuf_r>
 8008902:	0001      	movs	r1, r0
 8008904:	e7f9      	b.n	80088fa <__sfputc_r+0x1e>

08008906 <__sfputs_r>:
 8008906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008908:	0006      	movs	r6, r0
 800890a:	000f      	movs	r7, r1
 800890c:	0014      	movs	r4, r2
 800890e:	18d5      	adds	r5, r2, r3
 8008910:	42ac      	cmp	r4, r5
 8008912:	d101      	bne.n	8008918 <__sfputs_r+0x12>
 8008914:	2000      	movs	r0, #0
 8008916:	e007      	b.n	8008928 <__sfputs_r+0x22>
 8008918:	7821      	ldrb	r1, [r4, #0]
 800891a:	003a      	movs	r2, r7
 800891c:	0030      	movs	r0, r6
 800891e:	f7ff ffdd 	bl	80088dc <__sfputc_r>
 8008922:	3401      	adds	r4, #1
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d1f3      	bne.n	8008910 <__sfputs_r+0xa>
 8008928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800892c <_vfiprintf_r>:
 800892c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800892e:	b0a1      	sub	sp, #132	; 0x84
 8008930:	000f      	movs	r7, r1
 8008932:	0015      	movs	r5, r2
 8008934:	001e      	movs	r6, r3
 8008936:	9003      	str	r0, [sp, #12]
 8008938:	2800      	cmp	r0, #0
 800893a:	d004      	beq.n	8008946 <_vfiprintf_r+0x1a>
 800893c:	6a03      	ldr	r3, [r0, #32]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <_vfiprintf_r+0x1a>
 8008942:	f7ff f9bd 	bl	8007cc0 <__sinit>
 8008946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008948:	07db      	lsls	r3, r3, #31
 800894a:	d405      	bmi.n	8008958 <_vfiprintf_r+0x2c>
 800894c:	89bb      	ldrh	r3, [r7, #12]
 800894e:	059b      	lsls	r3, r3, #22
 8008950:	d402      	bmi.n	8008958 <_vfiprintf_r+0x2c>
 8008952:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008954:	f7ff fc3d 	bl	80081d2 <__retarget_lock_acquire_recursive>
 8008958:	89bb      	ldrh	r3, [r7, #12]
 800895a:	071b      	lsls	r3, r3, #28
 800895c:	d502      	bpl.n	8008964 <_vfiprintf_r+0x38>
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d113      	bne.n	800898c <_vfiprintf_r+0x60>
 8008964:	0039      	movs	r1, r7
 8008966:	9803      	ldr	r0, [sp, #12]
 8008968:	f7ff fb26 	bl	8007fb8 <__swsetup_r>
 800896c:	2800      	cmp	r0, #0
 800896e:	d00d      	beq.n	800898c <_vfiprintf_r+0x60>
 8008970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008972:	07db      	lsls	r3, r3, #31
 8008974:	d503      	bpl.n	800897e <_vfiprintf_r+0x52>
 8008976:	2001      	movs	r0, #1
 8008978:	4240      	negs	r0, r0
 800897a:	b021      	add	sp, #132	; 0x84
 800897c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800897e:	89bb      	ldrh	r3, [r7, #12]
 8008980:	059b      	lsls	r3, r3, #22
 8008982:	d4f8      	bmi.n	8008976 <_vfiprintf_r+0x4a>
 8008984:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008986:	f7ff fc25 	bl	80081d4 <__retarget_lock_release_recursive>
 800898a:	e7f4      	b.n	8008976 <_vfiprintf_r+0x4a>
 800898c:	2300      	movs	r3, #0
 800898e:	ac08      	add	r4, sp, #32
 8008990:	6163      	str	r3, [r4, #20]
 8008992:	3320      	adds	r3, #32
 8008994:	7663      	strb	r3, [r4, #25]
 8008996:	3310      	adds	r3, #16
 8008998:	76a3      	strb	r3, [r4, #26]
 800899a:	9607      	str	r6, [sp, #28]
 800899c:	002e      	movs	r6, r5
 800899e:	7833      	ldrb	r3, [r6, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <_vfiprintf_r+0x7c>
 80089a4:	2b25      	cmp	r3, #37	; 0x25
 80089a6:	d148      	bne.n	8008a3a <_vfiprintf_r+0x10e>
 80089a8:	1b73      	subs	r3, r6, r5
 80089aa:	9305      	str	r3, [sp, #20]
 80089ac:	42ae      	cmp	r6, r5
 80089ae:	d00b      	beq.n	80089c8 <_vfiprintf_r+0x9c>
 80089b0:	002a      	movs	r2, r5
 80089b2:	0039      	movs	r1, r7
 80089b4:	9803      	ldr	r0, [sp, #12]
 80089b6:	f7ff ffa6 	bl	8008906 <__sfputs_r>
 80089ba:	3001      	adds	r0, #1
 80089bc:	d100      	bne.n	80089c0 <_vfiprintf_r+0x94>
 80089be:	e0af      	b.n	8008b20 <_vfiprintf_r+0x1f4>
 80089c0:	6963      	ldr	r3, [r4, #20]
 80089c2:	9a05      	ldr	r2, [sp, #20]
 80089c4:	189b      	adds	r3, r3, r2
 80089c6:	6163      	str	r3, [r4, #20]
 80089c8:	7833      	ldrb	r3, [r6, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d100      	bne.n	80089d0 <_vfiprintf_r+0xa4>
 80089ce:	e0a7      	b.n	8008b20 <_vfiprintf_r+0x1f4>
 80089d0:	2201      	movs	r2, #1
 80089d2:	2300      	movs	r3, #0
 80089d4:	4252      	negs	r2, r2
 80089d6:	6062      	str	r2, [r4, #4]
 80089d8:	a904      	add	r1, sp, #16
 80089da:	3254      	adds	r2, #84	; 0x54
 80089dc:	1852      	adds	r2, r2, r1
 80089de:	1c75      	adds	r5, r6, #1
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	60e3      	str	r3, [r4, #12]
 80089e4:	60a3      	str	r3, [r4, #8]
 80089e6:	7013      	strb	r3, [r2, #0]
 80089e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80089ea:	4b59      	ldr	r3, [pc, #356]	; (8008b50 <_vfiprintf_r+0x224>)
 80089ec:	2205      	movs	r2, #5
 80089ee:	0018      	movs	r0, r3
 80089f0:	7829      	ldrb	r1, [r5, #0]
 80089f2:	9305      	str	r3, [sp, #20]
 80089f4:	f000 fd66 	bl	80094c4 <memchr>
 80089f8:	1c6e      	adds	r6, r5, #1
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d11f      	bne.n	8008a3e <_vfiprintf_r+0x112>
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	06d3      	lsls	r3, r2, #27
 8008a02:	d504      	bpl.n	8008a0e <_vfiprintf_r+0xe2>
 8008a04:	2353      	movs	r3, #83	; 0x53
 8008a06:	a904      	add	r1, sp, #16
 8008a08:	185b      	adds	r3, r3, r1
 8008a0a:	2120      	movs	r1, #32
 8008a0c:	7019      	strb	r1, [r3, #0]
 8008a0e:	0713      	lsls	r3, r2, #28
 8008a10:	d504      	bpl.n	8008a1c <_vfiprintf_r+0xf0>
 8008a12:	2353      	movs	r3, #83	; 0x53
 8008a14:	a904      	add	r1, sp, #16
 8008a16:	185b      	adds	r3, r3, r1
 8008a18:	212b      	movs	r1, #43	; 0x2b
 8008a1a:	7019      	strb	r1, [r3, #0]
 8008a1c:	782b      	ldrb	r3, [r5, #0]
 8008a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a20:	d016      	beq.n	8008a50 <_vfiprintf_r+0x124>
 8008a22:	002e      	movs	r6, r5
 8008a24:	2100      	movs	r1, #0
 8008a26:	200a      	movs	r0, #10
 8008a28:	68e3      	ldr	r3, [r4, #12]
 8008a2a:	7832      	ldrb	r2, [r6, #0]
 8008a2c:	1c75      	adds	r5, r6, #1
 8008a2e:	3a30      	subs	r2, #48	; 0x30
 8008a30:	2a09      	cmp	r2, #9
 8008a32:	d94e      	bls.n	8008ad2 <_vfiprintf_r+0x1a6>
 8008a34:	2900      	cmp	r1, #0
 8008a36:	d111      	bne.n	8008a5c <_vfiprintf_r+0x130>
 8008a38:	e017      	b.n	8008a6a <_vfiprintf_r+0x13e>
 8008a3a:	3601      	adds	r6, #1
 8008a3c:	e7af      	b.n	800899e <_vfiprintf_r+0x72>
 8008a3e:	9b05      	ldr	r3, [sp, #20]
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	1ac0      	subs	r0, r0, r3
 8008a44:	2301      	movs	r3, #1
 8008a46:	4083      	lsls	r3, r0
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	0035      	movs	r5, r6
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	e7cc      	b.n	80089ea <_vfiprintf_r+0xbe>
 8008a50:	9b07      	ldr	r3, [sp, #28]
 8008a52:	1d19      	adds	r1, r3, #4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	9107      	str	r1, [sp, #28]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	db01      	blt.n	8008a60 <_vfiprintf_r+0x134>
 8008a5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a5e:	e004      	b.n	8008a6a <_vfiprintf_r+0x13e>
 8008a60:	425b      	negs	r3, r3
 8008a62:	60e3      	str	r3, [r4, #12]
 8008a64:	2302      	movs	r3, #2
 8008a66:	4313      	orrs	r3, r2
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	7833      	ldrb	r3, [r6, #0]
 8008a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a6e:	d10a      	bne.n	8008a86 <_vfiprintf_r+0x15a>
 8008a70:	7873      	ldrb	r3, [r6, #1]
 8008a72:	2b2a      	cmp	r3, #42	; 0x2a
 8008a74:	d135      	bne.n	8008ae2 <_vfiprintf_r+0x1b6>
 8008a76:	9b07      	ldr	r3, [sp, #28]
 8008a78:	3602      	adds	r6, #2
 8008a7a:	1d1a      	adds	r2, r3, #4
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	9207      	str	r2, [sp, #28]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	db2b      	blt.n	8008adc <_vfiprintf_r+0x1b0>
 8008a84:	9309      	str	r3, [sp, #36]	; 0x24
 8008a86:	4d33      	ldr	r5, [pc, #204]	; (8008b54 <_vfiprintf_r+0x228>)
 8008a88:	2203      	movs	r2, #3
 8008a8a:	0028      	movs	r0, r5
 8008a8c:	7831      	ldrb	r1, [r6, #0]
 8008a8e:	f000 fd19 	bl	80094c4 <memchr>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d006      	beq.n	8008aa4 <_vfiprintf_r+0x178>
 8008a96:	2340      	movs	r3, #64	; 0x40
 8008a98:	1b40      	subs	r0, r0, r5
 8008a9a:	4083      	lsls	r3, r0
 8008a9c:	6822      	ldr	r2, [r4, #0]
 8008a9e:	3601      	adds	r6, #1
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	7831      	ldrb	r1, [r6, #0]
 8008aa6:	2206      	movs	r2, #6
 8008aa8:	482b      	ldr	r0, [pc, #172]	; (8008b58 <_vfiprintf_r+0x22c>)
 8008aaa:	1c75      	adds	r5, r6, #1
 8008aac:	7621      	strb	r1, [r4, #24]
 8008aae:	f000 fd09 	bl	80094c4 <memchr>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d043      	beq.n	8008b3e <_vfiprintf_r+0x212>
 8008ab6:	4b29      	ldr	r3, [pc, #164]	; (8008b5c <_vfiprintf_r+0x230>)
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d125      	bne.n	8008b08 <_vfiprintf_r+0x1dc>
 8008abc:	2207      	movs	r2, #7
 8008abe:	9b07      	ldr	r3, [sp, #28]
 8008ac0:	3307      	adds	r3, #7
 8008ac2:	4393      	bics	r3, r2
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	6963      	ldr	r3, [r4, #20]
 8008aca:	9a04      	ldr	r2, [sp, #16]
 8008acc:	189b      	adds	r3, r3, r2
 8008ace:	6163      	str	r3, [r4, #20]
 8008ad0:	e764      	b.n	800899c <_vfiprintf_r+0x70>
 8008ad2:	4343      	muls	r3, r0
 8008ad4:	002e      	movs	r6, r5
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	189b      	adds	r3, r3, r2
 8008ada:	e7a6      	b.n	8008a2a <_vfiprintf_r+0xfe>
 8008adc:	2301      	movs	r3, #1
 8008ade:	425b      	negs	r3, r3
 8008ae0:	e7d0      	b.n	8008a84 <_vfiprintf_r+0x158>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	200a      	movs	r0, #10
 8008ae6:	001a      	movs	r2, r3
 8008ae8:	3601      	adds	r6, #1
 8008aea:	6063      	str	r3, [r4, #4]
 8008aec:	7831      	ldrb	r1, [r6, #0]
 8008aee:	1c75      	adds	r5, r6, #1
 8008af0:	3930      	subs	r1, #48	; 0x30
 8008af2:	2909      	cmp	r1, #9
 8008af4:	d903      	bls.n	8008afe <_vfiprintf_r+0x1d2>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0c5      	beq.n	8008a86 <_vfiprintf_r+0x15a>
 8008afa:	9209      	str	r2, [sp, #36]	; 0x24
 8008afc:	e7c3      	b.n	8008a86 <_vfiprintf_r+0x15a>
 8008afe:	4342      	muls	r2, r0
 8008b00:	002e      	movs	r6, r5
 8008b02:	2301      	movs	r3, #1
 8008b04:	1852      	adds	r2, r2, r1
 8008b06:	e7f1      	b.n	8008aec <_vfiprintf_r+0x1c0>
 8008b08:	aa07      	add	r2, sp, #28
 8008b0a:	9200      	str	r2, [sp, #0]
 8008b0c:	0021      	movs	r1, r4
 8008b0e:	003a      	movs	r2, r7
 8008b10:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <_vfiprintf_r+0x234>)
 8008b12:	9803      	ldr	r0, [sp, #12]
 8008b14:	e000      	b.n	8008b18 <_vfiprintf_r+0x1ec>
 8008b16:	bf00      	nop
 8008b18:	9004      	str	r0, [sp, #16]
 8008b1a:	9b04      	ldr	r3, [sp, #16]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	d1d3      	bne.n	8008ac8 <_vfiprintf_r+0x19c>
 8008b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b22:	07db      	lsls	r3, r3, #31
 8008b24:	d405      	bmi.n	8008b32 <_vfiprintf_r+0x206>
 8008b26:	89bb      	ldrh	r3, [r7, #12]
 8008b28:	059b      	lsls	r3, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <_vfiprintf_r+0x206>
 8008b2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b2e:	f7ff fb51 	bl	80081d4 <__retarget_lock_release_recursive>
 8008b32:	89bb      	ldrh	r3, [r7, #12]
 8008b34:	065b      	lsls	r3, r3, #25
 8008b36:	d500      	bpl.n	8008b3a <_vfiprintf_r+0x20e>
 8008b38:	e71d      	b.n	8008976 <_vfiprintf_r+0x4a>
 8008b3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008b3c:	e71d      	b.n	800897a <_vfiprintf_r+0x4e>
 8008b3e:	aa07      	add	r2, sp, #28
 8008b40:	9200      	str	r2, [sp, #0]
 8008b42:	0021      	movs	r1, r4
 8008b44:	003a      	movs	r2, r7
 8008b46:	4b06      	ldr	r3, [pc, #24]	; (8008b60 <_vfiprintf_r+0x234>)
 8008b48:	9803      	ldr	r0, [sp, #12]
 8008b4a:	f000 f87b 	bl	8008c44 <_printf_i>
 8008b4e:	e7e3      	b.n	8008b18 <_vfiprintf_r+0x1ec>
 8008b50:	0800a621 	.word	0x0800a621
 8008b54:	0800a627 	.word	0x0800a627
 8008b58:	0800a62b 	.word	0x0800a62b
 8008b5c:	00000000 	.word	0x00000000
 8008b60:	08008907 	.word	0x08008907

08008b64 <_printf_common>:
 8008b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b66:	0016      	movs	r6, r2
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	688a      	ldr	r2, [r1, #8]
 8008b6c:	690b      	ldr	r3, [r1, #16]
 8008b6e:	000c      	movs	r4, r1
 8008b70:	9000      	str	r0, [sp, #0]
 8008b72:	4293      	cmp	r3, r2
 8008b74:	da00      	bge.n	8008b78 <_printf_common+0x14>
 8008b76:	0013      	movs	r3, r2
 8008b78:	0022      	movs	r2, r4
 8008b7a:	6033      	str	r3, [r6, #0]
 8008b7c:	3243      	adds	r2, #67	; 0x43
 8008b7e:	7812      	ldrb	r2, [r2, #0]
 8008b80:	2a00      	cmp	r2, #0
 8008b82:	d001      	beq.n	8008b88 <_printf_common+0x24>
 8008b84:	3301      	adds	r3, #1
 8008b86:	6033      	str	r3, [r6, #0]
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	069b      	lsls	r3, r3, #26
 8008b8c:	d502      	bpl.n	8008b94 <_printf_common+0x30>
 8008b8e:	6833      	ldr	r3, [r6, #0]
 8008b90:	3302      	adds	r3, #2
 8008b92:	6033      	str	r3, [r6, #0]
 8008b94:	6822      	ldr	r2, [r4, #0]
 8008b96:	2306      	movs	r3, #6
 8008b98:	0015      	movs	r5, r2
 8008b9a:	401d      	ands	r5, r3
 8008b9c:	421a      	tst	r2, r3
 8008b9e:	d027      	beq.n	8008bf0 <_printf_common+0x8c>
 8008ba0:	0023      	movs	r3, r4
 8008ba2:	3343      	adds	r3, #67	; 0x43
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	1e5a      	subs	r2, r3, #1
 8008ba8:	4193      	sbcs	r3, r2
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	0692      	lsls	r2, r2, #26
 8008bae:	d430      	bmi.n	8008c12 <_printf_common+0xae>
 8008bb0:	0022      	movs	r2, r4
 8008bb2:	9901      	ldr	r1, [sp, #4]
 8008bb4:	9800      	ldr	r0, [sp, #0]
 8008bb6:	9d08      	ldr	r5, [sp, #32]
 8008bb8:	3243      	adds	r2, #67	; 0x43
 8008bba:	47a8      	blx	r5
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d025      	beq.n	8008c0c <_printf_common+0xa8>
 8008bc0:	2206      	movs	r2, #6
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	2500      	movs	r5, #0
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d105      	bne.n	8008bd8 <_printf_common+0x74>
 8008bcc:	6833      	ldr	r3, [r6, #0]
 8008bce:	68e5      	ldr	r5, [r4, #12]
 8008bd0:	1aed      	subs	r5, r5, r3
 8008bd2:	43eb      	mvns	r3, r5
 8008bd4:	17db      	asrs	r3, r3, #31
 8008bd6:	401d      	ands	r5, r3
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	6922      	ldr	r2, [r4, #16]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	dd01      	ble.n	8008be4 <_printf_common+0x80>
 8008be0:	1a9b      	subs	r3, r3, r2
 8008be2:	18ed      	adds	r5, r5, r3
 8008be4:	2600      	movs	r6, #0
 8008be6:	42b5      	cmp	r5, r6
 8008be8:	d120      	bne.n	8008c2c <_printf_common+0xc8>
 8008bea:	2000      	movs	r0, #0
 8008bec:	e010      	b.n	8008c10 <_printf_common+0xac>
 8008bee:	3501      	adds	r5, #1
 8008bf0:	68e3      	ldr	r3, [r4, #12]
 8008bf2:	6832      	ldr	r2, [r6, #0]
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	42ab      	cmp	r3, r5
 8008bf8:	ddd2      	ble.n	8008ba0 <_printf_common+0x3c>
 8008bfa:	0022      	movs	r2, r4
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	9901      	ldr	r1, [sp, #4]
 8008c00:	9800      	ldr	r0, [sp, #0]
 8008c02:	9f08      	ldr	r7, [sp, #32]
 8008c04:	3219      	adds	r2, #25
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d1f0      	bne.n	8008bee <_printf_common+0x8a>
 8008c0c:	2001      	movs	r0, #1
 8008c0e:	4240      	negs	r0, r0
 8008c10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c12:	2030      	movs	r0, #48	; 0x30
 8008c14:	18e1      	adds	r1, r4, r3
 8008c16:	3143      	adds	r1, #67	; 0x43
 8008c18:	7008      	strb	r0, [r1, #0]
 8008c1a:	0021      	movs	r1, r4
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	3145      	adds	r1, #69	; 0x45
 8008c20:	7809      	ldrb	r1, [r1, #0]
 8008c22:	18a2      	adds	r2, r4, r2
 8008c24:	3243      	adds	r2, #67	; 0x43
 8008c26:	3302      	adds	r3, #2
 8008c28:	7011      	strb	r1, [r2, #0]
 8008c2a:	e7c1      	b.n	8008bb0 <_printf_common+0x4c>
 8008c2c:	0022      	movs	r2, r4
 8008c2e:	2301      	movs	r3, #1
 8008c30:	9901      	ldr	r1, [sp, #4]
 8008c32:	9800      	ldr	r0, [sp, #0]
 8008c34:	9f08      	ldr	r7, [sp, #32]
 8008c36:	321a      	adds	r2, #26
 8008c38:	47b8      	blx	r7
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d0e6      	beq.n	8008c0c <_printf_common+0xa8>
 8008c3e:	3601      	adds	r6, #1
 8008c40:	e7d1      	b.n	8008be6 <_printf_common+0x82>
	...

08008c44 <_printf_i>:
 8008c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c46:	b08b      	sub	sp, #44	; 0x2c
 8008c48:	9206      	str	r2, [sp, #24]
 8008c4a:	000a      	movs	r2, r1
 8008c4c:	3243      	adds	r2, #67	; 0x43
 8008c4e:	9307      	str	r3, [sp, #28]
 8008c50:	9005      	str	r0, [sp, #20]
 8008c52:	9204      	str	r2, [sp, #16]
 8008c54:	7e0a      	ldrb	r2, [r1, #24]
 8008c56:	000c      	movs	r4, r1
 8008c58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c5a:	2a78      	cmp	r2, #120	; 0x78
 8008c5c:	d809      	bhi.n	8008c72 <_printf_i+0x2e>
 8008c5e:	2a62      	cmp	r2, #98	; 0x62
 8008c60:	d80b      	bhi.n	8008c7a <_printf_i+0x36>
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	d100      	bne.n	8008c68 <_printf_i+0x24>
 8008c66:	e0be      	b.n	8008de6 <_printf_i+0x1a2>
 8008c68:	497c      	ldr	r1, [pc, #496]	; (8008e5c <_printf_i+0x218>)
 8008c6a:	9103      	str	r1, [sp, #12]
 8008c6c:	2a58      	cmp	r2, #88	; 0x58
 8008c6e:	d100      	bne.n	8008c72 <_printf_i+0x2e>
 8008c70:	e093      	b.n	8008d9a <_printf_i+0x156>
 8008c72:	0026      	movs	r6, r4
 8008c74:	3642      	adds	r6, #66	; 0x42
 8008c76:	7032      	strb	r2, [r6, #0]
 8008c78:	e022      	b.n	8008cc0 <_printf_i+0x7c>
 8008c7a:	0010      	movs	r0, r2
 8008c7c:	3863      	subs	r0, #99	; 0x63
 8008c7e:	2815      	cmp	r0, #21
 8008c80:	d8f7      	bhi.n	8008c72 <_printf_i+0x2e>
 8008c82:	f7f7 fa49 	bl	8000118 <__gnu_thumb1_case_shi>
 8008c86:	0016      	.short	0x0016
 8008c88:	fff6001f 	.word	0xfff6001f
 8008c8c:	fff6fff6 	.word	0xfff6fff6
 8008c90:	001ffff6 	.word	0x001ffff6
 8008c94:	fff6fff6 	.word	0xfff6fff6
 8008c98:	fff6fff6 	.word	0xfff6fff6
 8008c9c:	003600a3 	.word	0x003600a3
 8008ca0:	fff60083 	.word	0xfff60083
 8008ca4:	00b4fff6 	.word	0x00b4fff6
 8008ca8:	0036fff6 	.word	0x0036fff6
 8008cac:	fff6fff6 	.word	0xfff6fff6
 8008cb0:	0087      	.short	0x0087
 8008cb2:	0026      	movs	r6, r4
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	3642      	adds	r6, #66	; 0x42
 8008cb8:	1d11      	adds	r1, r2, #4
 8008cba:	6019      	str	r1, [r3, #0]
 8008cbc:	6813      	ldr	r3, [r2, #0]
 8008cbe:	7033      	strb	r3, [r6, #0]
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e0a2      	b.n	8008e0a <_printf_i+0x1c6>
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	6809      	ldr	r1, [r1, #0]
 8008cc8:	1d02      	adds	r2, r0, #4
 8008cca:	060d      	lsls	r5, r1, #24
 8008ccc:	d50b      	bpl.n	8008ce6 <_printf_i+0xa2>
 8008cce:	6805      	ldr	r5, [r0, #0]
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	2d00      	cmp	r5, #0
 8008cd4:	da03      	bge.n	8008cde <_printf_i+0x9a>
 8008cd6:	232d      	movs	r3, #45	; 0x2d
 8008cd8:	9a04      	ldr	r2, [sp, #16]
 8008cda:	426d      	negs	r5, r5
 8008cdc:	7013      	strb	r3, [r2, #0]
 8008cde:	4b5f      	ldr	r3, [pc, #380]	; (8008e5c <_printf_i+0x218>)
 8008ce0:	270a      	movs	r7, #10
 8008ce2:	9303      	str	r3, [sp, #12]
 8008ce4:	e01b      	b.n	8008d1e <_printf_i+0xda>
 8008ce6:	6805      	ldr	r5, [r0, #0]
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	0649      	lsls	r1, r1, #25
 8008cec:	d5f1      	bpl.n	8008cd2 <_printf_i+0x8e>
 8008cee:	b22d      	sxth	r5, r5
 8008cf0:	e7ef      	b.n	8008cd2 <_printf_i+0x8e>
 8008cf2:	680d      	ldr	r5, [r1, #0]
 8008cf4:	6819      	ldr	r1, [r3, #0]
 8008cf6:	1d08      	adds	r0, r1, #4
 8008cf8:	6018      	str	r0, [r3, #0]
 8008cfa:	062e      	lsls	r6, r5, #24
 8008cfc:	d501      	bpl.n	8008d02 <_printf_i+0xbe>
 8008cfe:	680d      	ldr	r5, [r1, #0]
 8008d00:	e003      	b.n	8008d0a <_printf_i+0xc6>
 8008d02:	066d      	lsls	r5, r5, #25
 8008d04:	d5fb      	bpl.n	8008cfe <_printf_i+0xba>
 8008d06:	680d      	ldr	r5, [r1, #0]
 8008d08:	b2ad      	uxth	r5, r5
 8008d0a:	4b54      	ldr	r3, [pc, #336]	; (8008e5c <_printf_i+0x218>)
 8008d0c:	2708      	movs	r7, #8
 8008d0e:	9303      	str	r3, [sp, #12]
 8008d10:	2a6f      	cmp	r2, #111	; 0x6f
 8008d12:	d000      	beq.n	8008d16 <_printf_i+0xd2>
 8008d14:	3702      	adds	r7, #2
 8008d16:	0023      	movs	r3, r4
 8008d18:	2200      	movs	r2, #0
 8008d1a:	3343      	adds	r3, #67	; 0x43
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	db03      	blt.n	8008d2e <_printf_i+0xea>
 8008d26:	2104      	movs	r1, #4
 8008d28:	6822      	ldr	r2, [r4, #0]
 8008d2a:	438a      	bics	r2, r1
 8008d2c:	6022      	str	r2, [r4, #0]
 8008d2e:	2d00      	cmp	r5, #0
 8008d30:	d102      	bne.n	8008d38 <_printf_i+0xf4>
 8008d32:	9e04      	ldr	r6, [sp, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00c      	beq.n	8008d52 <_printf_i+0x10e>
 8008d38:	9e04      	ldr	r6, [sp, #16]
 8008d3a:	0028      	movs	r0, r5
 8008d3c:	0039      	movs	r1, r7
 8008d3e:	f7f7 fa7b 	bl	8000238 <__aeabi_uidivmod>
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	3e01      	subs	r6, #1
 8008d46:	5c5b      	ldrb	r3, [r3, r1]
 8008d48:	7033      	strb	r3, [r6, #0]
 8008d4a:	002b      	movs	r3, r5
 8008d4c:	0005      	movs	r5, r0
 8008d4e:	429f      	cmp	r7, r3
 8008d50:	d9f3      	bls.n	8008d3a <_printf_i+0xf6>
 8008d52:	2f08      	cmp	r7, #8
 8008d54:	d109      	bne.n	8008d6a <_printf_i+0x126>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	07db      	lsls	r3, r3, #31
 8008d5a:	d506      	bpl.n	8008d6a <_printf_i+0x126>
 8008d5c:	6862      	ldr	r2, [r4, #4]
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	dc02      	bgt.n	8008d6a <_printf_i+0x126>
 8008d64:	2330      	movs	r3, #48	; 0x30
 8008d66:	3e01      	subs	r6, #1
 8008d68:	7033      	strb	r3, [r6, #0]
 8008d6a:	9b04      	ldr	r3, [sp, #16]
 8008d6c:	1b9b      	subs	r3, r3, r6
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	9b07      	ldr	r3, [sp, #28]
 8008d72:	0021      	movs	r1, r4
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	9805      	ldr	r0, [sp, #20]
 8008d78:	9b06      	ldr	r3, [sp, #24]
 8008d7a:	aa09      	add	r2, sp, #36	; 0x24
 8008d7c:	f7ff fef2 	bl	8008b64 <_printf_common>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d147      	bne.n	8008e14 <_printf_i+0x1d0>
 8008d84:	2001      	movs	r0, #1
 8008d86:	4240      	negs	r0, r0
 8008d88:	b00b      	add	sp, #44	; 0x2c
 8008d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	6809      	ldr	r1, [r1, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	6022      	str	r2, [r4, #0]
 8008d94:	2278      	movs	r2, #120	; 0x78
 8008d96:	4932      	ldr	r1, [pc, #200]	; (8008e60 <_printf_i+0x21c>)
 8008d98:	9103      	str	r1, [sp, #12]
 8008d9a:	0021      	movs	r1, r4
 8008d9c:	3145      	adds	r1, #69	; 0x45
 8008d9e:	700a      	strb	r2, [r1, #0]
 8008da0:	6819      	ldr	r1, [r3, #0]
 8008da2:	6822      	ldr	r2, [r4, #0]
 8008da4:	c920      	ldmia	r1!, {r5}
 8008da6:	0610      	lsls	r0, r2, #24
 8008da8:	d402      	bmi.n	8008db0 <_printf_i+0x16c>
 8008daa:	0650      	lsls	r0, r2, #25
 8008dac:	d500      	bpl.n	8008db0 <_printf_i+0x16c>
 8008dae:	b2ad      	uxth	r5, r5
 8008db0:	6019      	str	r1, [r3, #0]
 8008db2:	07d3      	lsls	r3, r2, #31
 8008db4:	d502      	bpl.n	8008dbc <_printf_i+0x178>
 8008db6:	2320      	movs	r3, #32
 8008db8:	4313      	orrs	r3, r2
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	2710      	movs	r7, #16
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	d1a9      	bne.n	8008d16 <_printf_i+0xd2>
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	4393      	bics	r3, r2
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	e7a4      	b.n	8008d16 <_printf_i+0xd2>
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	680d      	ldr	r5, [r1, #0]
 8008dd0:	1d10      	adds	r0, r2, #4
 8008dd2:	6949      	ldr	r1, [r1, #20]
 8008dd4:	6018      	str	r0, [r3, #0]
 8008dd6:	6813      	ldr	r3, [r2, #0]
 8008dd8:	062e      	lsls	r6, r5, #24
 8008dda:	d501      	bpl.n	8008de0 <_printf_i+0x19c>
 8008ddc:	6019      	str	r1, [r3, #0]
 8008dde:	e002      	b.n	8008de6 <_printf_i+0x1a2>
 8008de0:	066d      	lsls	r5, r5, #25
 8008de2:	d5fb      	bpl.n	8008ddc <_printf_i+0x198>
 8008de4:	8019      	strh	r1, [r3, #0]
 8008de6:	2300      	movs	r3, #0
 8008de8:	9e04      	ldr	r6, [sp, #16]
 8008dea:	6123      	str	r3, [r4, #16]
 8008dec:	e7c0      	b.n	8008d70 <_printf_i+0x12c>
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	1d11      	adds	r1, r2, #4
 8008df2:	6019      	str	r1, [r3, #0]
 8008df4:	6816      	ldr	r6, [r2, #0]
 8008df6:	2100      	movs	r1, #0
 8008df8:	0030      	movs	r0, r6
 8008dfa:	6862      	ldr	r2, [r4, #4]
 8008dfc:	f000 fb62 	bl	80094c4 <memchr>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d001      	beq.n	8008e08 <_printf_i+0x1c4>
 8008e04:	1b80      	subs	r0, r0, r6
 8008e06:	6060      	str	r0, [r4, #4]
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9a04      	ldr	r2, [sp, #16]
 8008e10:	7013      	strb	r3, [r2, #0]
 8008e12:	e7ad      	b.n	8008d70 <_printf_i+0x12c>
 8008e14:	0032      	movs	r2, r6
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	9906      	ldr	r1, [sp, #24]
 8008e1a:	9805      	ldr	r0, [sp, #20]
 8008e1c:	9d07      	ldr	r5, [sp, #28]
 8008e1e:	47a8      	blx	r5
 8008e20:	3001      	adds	r0, #1
 8008e22:	d0af      	beq.n	8008d84 <_printf_i+0x140>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	079b      	lsls	r3, r3, #30
 8008e28:	d415      	bmi.n	8008e56 <_printf_i+0x212>
 8008e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2c:	68e0      	ldr	r0, [r4, #12]
 8008e2e:	4298      	cmp	r0, r3
 8008e30:	daaa      	bge.n	8008d88 <_printf_i+0x144>
 8008e32:	0018      	movs	r0, r3
 8008e34:	e7a8      	b.n	8008d88 <_printf_i+0x144>
 8008e36:	0022      	movs	r2, r4
 8008e38:	2301      	movs	r3, #1
 8008e3a:	9906      	ldr	r1, [sp, #24]
 8008e3c:	9805      	ldr	r0, [sp, #20]
 8008e3e:	9e07      	ldr	r6, [sp, #28]
 8008e40:	3219      	adds	r2, #25
 8008e42:	47b0      	blx	r6
 8008e44:	3001      	adds	r0, #1
 8008e46:	d09d      	beq.n	8008d84 <_printf_i+0x140>
 8008e48:	3501      	adds	r5, #1
 8008e4a:	68e3      	ldr	r3, [r4, #12]
 8008e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e4e:	1a9b      	subs	r3, r3, r2
 8008e50:	42ab      	cmp	r3, r5
 8008e52:	dcf0      	bgt.n	8008e36 <_printf_i+0x1f2>
 8008e54:	e7e9      	b.n	8008e2a <_printf_i+0x1e6>
 8008e56:	2500      	movs	r5, #0
 8008e58:	e7f7      	b.n	8008e4a <_printf_i+0x206>
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	0800a632 	.word	0x0800a632
 8008e60:	0800a643 	.word	0x0800a643

08008e64 <_scanf_chars>:
 8008e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e66:	0015      	movs	r5, r2
 8008e68:	688a      	ldr	r2, [r1, #8]
 8008e6a:	000c      	movs	r4, r1
 8008e6c:	9001      	str	r0, [sp, #4]
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	d105      	bne.n	8008e7e <_scanf_chars+0x1a>
 8008e72:	6989      	ldr	r1, [r1, #24]
 8008e74:	3201      	adds	r2, #1
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d000      	beq.n	8008e7c <_scanf_chars+0x18>
 8008e7a:	3a02      	subs	r2, #2
 8008e7c:	60a2      	str	r2, [r4, #8]
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	06d2      	lsls	r2, r2, #27
 8008e82:	d403      	bmi.n	8008e8c <_scanf_chars+0x28>
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	1d11      	adds	r1, r2, #4
 8008e88:	6019      	str	r1, [r3, #0]
 8008e8a:	6817      	ldr	r7, [r2, #0]
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	69a0      	ldr	r0, [r4, #24]
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d013      	beq.n	8008ebc <_scanf_chars+0x58>
 8008e94:	2801      	cmp	r0, #1
 8008e96:	d108      	bne.n	8008eaa <_scanf_chars+0x46>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	6962      	ldr	r2, [r4, #20]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10b      	bne.n	8008ebc <_scanf_chars+0x58>
 8008ea4:	2e00      	cmp	r6, #0
 8008ea6:	d038      	beq.n	8008f1a <_scanf_chars+0xb6>
 8008ea8:	e026      	b.n	8008ef8 <_scanf_chars+0x94>
 8008eaa:	2802      	cmp	r0, #2
 8008eac:	d124      	bne.n	8008ef8 <_scanf_chars+0x94>
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	4a1a      	ldr	r2, [pc, #104]	; (8008f1c <_scanf_chars+0xb8>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	5cd3      	ldrb	r3, [r2, r3]
 8008eb6:	2208      	movs	r2, #8
 8008eb8:	4213      	tst	r3, r2
 8008eba:	d11d      	bne.n	8008ef8 <_scanf_chars+0x94>
 8008ebc:	2210      	movs	r2, #16
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	3601      	adds	r6, #1
 8008ec2:	4213      	tst	r3, r2
 8008ec4:	d103      	bne.n	8008ece <_scanf_chars+0x6a>
 8008ec6:	682b      	ldr	r3, [r5, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	703b      	strb	r3, [r7, #0]
 8008ecc:	3701      	adds	r7, #1
 8008ece:	682a      	ldr	r2, [r5, #0]
 8008ed0:	686b      	ldr	r3, [r5, #4]
 8008ed2:	3201      	adds	r2, #1
 8008ed4:	602a      	str	r2, [r5, #0]
 8008ed6:	68a2      	ldr	r2, [r4, #8]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	3a01      	subs	r2, #1
 8008edc:	606b      	str	r3, [r5, #4]
 8008ede:	60a2      	str	r2, [r4, #8]
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	d009      	beq.n	8008ef8 <_scanf_chars+0x94>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dcd2      	bgt.n	8008e8e <_scanf_chars+0x2a>
 8008ee8:	23c0      	movs	r3, #192	; 0xc0
 8008eea:	005b      	lsls	r3, r3, #1
 8008eec:	0029      	movs	r1, r5
 8008eee:	58e3      	ldr	r3, [r4, r3]
 8008ef0:	9801      	ldr	r0, [sp, #4]
 8008ef2:	4798      	blx	r3
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d0ca      	beq.n	8008e8e <_scanf_chars+0x2a>
 8008ef8:	6822      	ldr	r2, [r4, #0]
 8008efa:	2310      	movs	r3, #16
 8008efc:	0011      	movs	r1, r2
 8008efe:	4019      	ands	r1, r3
 8008f00:	421a      	tst	r2, r3
 8008f02:	d106      	bne.n	8008f12 <_scanf_chars+0xae>
 8008f04:	68e3      	ldr	r3, [r4, #12]
 8008f06:	3301      	adds	r3, #1
 8008f08:	60e3      	str	r3, [r4, #12]
 8008f0a:	69a3      	ldr	r3, [r4, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d000      	beq.n	8008f12 <_scanf_chars+0xae>
 8008f10:	7039      	strb	r1, [r7, #0]
 8008f12:	2000      	movs	r0, #0
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	199b      	adds	r3, r3, r6
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f1c:	0800a521 	.word	0x0800a521

08008f20 <_scanf_i>:
 8008f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f22:	b08b      	sub	sp, #44	; 0x2c
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	4b7a      	ldr	r3, [pc, #488]	; (8009110 <_scanf_i+0x1f0>)
 8008f28:	0016      	movs	r6, r2
 8008f2a:	9004      	str	r0, [sp, #16]
 8008f2c:	aa07      	add	r2, sp, #28
 8008f2e:	cba1      	ldmia	r3!, {r0, r5, r7}
 8008f30:	c2a1      	stmia	r2!, {r0, r5, r7}
 8008f32:	4a78      	ldr	r2, [pc, #480]	; (8009114 <_scanf_i+0x1f4>)
 8008f34:	698b      	ldr	r3, [r1, #24]
 8008f36:	000c      	movs	r4, r1
 8008f38:	9205      	str	r2, [sp, #20]
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d001      	beq.n	8008f42 <_scanf_i+0x22>
 8008f3e:	4b76      	ldr	r3, [pc, #472]	; (8009118 <_scanf_i+0x1f8>)
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	22ae      	movs	r2, #174	; 0xae
 8008f44:	2000      	movs	r0, #0
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	0052      	lsls	r2, r2, #1
 8008f4a:	1e59      	subs	r1, r3, #1
 8008f4c:	9003      	str	r0, [sp, #12]
 8008f4e:	4291      	cmp	r1, r2
 8008f50:	d905      	bls.n	8008f5e <_scanf_i+0x3e>
 8008f52:	3b5e      	subs	r3, #94	; 0x5e
 8008f54:	3bff      	subs	r3, #255	; 0xff
 8008f56:	9303      	str	r3, [sp, #12]
 8008f58:	235e      	movs	r3, #94	; 0x5e
 8008f5a:	33ff      	adds	r3, #255	; 0xff
 8008f5c:	60a3      	str	r3, [r4, #8]
 8008f5e:	0023      	movs	r3, r4
 8008f60:	331c      	adds	r3, #28
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	23d0      	movs	r3, #208	; 0xd0
 8008f66:	2700      	movs	r7, #0
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	9b00      	ldr	r3, [sp, #0]
 8008f72:	9302      	str	r3, [sp, #8]
 8008f74:	6833      	ldr	r3, [r6, #0]
 8008f76:	a807      	add	r0, sp, #28
 8008f78:	7819      	ldrb	r1, [r3, #0]
 8008f7a:	00bb      	lsls	r3, r7, #2
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	5818      	ldr	r0, [r3, r0]
 8008f80:	f000 faa0 	bl	80094c4 <memchr>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d02a      	beq.n	8008fde <_scanf_i+0xbe>
 8008f88:	2f01      	cmp	r7, #1
 8008f8a:	d161      	bne.n	8009050 <_scanf_i+0x130>
 8008f8c:	6863      	ldr	r3, [r4, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d106      	bne.n	8008fa0 <_scanf_i+0x80>
 8008f92:	3308      	adds	r3, #8
 8008f94:	6822      	ldr	r2, [r4, #0]
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	33f9      	adds	r3, #249	; 0xf9
 8008f9a:	33ff      	adds	r3, #255	; 0xff
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	6023      	str	r3, [r4, #0]
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	4a5e      	ldr	r2, [pc, #376]	; (800911c <_scanf_i+0x1fc>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	68a3      	ldr	r3, [r4, #8]
 8008faa:	1e5a      	subs	r2, r3, #1
 8008fac:	60a2      	str	r2, [r4, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d015      	beq.n	8008fde <_scanf_i+0xbe>
 8008fb2:	6833      	ldr	r3, [r6, #0]
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	6032      	str	r2, [r6, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	9a02      	ldr	r2, [sp, #8]
 8008fbc:	7013      	strb	r3, [r2, #0]
 8008fbe:	6873      	ldr	r3, [r6, #4]
 8008fc0:	1c55      	adds	r5, r2, #1
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	6073      	str	r3, [r6, #4]
 8008fc6:	9502      	str	r5, [sp, #8]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc08      	bgt.n	8008fde <_scanf_i+0xbe>
 8008fcc:	23c0      	movs	r3, #192	; 0xc0
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	0031      	movs	r1, r6
 8008fd2:	58e3      	ldr	r3, [r4, r3]
 8008fd4:	9804      	ldr	r0, [sp, #16]
 8008fd6:	4798      	blx	r3
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d000      	beq.n	8008fde <_scanf_i+0xbe>
 8008fdc:	e080      	b.n	80090e0 <_scanf_i+0x1c0>
 8008fde:	3701      	adds	r7, #1
 8008fe0:	2f03      	cmp	r7, #3
 8008fe2:	d1c7      	bne.n	8008f74 <_scanf_i+0x54>
 8008fe4:	6863      	ldr	r3, [r4, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <_scanf_i+0xce>
 8008fea:	330a      	adds	r3, #10
 8008fec:	6063      	str	r3, [r4, #4]
 8008fee:	2110      	movs	r1, #16
 8008ff0:	2700      	movs	r7, #0
 8008ff2:	6863      	ldr	r3, [r4, #4]
 8008ff4:	6960      	ldr	r0, [r4, #20]
 8008ff6:	1ac9      	subs	r1, r1, r3
 8008ff8:	4b49      	ldr	r3, [pc, #292]	; (8009120 <_scanf_i+0x200>)
 8008ffa:	18c9      	adds	r1, r1, r3
 8008ffc:	f000 f9b0 	bl	8009360 <__sccl>
 8009000:	9d02      	ldr	r5, [sp, #8]
 8009002:	68a3      	ldr	r3, [r4, #8]
 8009004:	6820      	ldr	r0, [r4, #0]
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d040      	beq.n	800908e <_scanf_i+0x16e>
 800900c:	6831      	ldr	r1, [r6, #0]
 800900e:	6963      	ldr	r3, [r4, #20]
 8009010:	780a      	ldrb	r2, [r1, #0]
 8009012:	5c9b      	ldrb	r3, [r3, r2]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d03a      	beq.n	800908e <_scanf_i+0x16e>
 8009018:	2a30      	cmp	r2, #48	; 0x30
 800901a:	d129      	bne.n	8009070 <_scanf_i+0x150>
 800901c:	2380      	movs	r3, #128	; 0x80
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	4218      	tst	r0, r3
 8009022:	d025      	beq.n	8009070 <_scanf_i+0x150>
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	3701      	adds	r7, #1
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <_scanf_i+0x118>
 800902c:	001a      	movs	r2, r3
 800902e:	9b02      	ldr	r3, [sp, #8]
 8009030:	3a01      	subs	r2, #1
 8009032:	3301      	adds	r3, #1
 8009034:	9203      	str	r2, [sp, #12]
 8009036:	60a3      	str	r3, [r4, #8]
 8009038:	6873      	ldr	r3, [r6, #4]
 800903a:	3b01      	subs	r3, #1
 800903c:	6073      	str	r3, [r6, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	dd1d      	ble.n	800907e <_scanf_i+0x15e>
 8009042:	6833      	ldr	r3, [r6, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	6033      	str	r3, [r6, #0]
 8009048:	68a3      	ldr	r3, [r4, #8]
 800904a:	3b01      	subs	r3, #1
 800904c:	60a3      	str	r3, [r4, #8]
 800904e:	e7d8      	b.n	8009002 <_scanf_i+0xe2>
 8009050:	2f02      	cmp	r7, #2
 8009052:	d1a9      	bne.n	8008fa8 <_scanf_i+0x88>
 8009054:	21c0      	movs	r1, #192	; 0xc0
 8009056:	2380      	movs	r3, #128	; 0x80
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	00c9      	lsls	r1, r1, #3
 800905c:	4011      	ands	r1, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4299      	cmp	r1, r3
 8009062:	d1bf      	bne.n	8008fe4 <_scanf_i+0xc4>
 8009064:	3bf1      	subs	r3, #241	; 0xf1
 8009066:	3bff      	subs	r3, #255	; 0xff
 8009068:	6063      	str	r3, [r4, #4]
 800906a:	33f0      	adds	r3, #240	; 0xf0
 800906c:	4313      	orrs	r3, r2
 800906e:	e79a      	b.n	8008fa6 <_scanf_i+0x86>
 8009070:	4b2c      	ldr	r3, [pc, #176]	; (8009124 <_scanf_i+0x204>)
 8009072:	4003      	ands	r3, r0
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	780b      	ldrb	r3, [r1, #0]
 8009078:	702b      	strb	r3, [r5, #0]
 800907a:	3501      	adds	r5, #1
 800907c:	e7dc      	b.n	8009038 <_scanf_i+0x118>
 800907e:	23c0      	movs	r3, #192	; 0xc0
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	0031      	movs	r1, r6
 8009084:	58e3      	ldr	r3, [r4, r3]
 8009086:	9804      	ldr	r0, [sp, #16]
 8009088:	4798      	blx	r3
 800908a:	2800      	cmp	r0, #0
 800908c:	d0dc      	beq.n	8009048 <_scanf_i+0x128>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	05db      	lsls	r3, r3, #23
 8009092:	d50e      	bpl.n	80090b2 <_scanf_i+0x192>
 8009094:	9b00      	ldr	r3, [sp, #0]
 8009096:	429d      	cmp	r5, r3
 8009098:	d907      	bls.n	80090aa <_scanf_i+0x18a>
 800909a:	23be      	movs	r3, #190	; 0xbe
 800909c:	3d01      	subs	r5, #1
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	0032      	movs	r2, r6
 80090a2:	7829      	ldrb	r1, [r5, #0]
 80090a4:	58e3      	ldr	r3, [r4, r3]
 80090a6:	9804      	ldr	r0, [sp, #16]
 80090a8:	4798      	blx	r3
 80090aa:	9b00      	ldr	r3, [sp, #0]
 80090ac:	2001      	movs	r0, #1
 80090ae:	429d      	cmp	r5, r3
 80090b0:	d029      	beq.n	8009106 <_scanf_i+0x1e6>
 80090b2:	6821      	ldr	r1, [r4, #0]
 80090b4:	2310      	movs	r3, #16
 80090b6:	000a      	movs	r2, r1
 80090b8:	401a      	ands	r2, r3
 80090ba:	4219      	tst	r1, r3
 80090bc:	d11c      	bne.n	80090f8 <_scanf_i+0x1d8>
 80090be:	702a      	strb	r2, [r5, #0]
 80090c0:	6863      	ldr	r3, [r4, #4]
 80090c2:	9900      	ldr	r1, [sp, #0]
 80090c4:	9804      	ldr	r0, [sp, #16]
 80090c6:	9e05      	ldr	r6, [sp, #20]
 80090c8:	47b0      	blx	r6
 80090ca:	9b01      	ldr	r3, [sp, #4]
 80090cc:	6822      	ldr	r2, [r4, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	0691      	lsls	r1, r2, #26
 80090d2:	d507      	bpl.n	80090e4 <_scanf_i+0x1c4>
 80090d4:	9901      	ldr	r1, [sp, #4]
 80090d6:	1d1a      	adds	r2, r3, #4
 80090d8:	600a      	str	r2, [r1, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6018      	str	r0, [r3, #0]
 80090de:	e008      	b.n	80090f2 <_scanf_i+0x1d2>
 80090e0:	2700      	movs	r7, #0
 80090e2:	e7d4      	b.n	800908e <_scanf_i+0x16e>
 80090e4:	1d19      	adds	r1, r3, #4
 80090e6:	07d6      	lsls	r6, r2, #31
 80090e8:	d50f      	bpl.n	800910a <_scanf_i+0x1ea>
 80090ea:	9a01      	ldr	r2, [sp, #4]
 80090ec:	6011      	str	r1, [r2, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	8018      	strh	r0, [r3, #0]
 80090f2:	68e3      	ldr	r3, [r4, #12]
 80090f4:	3301      	adds	r3, #1
 80090f6:	60e3      	str	r3, [r4, #12]
 80090f8:	2000      	movs	r0, #0
 80090fa:	9b00      	ldr	r3, [sp, #0]
 80090fc:	1aed      	subs	r5, r5, r3
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	19ed      	adds	r5, r5, r7
 8009102:	195b      	adds	r3, r3, r5
 8009104:	6123      	str	r3, [r4, #16]
 8009106:	b00b      	add	sp, #44	; 0x2c
 8009108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910a:	9a01      	ldr	r2, [sp, #4]
 800910c:	6011      	str	r1, [r2, #0]
 800910e:	e7e4      	b.n	80090da <_scanf_i+0x1ba>
 8009110:	0800a3b4 	.word	0x0800a3b4
 8009114:	080095e9 	.word	0x080095e9
 8009118:	080096f5 	.word	0x080096f5
 800911c:	fffffaff 	.word	0xfffffaff
 8009120:	0800a654 	.word	0x0800a654
 8009124:	fffff6ff 	.word	0xfffff6ff

08009128 <__sflush_r>:
 8009128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800912a:	898b      	ldrh	r3, [r1, #12]
 800912c:	0005      	movs	r5, r0
 800912e:	000c      	movs	r4, r1
 8009130:	071a      	lsls	r2, r3, #28
 8009132:	d45c      	bmi.n	80091ee <__sflush_r+0xc6>
 8009134:	684a      	ldr	r2, [r1, #4]
 8009136:	2a00      	cmp	r2, #0
 8009138:	dc04      	bgt.n	8009144 <__sflush_r+0x1c>
 800913a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800913c:	2a00      	cmp	r2, #0
 800913e:	dc01      	bgt.n	8009144 <__sflush_r+0x1c>
 8009140:	2000      	movs	r0, #0
 8009142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009144:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009146:	2f00      	cmp	r7, #0
 8009148:	d0fa      	beq.n	8009140 <__sflush_r+0x18>
 800914a:	2200      	movs	r2, #0
 800914c:	2080      	movs	r0, #128	; 0x80
 800914e:	682e      	ldr	r6, [r5, #0]
 8009150:	602a      	str	r2, [r5, #0]
 8009152:	001a      	movs	r2, r3
 8009154:	0140      	lsls	r0, r0, #5
 8009156:	6a21      	ldr	r1, [r4, #32]
 8009158:	4002      	ands	r2, r0
 800915a:	4203      	tst	r3, r0
 800915c:	d034      	beq.n	80091c8 <__sflush_r+0xa0>
 800915e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	075b      	lsls	r3, r3, #29
 8009164:	d506      	bpl.n	8009174 <__sflush_r+0x4c>
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	1ac0      	subs	r0, r0, r3
 800916a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <__sflush_r+0x4c>
 8009170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009172:	1ac0      	subs	r0, r0, r3
 8009174:	0002      	movs	r2, r0
 8009176:	2300      	movs	r3, #0
 8009178:	0028      	movs	r0, r5
 800917a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800917c:	6a21      	ldr	r1, [r4, #32]
 800917e:	47b8      	blx	r7
 8009180:	89a2      	ldrh	r2, [r4, #12]
 8009182:	1c43      	adds	r3, r0, #1
 8009184:	d106      	bne.n	8009194 <__sflush_r+0x6c>
 8009186:	6829      	ldr	r1, [r5, #0]
 8009188:	291d      	cmp	r1, #29
 800918a:	d82c      	bhi.n	80091e6 <__sflush_r+0xbe>
 800918c:	4b2a      	ldr	r3, [pc, #168]	; (8009238 <__sflush_r+0x110>)
 800918e:	410b      	asrs	r3, r1
 8009190:	07db      	lsls	r3, r3, #31
 8009192:	d428      	bmi.n	80091e6 <__sflush_r+0xbe>
 8009194:	2300      	movs	r3, #0
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	04d2      	lsls	r2, r2, #19
 800919e:	d505      	bpl.n	80091ac <__sflush_r+0x84>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <__sflush_r+0x82>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d100      	bne.n	80091ac <__sflush_r+0x84>
 80091aa:	6560      	str	r0, [r4, #84]	; 0x54
 80091ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ae:	602e      	str	r6, [r5, #0]
 80091b0:	2900      	cmp	r1, #0
 80091b2:	d0c5      	beq.n	8009140 <__sflush_r+0x18>
 80091b4:	0023      	movs	r3, r4
 80091b6:	3344      	adds	r3, #68	; 0x44
 80091b8:	4299      	cmp	r1, r3
 80091ba:	d002      	beq.n	80091c2 <__sflush_r+0x9a>
 80091bc:	0028      	movs	r0, r5
 80091be:	f7ff f813 	bl	80081e8 <_free_r>
 80091c2:	2000      	movs	r0, #0
 80091c4:	6360      	str	r0, [r4, #52]	; 0x34
 80091c6:	e7bc      	b.n	8009142 <__sflush_r+0x1a>
 80091c8:	2301      	movs	r3, #1
 80091ca:	0028      	movs	r0, r5
 80091cc:	47b8      	blx	r7
 80091ce:	1c43      	adds	r3, r0, #1
 80091d0:	d1c6      	bne.n	8009160 <__sflush_r+0x38>
 80091d2:	682b      	ldr	r3, [r5, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0c3      	beq.n	8009160 <__sflush_r+0x38>
 80091d8:	2b1d      	cmp	r3, #29
 80091da:	d001      	beq.n	80091e0 <__sflush_r+0xb8>
 80091dc:	2b16      	cmp	r3, #22
 80091de:	d101      	bne.n	80091e4 <__sflush_r+0xbc>
 80091e0:	602e      	str	r6, [r5, #0]
 80091e2:	e7ad      	b.n	8009140 <__sflush_r+0x18>
 80091e4:	89a2      	ldrh	r2, [r4, #12]
 80091e6:	2340      	movs	r3, #64	; 0x40
 80091e8:	4313      	orrs	r3, r2
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	e7a9      	b.n	8009142 <__sflush_r+0x1a>
 80091ee:	690e      	ldr	r6, [r1, #16]
 80091f0:	2e00      	cmp	r6, #0
 80091f2:	d0a5      	beq.n	8009140 <__sflush_r+0x18>
 80091f4:	680f      	ldr	r7, [r1, #0]
 80091f6:	600e      	str	r6, [r1, #0]
 80091f8:	1bba      	subs	r2, r7, r6
 80091fa:	9201      	str	r2, [sp, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	079b      	lsls	r3, r3, #30
 8009200:	d100      	bne.n	8009204 <__sflush_r+0xdc>
 8009202:	694a      	ldr	r2, [r1, #20]
 8009204:	60a2      	str	r2, [r4, #8]
 8009206:	9b01      	ldr	r3, [sp, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	dd99      	ble.n	8009140 <__sflush_r+0x18>
 800920c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800920e:	0032      	movs	r2, r6
 8009210:	001f      	movs	r7, r3
 8009212:	0028      	movs	r0, r5
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	6a21      	ldr	r1, [r4, #32]
 8009218:	47b8      	blx	r7
 800921a:	2800      	cmp	r0, #0
 800921c:	dc06      	bgt.n	800922c <__sflush_r+0x104>
 800921e:	2340      	movs	r3, #64	; 0x40
 8009220:	2001      	movs	r0, #1
 8009222:	89a2      	ldrh	r2, [r4, #12]
 8009224:	4240      	negs	r0, r0
 8009226:	4313      	orrs	r3, r2
 8009228:	81a3      	strh	r3, [r4, #12]
 800922a:	e78a      	b.n	8009142 <__sflush_r+0x1a>
 800922c:	9b01      	ldr	r3, [sp, #4]
 800922e:	1836      	adds	r6, r6, r0
 8009230:	1a1b      	subs	r3, r3, r0
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	e7e7      	b.n	8009206 <__sflush_r+0xde>
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	dfbffffe 	.word	0xdfbffffe

0800923c <_fflush_r>:
 800923c:	690b      	ldr	r3, [r1, #16]
 800923e:	b570      	push	{r4, r5, r6, lr}
 8009240:	0005      	movs	r5, r0
 8009242:	000c      	movs	r4, r1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <_fflush_r+0x12>
 8009248:	2500      	movs	r5, #0
 800924a:	0028      	movs	r0, r5
 800924c:	bd70      	pop	{r4, r5, r6, pc}
 800924e:	2800      	cmp	r0, #0
 8009250:	d004      	beq.n	800925c <_fflush_r+0x20>
 8009252:	6a03      	ldr	r3, [r0, #32]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <_fflush_r+0x20>
 8009258:	f7fe fd32 	bl	8007cc0 <__sinit>
 800925c:	220c      	movs	r2, #12
 800925e:	5ea3      	ldrsh	r3, [r4, r2]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d0f1      	beq.n	8009248 <_fflush_r+0xc>
 8009264:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009266:	07d2      	lsls	r2, r2, #31
 8009268:	d404      	bmi.n	8009274 <_fflush_r+0x38>
 800926a:	059b      	lsls	r3, r3, #22
 800926c:	d402      	bmi.n	8009274 <_fflush_r+0x38>
 800926e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009270:	f7fe ffaf 	bl	80081d2 <__retarget_lock_acquire_recursive>
 8009274:	0028      	movs	r0, r5
 8009276:	0021      	movs	r1, r4
 8009278:	f7ff ff56 	bl	8009128 <__sflush_r>
 800927c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800927e:	0005      	movs	r5, r0
 8009280:	07db      	lsls	r3, r3, #31
 8009282:	d4e2      	bmi.n	800924a <_fflush_r+0xe>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	059b      	lsls	r3, r3, #22
 8009288:	d4df      	bmi.n	800924a <_fflush_r+0xe>
 800928a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800928c:	f7fe ffa2 	bl	80081d4 <__retarget_lock_release_recursive>
 8009290:	e7db      	b.n	800924a <_fflush_r+0xe>
	...

08009294 <__swhatbuf_r>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	000e      	movs	r6, r1
 8009298:	001d      	movs	r5, r3
 800929a:	230e      	movs	r3, #14
 800929c:	5ec9      	ldrsh	r1, [r1, r3]
 800929e:	0014      	movs	r4, r2
 80092a0:	b096      	sub	sp, #88	; 0x58
 80092a2:	2900      	cmp	r1, #0
 80092a4:	da0c      	bge.n	80092c0 <__swhatbuf_r+0x2c>
 80092a6:	89b2      	ldrh	r2, [r6, #12]
 80092a8:	2380      	movs	r3, #128	; 0x80
 80092aa:	0011      	movs	r1, r2
 80092ac:	4019      	ands	r1, r3
 80092ae:	421a      	tst	r2, r3
 80092b0:	d013      	beq.n	80092da <__swhatbuf_r+0x46>
 80092b2:	2100      	movs	r1, #0
 80092b4:	3b40      	subs	r3, #64	; 0x40
 80092b6:	2000      	movs	r0, #0
 80092b8:	6029      	str	r1, [r5, #0]
 80092ba:	6023      	str	r3, [r4, #0]
 80092bc:	b016      	add	sp, #88	; 0x58
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	466a      	mov	r2, sp
 80092c2:	f000 f8db 	bl	800947c <_fstat_r>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	dbed      	blt.n	80092a6 <__swhatbuf_r+0x12>
 80092ca:	23f0      	movs	r3, #240	; 0xf0
 80092cc:	9901      	ldr	r1, [sp, #4]
 80092ce:	021b      	lsls	r3, r3, #8
 80092d0:	4019      	ands	r1, r3
 80092d2:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <__swhatbuf_r+0x4c>)
 80092d4:	18c9      	adds	r1, r1, r3
 80092d6:	424b      	negs	r3, r1
 80092d8:	4159      	adcs	r1, r3
 80092da:	2380      	movs	r3, #128	; 0x80
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	e7ea      	b.n	80092b6 <__swhatbuf_r+0x22>
 80092e0:	ffffe000 	.word	0xffffe000

080092e4 <__smakebuf_r>:
 80092e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092e6:	2602      	movs	r6, #2
 80092e8:	898b      	ldrh	r3, [r1, #12]
 80092ea:	0005      	movs	r5, r0
 80092ec:	000c      	movs	r4, r1
 80092ee:	4233      	tst	r3, r6
 80092f0:	d006      	beq.n	8009300 <__smakebuf_r+0x1c>
 80092f2:	0023      	movs	r3, r4
 80092f4:	3347      	adds	r3, #71	; 0x47
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	2301      	movs	r3, #1
 80092fc:	6163      	str	r3, [r4, #20]
 80092fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009300:	466a      	mov	r2, sp
 8009302:	ab01      	add	r3, sp, #4
 8009304:	f7ff ffc6 	bl	8009294 <__swhatbuf_r>
 8009308:	9900      	ldr	r1, [sp, #0]
 800930a:	0007      	movs	r7, r0
 800930c:	0028      	movs	r0, r5
 800930e:	f7fe fb7b 	bl	8007a08 <_malloc_r>
 8009312:	2800      	cmp	r0, #0
 8009314:	d108      	bne.n	8009328 <__smakebuf_r+0x44>
 8009316:	220c      	movs	r2, #12
 8009318:	5ea3      	ldrsh	r3, [r4, r2]
 800931a:	059a      	lsls	r2, r3, #22
 800931c:	d4ef      	bmi.n	80092fe <__smakebuf_r+0x1a>
 800931e:	2203      	movs	r2, #3
 8009320:	4393      	bics	r3, r2
 8009322:	431e      	orrs	r6, r3
 8009324:	81a6      	strh	r6, [r4, #12]
 8009326:	e7e4      	b.n	80092f2 <__smakebuf_r+0xe>
 8009328:	2380      	movs	r3, #128	; 0x80
 800932a:	89a2      	ldrh	r2, [r4, #12]
 800932c:	6020      	str	r0, [r4, #0]
 800932e:	4313      	orrs	r3, r2
 8009330:	81a3      	strh	r3, [r4, #12]
 8009332:	9b00      	ldr	r3, [sp, #0]
 8009334:	6120      	str	r0, [r4, #16]
 8009336:	6163      	str	r3, [r4, #20]
 8009338:	9b01      	ldr	r3, [sp, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00c      	beq.n	8009358 <__smakebuf_r+0x74>
 800933e:	0028      	movs	r0, r5
 8009340:	230e      	movs	r3, #14
 8009342:	5ee1      	ldrsh	r1, [r4, r3]
 8009344:	f000 f8ac 	bl	80094a0 <_isatty_r>
 8009348:	2800      	cmp	r0, #0
 800934a:	d005      	beq.n	8009358 <__smakebuf_r+0x74>
 800934c:	2303      	movs	r3, #3
 800934e:	89a2      	ldrh	r2, [r4, #12]
 8009350:	439a      	bics	r2, r3
 8009352:	3b02      	subs	r3, #2
 8009354:	4313      	orrs	r3, r2
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	433b      	orrs	r3, r7
 800935c:	81a3      	strh	r3, [r4, #12]
 800935e:	e7ce      	b.n	80092fe <__smakebuf_r+0x1a>

08009360 <__sccl>:
 8009360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009362:	780b      	ldrb	r3, [r1, #0]
 8009364:	0004      	movs	r4, r0
 8009366:	2b5e      	cmp	r3, #94	; 0x5e
 8009368:	d019      	beq.n	800939e <__sccl+0x3e>
 800936a:	2200      	movs	r2, #0
 800936c:	1c4d      	adds	r5, r1, #1
 800936e:	0021      	movs	r1, r4
 8009370:	1c60      	adds	r0, r4, #1
 8009372:	30ff      	adds	r0, #255	; 0xff
 8009374:	700a      	strb	r2, [r1, #0]
 8009376:	3101      	adds	r1, #1
 8009378:	4281      	cmp	r1, r0
 800937a:	d1fb      	bne.n	8009374 <__sccl+0x14>
 800937c:	1e68      	subs	r0, r5, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00c      	beq.n	800939c <__sccl+0x3c>
 8009382:	2101      	movs	r1, #1
 8009384:	262d      	movs	r6, #45	; 0x2d
 8009386:	404a      	eors	r2, r1
 8009388:	0028      	movs	r0, r5
 800938a:	54e2      	strb	r2, [r4, r3]
 800938c:	7801      	ldrb	r1, [r0, #0]
 800938e:	1c45      	adds	r5, r0, #1
 8009390:	292d      	cmp	r1, #45	; 0x2d
 8009392:	d00c      	beq.n	80093ae <__sccl+0x4e>
 8009394:	295d      	cmp	r1, #93	; 0x5d
 8009396:	d01d      	beq.n	80093d4 <__sccl+0x74>
 8009398:	2900      	cmp	r1, #0
 800939a:	d104      	bne.n	80093a6 <__sccl+0x46>
 800939c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800939e:	2201      	movs	r2, #1
 80093a0:	784b      	ldrb	r3, [r1, #1]
 80093a2:	1c8d      	adds	r5, r1, #2
 80093a4:	e7e3      	b.n	800936e <__sccl+0xe>
 80093a6:	000b      	movs	r3, r1
 80093a8:	e7ee      	b.n	8009388 <__sccl+0x28>
 80093aa:	0033      	movs	r3, r6
 80093ac:	e7ec      	b.n	8009388 <__sccl+0x28>
 80093ae:	7841      	ldrb	r1, [r0, #1]
 80093b0:	295d      	cmp	r1, #93	; 0x5d
 80093b2:	d0fa      	beq.n	80093aa <__sccl+0x4a>
 80093b4:	428b      	cmp	r3, r1
 80093b6:	dcf8      	bgt.n	80093aa <__sccl+0x4a>
 80093b8:	001d      	movs	r5, r3
 80093ba:	3002      	adds	r0, #2
 80093bc:	3501      	adds	r5, #1
 80093be:	5562      	strb	r2, [r4, r5]
 80093c0:	42a9      	cmp	r1, r5
 80093c2:	dcfb      	bgt.n	80093bc <__sccl+0x5c>
 80093c4:	2500      	movs	r5, #0
 80093c6:	1c5f      	adds	r7, r3, #1
 80093c8:	428b      	cmp	r3, r1
 80093ca:	da01      	bge.n	80093d0 <__sccl+0x70>
 80093cc:	1acd      	subs	r5, r1, r3
 80093ce:	3d01      	subs	r5, #1
 80093d0:	197b      	adds	r3, r7, r5
 80093d2:	e7db      	b.n	800938c <__sccl+0x2c>
 80093d4:	0028      	movs	r0, r5
 80093d6:	e7e1      	b.n	800939c <__sccl+0x3c>

080093d8 <__submore>:
 80093d8:	000b      	movs	r3, r1
 80093da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093dc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80093de:	3344      	adds	r3, #68	; 0x44
 80093e0:	000c      	movs	r4, r1
 80093e2:	429d      	cmp	r5, r3
 80093e4:	d11c      	bne.n	8009420 <__submore+0x48>
 80093e6:	2680      	movs	r6, #128	; 0x80
 80093e8:	00f6      	lsls	r6, r6, #3
 80093ea:	0031      	movs	r1, r6
 80093ec:	f7fe fb0c 	bl	8007a08 <_malloc_r>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d102      	bne.n	80093fa <__submore+0x22>
 80093f4:	2001      	movs	r0, #1
 80093f6:	4240      	negs	r0, r0
 80093f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093fa:	0023      	movs	r3, r4
 80093fc:	6360      	str	r0, [r4, #52]	; 0x34
 80093fe:	63a6      	str	r6, [r4, #56]	; 0x38
 8009400:	3346      	adds	r3, #70	; 0x46
 8009402:	781a      	ldrb	r2, [r3, #0]
 8009404:	4b10      	ldr	r3, [pc, #64]	; (8009448 <__submore+0x70>)
 8009406:	54c2      	strb	r2, [r0, r3]
 8009408:	0023      	movs	r3, r4
 800940a:	3345      	adds	r3, #69	; 0x45
 800940c:	781a      	ldrb	r2, [r3, #0]
 800940e:	4b0f      	ldr	r3, [pc, #60]	; (800944c <__submore+0x74>)
 8009410:	54c2      	strb	r2, [r0, r3]
 8009412:	782a      	ldrb	r2, [r5, #0]
 8009414:	4b0e      	ldr	r3, [pc, #56]	; (8009450 <__submore+0x78>)
 8009416:	54c2      	strb	r2, [r0, r3]
 8009418:	18c0      	adds	r0, r0, r3
 800941a:	6020      	str	r0, [r4, #0]
 800941c:	2000      	movs	r0, #0
 800941e:	e7eb      	b.n	80093f8 <__submore+0x20>
 8009420:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8009422:	0029      	movs	r1, r5
 8009424:	0073      	lsls	r3, r6, #1
 8009426:	001a      	movs	r2, r3
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	f7fe fb89 	bl	8007b40 <_realloc_r>
 800942e:	1e05      	subs	r5, r0, #0
 8009430:	d0e0      	beq.n	80093f4 <__submore+0x1c>
 8009432:	1987      	adds	r7, r0, r6
 8009434:	0001      	movs	r1, r0
 8009436:	0032      	movs	r2, r6
 8009438:	0038      	movs	r0, r7
 800943a:	f7fe fecc 	bl	80081d6 <memcpy>
 800943e:	9b01      	ldr	r3, [sp, #4]
 8009440:	6027      	str	r7, [r4, #0]
 8009442:	6365      	str	r5, [r4, #52]	; 0x34
 8009444:	63a3      	str	r3, [r4, #56]	; 0x38
 8009446:	e7e9      	b.n	800941c <__submore+0x44>
 8009448:	000003ff 	.word	0x000003ff
 800944c:	000003fe 	.word	0x000003fe
 8009450:	000003fd 	.word	0x000003fd

08009454 <memmove>:
 8009454:	b510      	push	{r4, lr}
 8009456:	4288      	cmp	r0, r1
 8009458:	d902      	bls.n	8009460 <memmove+0xc>
 800945a:	188b      	adds	r3, r1, r2
 800945c:	4298      	cmp	r0, r3
 800945e:	d303      	bcc.n	8009468 <memmove+0x14>
 8009460:	2300      	movs	r3, #0
 8009462:	e007      	b.n	8009474 <memmove+0x20>
 8009464:	5c8b      	ldrb	r3, [r1, r2]
 8009466:	5483      	strb	r3, [r0, r2]
 8009468:	3a01      	subs	r2, #1
 800946a:	d2fb      	bcs.n	8009464 <memmove+0x10>
 800946c:	bd10      	pop	{r4, pc}
 800946e:	5ccc      	ldrb	r4, [r1, r3]
 8009470:	54c4      	strb	r4, [r0, r3]
 8009472:	3301      	adds	r3, #1
 8009474:	429a      	cmp	r2, r3
 8009476:	d1fa      	bne.n	800946e <memmove+0x1a>
 8009478:	e7f8      	b.n	800946c <memmove+0x18>
	...

0800947c <_fstat_r>:
 800947c:	2300      	movs	r3, #0
 800947e:	b570      	push	{r4, r5, r6, lr}
 8009480:	4d06      	ldr	r5, [pc, #24]	; (800949c <_fstat_r+0x20>)
 8009482:	0004      	movs	r4, r0
 8009484:	0008      	movs	r0, r1
 8009486:	0011      	movs	r1, r2
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	f7fb f8c4 	bl	8004616 <_fstat>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d103      	bne.n	800949a <_fstat_r+0x1e>
 8009492:	682b      	ldr	r3, [r5, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d000      	beq.n	800949a <_fstat_r+0x1e>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	20000580 	.word	0x20000580

080094a0 <_isatty_r>:
 80094a0:	2300      	movs	r3, #0
 80094a2:	b570      	push	{r4, r5, r6, lr}
 80094a4:	4d06      	ldr	r5, [pc, #24]	; (80094c0 <_isatty_r+0x20>)
 80094a6:	0004      	movs	r4, r0
 80094a8:	0008      	movs	r0, r1
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	f7fb f8c1 	bl	8004632 <_isatty>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d103      	bne.n	80094bc <_isatty_r+0x1c>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d000      	beq.n	80094bc <_isatty_r+0x1c>
 80094ba:	6023      	str	r3, [r4, #0]
 80094bc:	bd70      	pop	{r4, r5, r6, pc}
 80094be:	46c0      	nop			; (mov r8, r8)
 80094c0:	20000580 	.word	0x20000580

080094c4 <memchr>:
 80094c4:	b2c9      	uxtb	r1, r1
 80094c6:	1882      	adds	r2, r0, r2
 80094c8:	4290      	cmp	r0, r2
 80094ca:	d101      	bne.n	80094d0 <memchr+0xc>
 80094cc:	2000      	movs	r0, #0
 80094ce:	4770      	bx	lr
 80094d0:	7803      	ldrb	r3, [r0, #0]
 80094d2:	428b      	cmp	r3, r1
 80094d4:	d0fb      	beq.n	80094ce <memchr+0xa>
 80094d6:	3001      	adds	r0, #1
 80094d8:	e7f6      	b.n	80094c8 <memchr+0x4>
	...

080094dc <_strtol_l.constprop.0>:
 80094dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094de:	b087      	sub	sp, #28
 80094e0:	001e      	movs	r6, r3
 80094e2:	9005      	str	r0, [sp, #20]
 80094e4:	9101      	str	r1, [sp, #4]
 80094e6:	9202      	str	r2, [sp, #8]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d048      	beq.n	800957e <_strtol_l.constprop.0+0xa2>
 80094ec:	000b      	movs	r3, r1
 80094ee:	2e24      	cmp	r6, #36	; 0x24
 80094f0:	d845      	bhi.n	800957e <_strtol_l.constprop.0+0xa2>
 80094f2:	4a3b      	ldr	r2, [pc, #236]	; (80095e0 <_strtol_l.constprop.0+0x104>)
 80094f4:	2108      	movs	r1, #8
 80094f6:	4694      	mov	ip, r2
 80094f8:	001a      	movs	r2, r3
 80094fa:	4660      	mov	r0, ip
 80094fc:	7814      	ldrb	r4, [r2, #0]
 80094fe:	3301      	adds	r3, #1
 8009500:	5d00      	ldrb	r0, [r0, r4]
 8009502:	001d      	movs	r5, r3
 8009504:	0007      	movs	r7, r0
 8009506:	400f      	ands	r7, r1
 8009508:	4208      	tst	r0, r1
 800950a:	d1f5      	bne.n	80094f8 <_strtol_l.constprop.0+0x1c>
 800950c:	2c2d      	cmp	r4, #45	; 0x2d
 800950e:	d13d      	bne.n	800958c <_strtol_l.constprop.0+0xb0>
 8009510:	2701      	movs	r7, #1
 8009512:	781c      	ldrb	r4, [r3, #0]
 8009514:	1c95      	adds	r5, r2, #2
 8009516:	2e00      	cmp	r6, #0
 8009518:	d05e      	beq.n	80095d8 <_strtol_l.constprop.0+0xfc>
 800951a:	2e10      	cmp	r6, #16
 800951c:	d109      	bne.n	8009532 <_strtol_l.constprop.0+0x56>
 800951e:	2c30      	cmp	r4, #48	; 0x30
 8009520:	d107      	bne.n	8009532 <_strtol_l.constprop.0+0x56>
 8009522:	2220      	movs	r2, #32
 8009524:	782b      	ldrb	r3, [r5, #0]
 8009526:	4393      	bics	r3, r2
 8009528:	2b58      	cmp	r3, #88	; 0x58
 800952a:	d150      	bne.n	80095ce <_strtol_l.constprop.0+0xf2>
 800952c:	2610      	movs	r6, #16
 800952e:	786c      	ldrb	r4, [r5, #1]
 8009530:	3502      	adds	r5, #2
 8009532:	4b2c      	ldr	r3, [pc, #176]	; (80095e4 <_strtol_l.constprop.0+0x108>)
 8009534:	0031      	movs	r1, r6
 8009536:	18fb      	adds	r3, r7, r3
 8009538:	0018      	movs	r0, r3
 800953a:	9303      	str	r3, [sp, #12]
 800953c:	f7f6 fe7c 	bl	8000238 <__aeabi_uidivmod>
 8009540:	2200      	movs	r2, #0
 8009542:	9104      	str	r1, [sp, #16]
 8009544:	2101      	movs	r1, #1
 8009546:	4684      	mov	ip, r0
 8009548:	0010      	movs	r0, r2
 800954a:	4249      	negs	r1, r1
 800954c:	0023      	movs	r3, r4
 800954e:	3b30      	subs	r3, #48	; 0x30
 8009550:	2b09      	cmp	r3, #9
 8009552:	d903      	bls.n	800955c <_strtol_l.constprop.0+0x80>
 8009554:	3b11      	subs	r3, #17
 8009556:	2b19      	cmp	r3, #25
 8009558:	d81d      	bhi.n	8009596 <_strtol_l.constprop.0+0xba>
 800955a:	330a      	adds	r3, #10
 800955c:	429e      	cmp	r6, r3
 800955e:	dd1e      	ble.n	800959e <_strtol_l.constprop.0+0xc2>
 8009560:	1c54      	adds	r4, r2, #1
 8009562:	d009      	beq.n	8009578 <_strtol_l.constprop.0+0x9c>
 8009564:	000a      	movs	r2, r1
 8009566:	4584      	cmp	ip, r0
 8009568:	d306      	bcc.n	8009578 <_strtol_l.constprop.0+0x9c>
 800956a:	d102      	bne.n	8009572 <_strtol_l.constprop.0+0x96>
 800956c:	9c04      	ldr	r4, [sp, #16]
 800956e:	429c      	cmp	r4, r3
 8009570:	db02      	blt.n	8009578 <_strtol_l.constprop.0+0x9c>
 8009572:	2201      	movs	r2, #1
 8009574:	4370      	muls	r0, r6
 8009576:	1818      	adds	r0, r3, r0
 8009578:	782c      	ldrb	r4, [r5, #0]
 800957a:	3501      	adds	r5, #1
 800957c:	e7e6      	b.n	800954c <_strtol_l.constprop.0+0x70>
 800957e:	f7fe fdfd 	bl	800817c <__errno>
 8009582:	2316      	movs	r3, #22
 8009584:	6003      	str	r3, [r0, #0]
 8009586:	2000      	movs	r0, #0
 8009588:	b007      	add	sp, #28
 800958a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800958c:	2c2b      	cmp	r4, #43	; 0x2b
 800958e:	d1c2      	bne.n	8009516 <_strtol_l.constprop.0+0x3a>
 8009590:	781c      	ldrb	r4, [r3, #0]
 8009592:	1c95      	adds	r5, r2, #2
 8009594:	e7bf      	b.n	8009516 <_strtol_l.constprop.0+0x3a>
 8009596:	0023      	movs	r3, r4
 8009598:	3b61      	subs	r3, #97	; 0x61
 800959a:	2b19      	cmp	r3, #25
 800959c:	d9dd      	bls.n	800955a <_strtol_l.constprop.0+0x7e>
 800959e:	1c53      	adds	r3, r2, #1
 80095a0:	d109      	bne.n	80095b6 <_strtol_l.constprop.0+0xda>
 80095a2:	2322      	movs	r3, #34	; 0x22
 80095a4:	9a05      	ldr	r2, [sp, #20]
 80095a6:	9803      	ldr	r0, [sp, #12]
 80095a8:	6013      	str	r3, [r2, #0]
 80095aa:	9b02      	ldr	r3, [sp, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0eb      	beq.n	8009588 <_strtol_l.constprop.0+0xac>
 80095b0:	1e6b      	subs	r3, r5, #1
 80095b2:	9301      	str	r3, [sp, #4]
 80095b4:	e007      	b.n	80095c6 <_strtol_l.constprop.0+0xea>
 80095b6:	2f00      	cmp	r7, #0
 80095b8:	d000      	beq.n	80095bc <_strtol_l.constprop.0+0xe0>
 80095ba:	4240      	negs	r0, r0
 80095bc:	9b02      	ldr	r3, [sp, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0e2      	beq.n	8009588 <_strtol_l.constprop.0+0xac>
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	d1f4      	bne.n	80095b0 <_strtol_l.constprop.0+0xd4>
 80095c6:	9b02      	ldr	r3, [sp, #8]
 80095c8:	9a01      	ldr	r2, [sp, #4]
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	e7dc      	b.n	8009588 <_strtol_l.constprop.0+0xac>
 80095ce:	2430      	movs	r4, #48	; 0x30
 80095d0:	2e00      	cmp	r6, #0
 80095d2:	d1ae      	bne.n	8009532 <_strtol_l.constprop.0+0x56>
 80095d4:	3608      	adds	r6, #8
 80095d6:	e7ac      	b.n	8009532 <_strtol_l.constprop.0+0x56>
 80095d8:	2c30      	cmp	r4, #48	; 0x30
 80095da:	d0a2      	beq.n	8009522 <_strtol_l.constprop.0+0x46>
 80095dc:	260a      	movs	r6, #10
 80095de:	e7a8      	b.n	8009532 <_strtol_l.constprop.0+0x56>
 80095e0:	0800a521 	.word	0x0800a521
 80095e4:	7fffffff 	.word	0x7fffffff

080095e8 <_strtol_r>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	f7ff ff77 	bl	80094dc <_strtol_l.constprop.0>
 80095ee:	bd10      	pop	{r4, pc}

080095f0 <_strtoul_l.constprop.0>:
 80095f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f2:	b087      	sub	sp, #28
 80095f4:	9202      	str	r2, [sp, #8]
 80095f6:	4a3e      	ldr	r2, [pc, #248]	; (80096f0 <_strtoul_l.constprop.0+0x100>)
 80095f8:	001e      	movs	r6, r3
 80095fa:	9101      	str	r1, [sp, #4]
 80095fc:	000b      	movs	r3, r1
 80095fe:	4694      	mov	ip, r2
 8009600:	2108      	movs	r1, #8
 8009602:	9005      	str	r0, [sp, #20]
 8009604:	001a      	movs	r2, r3
 8009606:	4660      	mov	r0, ip
 8009608:	7814      	ldrb	r4, [r2, #0]
 800960a:	3301      	adds	r3, #1
 800960c:	5d00      	ldrb	r0, [r0, r4]
 800960e:	001d      	movs	r5, r3
 8009610:	0007      	movs	r7, r0
 8009612:	400f      	ands	r7, r1
 8009614:	4208      	tst	r0, r1
 8009616:	d1f5      	bne.n	8009604 <_strtoul_l.constprop.0+0x14>
 8009618:	2c2d      	cmp	r4, #45	; 0x2d
 800961a:	d13d      	bne.n	8009698 <_strtoul_l.constprop.0+0xa8>
 800961c:	2701      	movs	r7, #1
 800961e:	781c      	ldrb	r4, [r3, #0]
 8009620:	1c95      	adds	r5, r2, #2
 8009622:	2e00      	cmp	r6, #0
 8009624:	d05f      	beq.n	80096e6 <_strtoul_l.constprop.0+0xf6>
 8009626:	2e10      	cmp	r6, #16
 8009628:	d109      	bne.n	800963e <_strtoul_l.constprop.0+0x4e>
 800962a:	2c30      	cmp	r4, #48	; 0x30
 800962c:	d107      	bne.n	800963e <_strtoul_l.constprop.0+0x4e>
 800962e:	2220      	movs	r2, #32
 8009630:	782b      	ldrb	r3, [r5, #0]
 8009632:	4393      	bics	r3, r2
 8009634:	2b58      	cmp	r3, #88	; 0x58
 8009636:	d151      	bne.n	80096dc <_strtoul_l.constprop.0+0xec>
 8009638:	2610      	movs	r6, #16
 800963a:	786c      	ldrb	r4, [r5, #1]
 800963c:	3502      	adds	r5, #2
 800963e:	2001      	movs	r0, #1
 8009640:	0031      	movs	r1, r6
 8009642:	4240      	negs	r0, r0
 8009644:	f7f6 fd72 	bl	800012c <__udivsi3>
 8009648:	9003      	str	r0, [sp, #12]
 800964a:	2001      	movs	r0, #1
 800964c:	0031      	movs	r1, r6
 800964e:	4240      	negs	r0, r0
 8009650:	f7f6 fdf2 	bl	8000238 <__aeabi_uidivmod>
 8009654:	2300      	movs	r3, #0
 8009656:	2201      	movs	r2, #1
 8009658:	9104      	str	r1, [sp, #16]
 800965a:	2101      	movs	r1, #1
 800965c:	0018      	movs	r0, r3
 800965e:	4694      	mov	ip, r2
 8009660:	4249      	negs	r1, r1
 8009662:	0022      	movs	r2, r4
 8009664:	3a30      	subs	r2, #48	; 0x30
 8009666:	2a09      	cmp	r2, #9
 8009668:	d903      	bls.n	8009672 <_strtoul_l.constprop.0+0x82>
 800966a:	3a11      	subs	r2, #17
 800966c:	2a19      	cmp	r2, #25
 800966e:	d818      	bhi.n	80096a2 <_strtoul_l.constprop.0+0xb2>
 8009670:	320a      	adds	r2, #10
 8009672:	4296      	cmp	r6, r2
 8009674:	dd19      	ble.n	80096aa <_strtoul_l.constprop.0+0xba>
 8009676:	1c5c      	adds	r4, r3, #1
 8009678:	d00b      	beq.n	8009692 <_strtoul_l.constprop.0+0xa2>
 800967a:	9c03      	ldr	r4, [sp, #12]
 800967c:	000b      	movs	r3, r1
 800967e:	4284      	cmp	r4, r0
 8009680:	d307      	bcc.n	8009692 <_strtoul_l.constprop.0+0xa2>
 8009682:	d103      	bne.n	800968c <_strtoul_l.constprop.0+0x9c>
 8009684:	9c04      	ldr	r4, [sp, #16]
 8009686:	000b      	movs	r3, r1
 8009688:	4294      	cmp	r4, r2
 800968a:	db02      	blt.n	8009692 <_strtoul_l.constprop.0+0xa2>
 800968c:	4663      	mov	r3, ip
 800968e:	4370      	muls	r0, r6
 8009690:	1810      	adds	r0, r2, r0
 8009692:	782c      	ldrb	r4, [r5, #0]
 8009694:	3501      	adds	r5, #1
 8009696:	e7e4      	b.n	8009662 <_strtoul_l.constprop.0+0x72>
 8009698:	2c2b      	cmp	r4, #43	; 0x2b
 800969a:	d1c2      	bne.n	8009622 <_strtoul_l.constprop.0+0x32>
 800969c:	781c      	ldrb	r4, [r3, #0]
 800969e:	1c95      	adds	r5, r2, #2
 80096a0:	e7bf      	b.n	8009622 <_strtoul_l.constprop.0+0x32>
 80096a2:	0022      	movs	r2, r4
 80096a4:	3a61      	subs	r2, #97	; 0x61
 80096a6:	2a19      	cmp	r2, #25
 80096a8:	d9e2      	bls.n	8009670 <_strtoul_l.constprop.0+0x80>
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	d108      	bne.n	80096c0 <_strtoul_l.constprop.0+0xd0>
 80096ae:	2222      	movs	r2, #34	; 0x22
 80096b0:	9905      	ldr	r1, [sp, #20]
 80096b2:	0018      	movs	r0, r3
 80096b4:	600a      	str	r2, [r1, #0]
 80096b6:	9a02      	ldr	r2, [sp, #8]
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	d109      	bne.n	80096d0 <_strtoul_l.constprop.0+0xe0>
 80096bc:	b007      	add	sp, #28
 80096be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096c0:	2f00      	cmp	r7, #0
 80096c2:	d000      	beq.n	80096c6 <_strtoul_l.constprop.0+0xd6>
 80096c4:	4240      	negs	r0, r0
 80096c6:	9a02      	ldr	r2, [sp, #8]
 80096c8:	2a00      	cmp	r2, #0
 80096ca:	d0f7      	beq.n	80096bc <_strtoul_l.constprop.0+0xcc>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <_strtoul_l.constprop.0+0xe4>
 80096d0:	1e6b      	subs	r3, r5, #1
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	9b02      	ldr	r3, [sp, #8]
 80096d6:	9a01      	ldr	r2, [sp, #4]
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	e7ef      	b.n	80096bc <_strtoul_l.constprop.0+0xcc>
 80096dc:	2430      	movs	r4, #48	; 0x30
 80096de:	2e00      	cmp	r6, #0
 80096e0:	d1ad      	bne.n	800963e <_strtoul_l.constprop.0+0x4e>
 80096e2:	3608      	adds	r6, #8
 80096e4:	e7ab      	b.n	800963e <_strtoul_l.constprop.0+0x4e>
 80096e6:	2c30      	cmp	r4, #48	; 0x30
 80096e8:	d0a1      	beq.n	800962e <_strtoul_l.constprop.0+0x3e>
 80096ea:	260a      	movs	r6, #10
 80096ec:	e7a7      	b.n	800963e <_strtoul_l.constprop.0+0x4e>
 80096ee:	46c0      	nop			; (mov r8, r8)
 80096f0:	0800a521 	.word	0x0800a521

080096f4 <_strtoul_r>:
 80096f4:	b510      	push	{r4, lr}
 80096f6:	f7ff ff7b 	bl	80095f0 <_strtoul_l.constprop.0>
 80096fa:	bd10      	pop	{r4, pc}

080096fc <_init>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009702:	bc08      	pop	{r3}
 8009704:	469e      	mov	lr, r3
 8009706:	4770      	bx	lr

08009708 <_fini>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr
